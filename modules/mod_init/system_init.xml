<section><title>about sysv init</title>
	<para>Many Linux distributions use init scripts to start daemons in the same way that <command>Unix System V</command><indexterm><primary>System V</primary></indexterm> did. This chapter will explain in detail how that works.</para>
	<para>Init starts daemons by using scripts, where each script starts one daemon, and where each script waits for the previous script to finish. This serial process of starting daemons is slow, and although slow booting is not a problem on servers where uptime is measured in years, the recent uptake of Linux on the desktop results in user complaints.</para>
	<para>To improve Linux startup speed, <command>Canonical</command><indexterm><primary>Canonical</primary></indexterm> has developed <command>upstart</command><indexterm><primary>upstart</primary></indexterm>, which was first used in Ubuntu. Solaris also used init up to Solaris 9, for Solaris 10 <command>Sun</command><indexterm><primary>Sun</primary></indexterm> has developed <command>Service Management Facility</command><indexterm><primary>SMF</primary></indexterm>. Both systems start daemons in parallel and can replace the SysV init scripts. There is also an ongoing effort to create <command>initng</command><indexterm><primary>initng</primary></indexterm> (init next generation).</para>
</section>
<section><title>about daemons</title>
	<para>A <command>daemon</command><indexterm><primary>daemon</primary></indexterm> is a process that runs in background, without a link to a GUI or terminal. Daemons are usually started at system boot, and stay alive until the system shuts down. In more recent technical writings, daemons are often refered to as <command>services</command>.</para>
	<para>Unix <command>daemons</command> are not to be confused with demons. <command>Evi Nemeth</command><indexterm><primary>Evi Nemeth</primary></indexterm>, co-author of the UNIX System Administration Handbook has the following to say about daemons:</para>
	<para><emphasis>Many people equate the word "daemon" with the word "demon", implying some kind of satanic connection between UNIX and the underworld. This is an egregious misunderstanding. "Daemon" is actually a much older form of "demon"; daemons have no particular bias towards good or evil, but rather serve to help define a person's character or personality. The ancient Greeks' concept of a "personal daemon" was similar to the modern concept of a "guardian angel" ...</emphasis>.</para>
</section>
<section><title>Init</title>
	<section><title>PID 1</title>
		<para>The kernel receives system control from the bootloader. After a while the kernel starts the <command>init daemon</command><indexterm><primary>init</primary></indexterm>. The <command>init</command> daemon (<command>/sbin/init</command>) is the first daemon that is started and receives <command>Process ID 1</command> (PID 1). <command>Init</command> never dies.</para>

	</section>
	<section><title>/etc/inittab</title>
		<para>When <command>/sbin/init</command><indexterm><primary>/sbin/init</primary></indexterm> is started, it will first read its configuration file <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm>. In that file, it will look for the value of initdefault (3 in the screenshot below).</para>
		<screen>
[paul@rhel4 ~]$ grep &#094;id /etc/inittab 
id:3:initdefault:
		</screen>
	</section>	
	<section><title>initdefault</title>
		<para>The value found in <command>initdefault</command> indicates the default <command>runlevel</command><indexterm><primary>runlevel</primary></indexterm>. Some Linux distributions have a brief description of runlevels in /etc/inittab, like here on Red Hat Enterprise Linux 4.</para>
		<screen>
# Default runlevel. The runlevels used by RHS are:
#   0 - halt (Do NOT set initdefault to this)
#   1 - Single user mode
#   2 - Multiuser, without NFS (The same as 3, if you don't have network)
#   3 - Full multiuser mode
#   4 - unused
#   5 - X11
#   6 - reboot (Do NOT set initdefault to this)
		</screen>
		<para>Runlevel 0 means the system is shutting down. Runlevel 1 is used for troubleshooting, only the root user can log on, and only at the console. Runlevel 3 is typical for servers, whereas runlevel 5 is typical for desktops (graphical logon). Besides runlevels 0, 1 and 6, the use may vary depending on the distribution. Debian and derived Linux systems have full network and GUI logon on runlevels 2 to 5. So always verify the proper meaning of runlevels on your system.</para>
	</section>
	<section><title>sysinit script</title>
		<section><title>/etc/rc.d/rc.sysinit</title>
			<para>The next line in <command>/etc/inittab</command> in Red Hat and derivatives is the following.</para>
			<screen>
si::sysinit:/etc/rc.d/rc.sysinit
			</screen>
			<para>This means that independent of the selected runlevel, <command>init</command> will run the <command>/etc/rc.d/rc.sysinit</command><indexterm><primary>/etc/rc.d/rc.sysinit</primary></indexterm> script. This script initializes hardware, setting some basic environment, populates /etc/mtab while mounting file systems, starts swap and more.</para>
			<screen>
[paul@rhel ~]$ egrep -e"^# Ini" -e"^# Sta" -e"^# Che" /etc/rc.d/rc.sysinit
# Check SELinux status
# Initialize hardware
# Start the graphical boot, if necessary; /usr may not be mounted yet...
# Initialiaze ACPI bits
# Check filesystems
# Start the graphical boot, if necessary and not done yet.
# Check to see if SELinux requires a relabel
# Initialize pseudo-random number generator
# Start up swapping.
# Initialize the serial ports.
			</screen>
			<para><emphasis>That <command>egrep</command><indexterm><primary>egrep</primary></indexterm> command could also have been written with <command>grep</command><indexterm><primary>grep</primary></indexterm> like this : grep "^# \(Ini\|Sta\|Che\)".</emphasis></para>
		</section>
		<section><title>/etc/init.d/rcS</title>
			<para>Debian has the following line after <command>initdefault</command>.</para>
			<screen>
si::sysinit:/etc/init.d/rcS
			</screen>
			<para>The <command>/etc/init.d/rcS</command><indexterm><primary>/etc/init.d/rcS</primary></indexterm> script will always run on Debian (independent of the selected runlevel). The script is actually running all scripts in the <command>/etc/rcS.d/</command><indexterm><primary>/etc/rcS.d/</primary></indexterm> directory in alphabetical order.</para>
			<screen>
root@barry:~# cat /etc/init.d/rcS 
#! /bin/sh
#
# rcS
#
# Call all S??* scripts in /etc/rcS.d/ in numerical/alphabetical order
#

exec /etc/init.d/rc S
			</screen>
		</section>
	</section>

		<para></para>
		<screen>
		</screen>
		<para></para>
		</section>
		<section><title>rc scripts</title>
			<para>Init will continue to read /etc/inittab and meets this section on Debian Linux.</para>
			<screen>
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
			</screen>
			<para>On Red Hat Enterprise Linux it is identical except init.d is rc.d.</para>
			<screen>
l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5
l6:6:wait:/etc/rc.d/rc 6
			</screen>
			<para>In both cases, this means that init will start the rc script with as only parameter the runlevel. Actually <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm> has fields seperated by colons. The second field determines the runlevel in which this line should be executed. So in both cases, only one line of the seven will be executed, depending on the runlevel set by <command>initdefault</command>.</para>

			<para>When you take a look in the relevant <command>/etc/rc3.d</command><indexterm><primary>/etc/rc3.d</primary></indexterm> directory, which is real on Debian and a symbolic link to <command>/etc/rc.d/rc3.d</command> on Red Hat, then you will see a lot of (links to) scripts who's name start with either uppercase K or uppercase S.</para>


 When entering a runlevel, scripts with uppercase S are started in alphabetical order with "start" as the only parameter. When leaving a runlevel, the same happens for scripts starting with K. All this is done by the rc script.</para>
		</section>
		<section><title>Power and Ctrl-Alt-Del</title>
			<para>When rc is finished starting all those scripts, init will continue to read /etc/inittab. It will read commands on what to execute in case of <command>powerfailure</command>, powerok and <command>Ctrl-Alt-Delete</command><indexterm><primary>Ctrl-Alt-Delete</primary></indexterm>. The init process never stops keeping an eye on power failures and that triple key combo.</para>
			<para>The relevant part on Red Hat Enterprise Linux.</para>
			<screen>
[paul@RHEL4b ~]$ grep "\(^c\|^p\)" /etc/inittab 
ca::ctrlaltdel:/sbin/shutdown -t3 -r now
pf::powerfail:/sbin/shutdown -f -h +2 "PowerFailure;System Shutting Down"
pr:12345:powerokwait:/sbin/shutdown -c "PowerRestored;Shutdown Cancelled"
			</screen>
			<para>And very similar on Debian Etch.</para>
			<screen>
paul@barry:~$ grep "\(^c\|^p\)" /etc/inittab
ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now
pf::powerwait:/etc/init.d/powerfail start
pn::powerfailnow:/etc/init.d/powerfail now
po::powerokwait:/etc/init.d/powerfail stop
 			</screen>
		</section>
		<section><title>getty</title>
			<para>Almost at the end of /etc/inittab, there is a section to start and <command>respawn</command><indexterm><primary>respawn(init)</primary></indexterm> several mingetty's.</para>
			<screen>
[root@RHEL4b ~]# grep getty /etc/inittab 
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
[root@RHEL4b ~]#
			</screen>
			<para>A mingetty will display a message on a virtual console and allow you to type a userid and sends that info to the login program. The login program will verify whether that user exists in /etc/passwd and prompt for (and verify) a password. If the password is correct, login passes control to the shell listed in /etc/passwd.</para>
			<para>So the getty's are started by init, and watched until they die (user exit's the shell and is logged out). When this happens, the init daemon will respawn a new mingetty. So even if you kill the mingetty's, they will be reborn automatically.</para>
			<screen>
[root@RHEL4b ~]# ps fax |grep mingetty
 3038 tty1     Ss+    0:00 /sbin/mingetty tty1
 3039 tty2     Ss+    0:00 /sbin/mingetty tty2
 3040 tty3     Ss+    0:00 /sbin/mingetty tty3
 3041 tty4     Ss+    0:00 /sbin/mingetty tty4
 3042 tty5     Ss+    0:00 /sbin/mingetty tty5
 3043 tty6     Ss+    0:00 /sbin/mingetty tty6
[root@RHEL4b ~]# kill 3038 3039 3040 3041 3042 3043
[root@RHEL4b ~]# ps fax |grep mingetty
 4774 tty1     Ss+    0:00 /sbin/mingetty tty1
 4884 tty2     Ss+    0:00 /sbin/mingetty tty2
 4974 tty3     Ss+    0:00 /sbin/mingetty tty3
 5026 tty4     Ss+    0:00 /sbin/mingetty tty4
 5073 tty5     Ss+    0:00 /sbin/mingetty tty5
 5098 tty6     Ss+    0:00 /sbin/mingetty tty6
[root@RHEL4b ~]# 			
			</screen>
			<para>You can disable a mingetty for a certain tty by removing the runlevel from the second field in its line in /etc/inittab. Don't forget to tell init about the change of its configuration file with <command>kill -1 1</command><indexterm><primary>kill(1)</primary></indexterm>.</para>
		</section>
	</section>
	<section><title>Starting and stopping daemons</title>
		<para>The K and S scripts usually are links to the real scripts in <command>/etc/init.d</command><indexterm><primary>/etc/init.d</primary></indexterm> or <command>/etc/rc.d/init.d</command><indexterm><primary>/etc/rc.d/init.d</primary></indexterm>. These can also be used when the system is running to start and stop daemons (or services). Most of them accept the following parameters: start, stop, restart, status.</para>
		<screen>
root@laika:~# /etc/init.d/samba restart
 * Stopping Samba daemons...                               [ OK ] 
 * Starting Samba daemons...                               [ OK ] 
root@laika:~# 				
		</screen>
		<para>You can achieve the same result on Red Hat and derived linuxes with the <command>service</command><indexterm><primary>service(1)</primary></indexterm> command. </para>
		<screen>
[root@RHEL4b ~]# service smb restart
Shutting down SMB services:                                [  OK  ]
Shutting down NMB services:                                [  OK  ]
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
[root@RHEL4b ~]# 
		</screen>
	</section>
	<section><title>Display the runlevel</title>
		<para>You can see your current runlevel with the <command>runlevel</command><indexterm><primary>runlevel(1)</primary></indexterm> or <command>who -r</command><indexterm><primary>who -r</primary></indexterm> commands.</para>
		<para>The runlevel command is typical linux and will output the previous and the current runlevel. If there was no previous runlevel, then it will mark it with the letter N.</para>
		<screen>
[root@RHEL4b ~]# runlevel 
N 3
		</screen>
		<para>The history of who -r dates back to older unixes, and it still works on linux.</para>
		<screen>
[root@RHEL4b ~]# who -r
         run-level 3  Jul 28 09:15                   last=S
		</screen>
	</section>
	<section><title>Changing the runlevel</title>
		<para>You can switch to another runlevel with the <command>telinit</command><indexterm><primary>telinit(1)</primary></indexterm> command. On Linux <command>/sbin/telinit</command><indexterm><primary>/sbin/telinit</primary></indexterm> is usually a hard link to /sbin/init.</para>
	</section>
	<section><title>more info</title>
	<para>You might also want to take a look at <command>chkconfig</command><indexterm><primary>chkconfig</primary></indexterm>, <command>update-rc.d</command><indexterm><primary>update-rc.d</primary></indexterm>, <command>shutdown</command><indexterm><primary>shutdown</primary></indexterm>, <command>poweroff</command><indexterm><primary>poweroff</primary></indexterm> and passing <command>init=/bin/bash</command> to the kernel.</para>
</section>
