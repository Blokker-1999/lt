<section><title>about sysv init</title>
	<para>Many Linux distributions use init scripts to start daemons in the same way that <command>Unix System V</command><indexterm><primary>System V</primary></indexterm> did. This chapter will explain in detail how that works.</para>
	<para>Init starts daemons by using scripts, where each script starts one daemon, and where each script waits for the previous script to finish. This serial process of starting daemons is slow, and although slow booting is not a problem on servers where uptime is measured in years, the recent uptake of Linux on the desktop results in user complaints.</para>
	<para>To improve Linux startup speed, <command>Canonical</command><indexterm><primary>Canonical</primary></indexterm> has developed <command>upstart</command><indexterm><primary>upstart</primary></indexterm>, which was first used in Ubuntu. Solaris also used init up to Solaris 9, for Solaris 10 <command>Sun</command><indexterm><primary>Sun</primary></indexterm> has developed <command>Service Management Facility</command><indexterm><primary>SMF</primary></indexterm>. Both systems start daemons in parallel and can replace the SysV init scripts. There is also an ongoing effort to create <command>initng</command><indexterm><primary>initng</primary></indexterm> (init next generation).</para>
</section>
<section><title>system init(ialization)</title>
	<section><title>process id 1</title>
		<para>The kernel receives system control from the bootloader. After a while the kernel starts the <command>init daemon</command><indexterm><primary>init</primary></indexterm>. The <command>init</command> daemon (<command>/sbin/init</command>) is the first daemon that is started and receives <command>process id 1</command> (PID 1). <command>Init</command> never dies.</para>

	</section>
	<section><title>configuration in /etc/inittab</title>
		<para>When <command>/sbin/init</command><indexterm><primary>/sbin/init</primary></indexterm> is started, it will first read its configuration file <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm>. In that file, it will look for the value of initdefault (3 in the screenshot below).</para>
		<screen>
[paul@rhel4 ~]$ grep &#094;id /etc/inittab 
id:3:initdefault:
		</screen>
	</section>	
	<section><title>initdefault</title>
		<para>The value found in <command>initdefault</command> indicates the default <command>runlevel</command><indexterm><primary>runlevel</primary></indexterm>. Some Linux distributions have a brief description of runlevels in /etc/inittab, like here on Red Hat Enterprise Linux 4.</para>
		<screen>
# Default runlevel. The runlevels used by RHS are:
#   0 - halt (Do NOT set initdefault to this)
#   1 - Single user mode
#   2 - Multiuser, without NFS (The same as 3, if you don't have network)
#   3 - Full multiuser mode
#   4 - unused
#   5 - X11
#   6 - reboot (Do NOT set initdefault to this)
		</screen>
		<para><command>Runlevel 0</command> means the system is shutting down. <command>Runlevel 1</command> is used for troubleshooting, only the root user can log on, and only at the console. <command>Runlevel 3</command> is typical for servers, whereas <command>runlevel 5</command> is typical for desktops (graphical logon). Besides runlevels 0, 1 and 6, the use may vary depending on the distribution. Debian and derived Linux systems have full network and GUI logon on runlevels 2 to 5. So always verify the proper meaning of runlevels on your system.</para>
	</section>
	<section><title>sysinit script</title>
		<section><title>/etc/rc.d/rc.sysinit</title>
			<para>The next line in <command>/etc/inittab</command> in Red Hat and derivatives is the following.</para>
			<screen>
si::sysinit:/etc/rc.d/rc.sysinit
			</screen>
			<para>This means that independent of the selected runlevel, <command>init</command> will run the <command>/etc/rc.d/rc.sysinit</command><indexterm><primary>/etc/rc.d/rc.sysinit</primary></indexterm> script. This script initializes hardware, sets some basic environment, populates <command>/etc/mtab</command><indexterm><primary>/etc/mtab</primary></indexterm> while mounting file systems, starts swap and more.</para>
			<screen>
[paul@rhel ~]$ egrep -e"^# Ini" -e"^# Sta" -e"^# Che" /etc/rc.d/rc.sysinit
# Check SELinux status
# Initialize hardware
# Start the graphical boot, if necessary; /usr may not be mounted yet...
# Initialiaze ACPI bits
# Check filesystems
# Start the graphical boot, if necessary and not done yet.
# Check to see if SELinux requires a relabel
# Initialize pseudo-random number generator
# Start up swapping.
# Initialize the serial ports.
			</screen>
			<para><emphasis>That <command>egrep</command><indexterm><primary>egrep</primary></indexterm> command could also have been written with <command>grep</command><indexterm><primary>grep</primary></indexterm> like this :</emphasis></para>
			<screen>
 grep "^# \(Ini\|Sta\|Che\)".
			</screen>
		</section>
		<section><title>/etc/init.d/rcS</title>
			<para>Debian has the following line after <command>initdefault</command>.</para>
			<screen>
si::sysinit:/etc/init.d/rcS
			</screen>
			<para>The <command>/etc/init.d/rcS</command><indexterm><primary>/etc/init.d/rcS</primary></indexterm> script will always run on Debian (independent of the selected runlevel). The script is actually running all scripts in the <command>/etc/rcS.d/</command><indexterm><primary>/etc/rcS.d/</primary></indexterm> directory in alphabetical order.</para>
			<screen>
root@barry:~# cat /etc/init.d/rcS 
#! /bin/sh
#
# rcS
#
# Call all S??* scripts in /etc/rcS.d/ in numerical/alphabetical order
#

exec /etc/init.d/rc S
			</screen>
		</section>
	</section>
	<section><title>rc scripts</title>
		<para>Init will continue to read <command>/etc/inittab</command> and meets this section on Debian Linux.</para>
		<screen>
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
		</screen>
		<para>On Red Hat Enterprise Linux it is identical except <command>init.d</command> is <command>rc.d</command>.</para>
		<screen>
l0:0:wait:/etc/rc.d/rc 0
l1:1:wait:/etc/rc.d/rc 1
l2:2:wait:/etc/rc.d/rc 2
l3:3:wait:/etc/rc.d/rc 3
l4:4:wait:/etc/rc.d/rc 4
l5:5:wait:/etc/rc.d/rc 5
l6:6:wait:/etc/rc.d/rc 6
		</screen>
		<para>In both cases, this means that <command>init</command> will start the rc script with the runlevel as the only parameter. Actually <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm> has fields seperated by colons. The second field determines the runlevel in which this line should be executed. So in both cases, only one line of the seven will be executed, depending on the runlevel set by <command>initdefault</command>.</para>
	</section>
	<section><title>rc directories</title>
		<para>When you take a look any of the <command>/etc/rcX.d/</command><indexterm><primary>/etc/rcX.d/</primary></indexterm> directories, then you will see a lot of (links to) scripts who's name start with either uppercase K or uppercase S.</para>
		<screen>
[root@RHEL52 rc3.d]# ls -l | tail -4
lrwxrwxrwx 1 root root 19 Oct 11  2008 S98haldaemon -> ../init.d/haldaemon
lrwxrwxrwx 1 root root 19 Oct 11  2008 S99firstboot -> ../init.d/firstboot
lrwxrwxrwx 1 root root 11 Jan 21 04:16 S99local -> ../rc.local
lrwxrwxrwx 1 root root 16 Jan 21 04:17 S99smartd -> ../init.d/smartd
		</screen>
		<para>The <command>/etc/rcX.d/</command> directories only contain links to scripts in <command>/etc/init.d/</command>. Links allow for the script to have a different name. When entering a runlevel, all scripts that start with uppercase K or uppercase S will be started in alphabetical order. Those that start with K will be started first, with <command>stop</command> as the only parameter. The remaining scripts with S will be started with <command>start</command> as the only parameter.</para>
		<para>All this is done by the <command>/etc/rc.d/rc</command><indexterm><primary>/etc/rc.d/rc</primary></indexterm> script on Red Hat and by the <command>/etc/init.d/rc</command><indexterm><primary>/etc/init.d/rc</primary></indexterm> script on Debian.</para>
	</section>
	<section><title>mingetty</title>
		<section><title>mingetty in /etc/inittab</title>
			<para>Almost at the end of <command>/etc/inittab</command><indexterm><primary>/etc/inittab</primary></indexterm> there is a section to start and <command>respawn</command><indexterm><primary>respawn(init)</primary></indexterm> several <command>mingetty</command><indexterm><primary>mingetty</primary></indexterm> daemons.</para>
			<screen>
[root@RHEL4b ~]# grep getty /etc/inittab 
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
			</screen>
		</section>
		<section><title>mingetty and /bin/login</title>
			<para>This <command>/sbin/mingetty</command><indexterm><primary>/sbin/mingetty</primary></indexterm> will display a message on a virtual console and allow you to type a userid. Then it executes the <command>/bin/login</command><indexterm><primary>/bin/login</primary></indexterm> command with that userid. The <command>/bin/login</command> program will verify whether that user exists in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> and prompt for (and verify) a password. If the password is correct, <command>/bin/login</command> passes control to the shell listed in <command>/etc/passwd</command>.</para>
		</section>
		<section><title>respawning mingetty</title>
			<para>The mingetty daemons are started by <command>init</command> and watched until they die (user exits the shell and is logged out). When this happens, the <command>init</command> daemon will <command>respawn</command><indexterm><primary>respawn(init)</primary></indexterm> a new mingetty. So even if you <command>kill</command> a mingetty daemon, it will be restarted automatically.</para>
			<para>This example shows that init respawns mingetty daemons. Look at the PID's of the last two mingetty processes.</para>
			<screen>
[root@RHEL52 ~]# ps -C mingetty
  PID TTY          TIME CMD
 2407 tty1     00:00:00 mingetty
 2408 tty2     00:00:00 mingetty
 2409 tty3     00:00:00 mingetty
 2410 tty4     00:00:00 mingetty
 2411 tty5     00:00:00 mingetty
 2412 tty6     00:00:00 mingetty
			</screen>
			<para>When we <command>kill</command><indexterm><primary>kill(1)</primary></indexterm> the last two mingettys, then <command>init</command> will notice this and start them again (with a different PID).</para>
			<screen>
[root@RHEL52 ~]# kill 2411 2412
[root@RHEL52 ~]# ps -C mingetty
  PID TTY          TIME CMD
 2407 tty1     00:00:00 mingetty
 2408 tty2     00:00:00 mingetty
 2409 tty3     00:00:00 mingetty
 2410 tty4     00:00:00 mingetty
 2821 tty5     00:00:00 mingetty
 2824 tty6     00:00:00 mingetty
			</screen>
		</section>
		<section><title>disabling a mingetty</title>
			<para>You can disable a mingetty for a certain tty by removing the runlevel from the second field in its line in /etc/inittab. Don't forget to tell init about the change of its configuration file with <command>kill -1 1</command><indexterm><primary>kill(1)</primary></indexterm>.</para>
			<para>The example below shows how to disable mingetty on tty3 to tty6 in runlevels 4 and 5.</para>
			<screen>
[root@RHEL52 ~]# grep getty /etc/inittab 
# Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:23:respawn:/sbin/mingetty tty3
4:23:respawn:/sbin/mingetty tty4
5:23:respawn:/sbin/mingetty tty5
6:23:respawn:/sbin/mingetty tty6
			</screen>
		</section>
	</section>
</section>
<section><title>daemon or demon ?</title>
	<para>A <command>daemon</command><indexterm><primary>daemon</primary></indexterm> is a process that runs in background, without a link to a GUI or terminal. Daemons are usually started at system boot, and stay alive until the system shuts down. In more recent technical writings, daemons are often refered to as <command>services</command>.</para>
	<para>Unix <command>daemons</command> are not to be confused with demons. <command>Evi Nemeth</command><indexterm><primary>Evi Nemeth</primary></indexterm>, co-author of the UNIX System Administration Handbook has the following to say about daemons:</para>
	<para><emphasis>Many people equate the word "daemon" with the word "demon", implying some kind of satanic connection between UNIX and the underworld. This is an egregious misunderstanding. "Daemon" is actually a much older form of "demon"; daemons have no particular bias towards good or evil, but rather serve to help define a person's character or personality. The ancient Greeks' concept of a "personal daemon" was similar to the modern concept of a "guardian angel" ...</emphasis>.</para>
</section>
<section><title>starting and stopping daemons</title>
	<para>The K and S scripts are links to the real scripts in <command>/etc/init.d/</command><indexterm><primary>/etc/init.d/</primary></indexterm>. These can also be used when the system is running to start and stop daemons (or services). Most of them accept the following parameters: start, stop, restart, status.</para>
	<para>For example in this screenshot we restart the samba daemon.</para>
	<screen>
root@laika:~# /etc/init.d/samba restart
 * Stopping Samba daemons...                               [ OK ] 
 * Starting Samba daemons...                               [ OK ] 
	</screen>
	<para>You can achieve the same result on RHEL/Fedora with the <command>service</command><indexterm><primary>service(1)</primary></indexterm> command.</para>
	<screen>
[root@RHEL4b ~]# service smb restart
Shutting down SMB services:                                [  OK  ]
Shutting down NMB services:                                [  OK  ]
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
	</screen>
	<para>You might also want to take a look at <command>chkconfig</command><indexterm><primary>chkconfig</primary></indexterm>, <command>update-rc.d</command><indexterm><primary>update-rc.d</primary></indexterm>.</para>
</section>
<section><title>chkconfig</title>
	<para>The purpose of <command>chkconfig</command><indexterm><primary>chkconfig(8)</primary></indexterm> is to relieve system administrators of manually managing all the links and scripts in <command>/etc/init.d</command> and <command>/etc/rcX.d/</command>.</para>
	<section><title>chkconfig --list</title>
		<para>Here we use <command>chkconfig</command> to list the status of a service in the different runlevels. You can see that the <command>crond</command> daemon (or service) is only activated in runlevels 2 to 5.</para>
		<screen>
[root@RHEL52 ~]# chkconfig --list crond
crond          	0:off	1:off	2:on	3:on	4:on	5:on	6:off
		</screen>
		<para>When you compare the screenshot above with the one below, you can see that <command>off</command> equals to a K link to the script, whereas <command>on</command> equals to an S link.</para>
		<screen>
[root@RHEL52 etc]# find ./rc?.d/ -name \*crond -exec ls -l {} \;|cut -b40-
./rc0.d/K60crond -> ../init.d/crond
./rc1.d/K60crond -> ../init.d/crond
./rc2.d/S90crond -> ../init.d/crond
./rc3.d/S90crond -> ../init.d/crond
./rc4.d/S90crond -> ../init.d/crond
./rc5.d/S90crond -> ../init.d/crond
./rc6.d/K60crond -> ../init.d/crond
		</screen>
	</section>
	<section><title>runlevel configuration</title>
		<para>Here you see how to use chkconfig to disable (or enable) a service in a certain runlevel.</para>
		<para>This screenshot shows how to disable <command>crond</command> in runlevel 3.</para>
		<screen>
[root@RHEL52 ~]# chkconfig --level 3 crond off
[root@RHEL52 ~]# chkconfig --list crond
crond          	0:off	1:off	2:on	3:off	4:on	5:on	6:off
		</screen>
		<para>This screenshot shows how to enable <command>crond</command> in runlevels 3 and 4.</para>
		<screen>
[root@RHEL52 ~]# chkconfig --level 34 crond on
[root@RHEL52 ~]# chkconfig --list crond
crond          	0:off	1:off	2:on	3:on	4:on	5:on	6:off
		</screen>
	</section>
	<section><title>chkconfig configuration</title>
		<para>Every script in <command>/etc/init.d/</command><indexterm><primary>/etc/init.d/</primary></indexterm> can have (comment) lines to tell chkconfig what to do with the service. The line with <command># chkconfig:</command> contains the runlevels in which the service should be started (2345), followed by the priority for start (90) and stop (60).</para>
		<screen>
[root@RHEL52 ~]# head -9 /etc/init.d/crond | tail -5
# chkconfig: 2345 90 60
# description: cron is a standard UNIX program that runs user-specified
#              programs at periodic scheduled times. vixie cron adds a
#              number of features to the basic UNIX cron, including better
#              security and more powerful configuration options.
		</screen>
	</section>
	<section><title>enable and disable services</title>
		<para>Services can be enabled or disabled in all runlevels with one command. Runlevels 0, 1 and 6 are always stopping services (or calling the scripts with <command>stop</command>) even when their name starts with uppercase S.</para>
		<screen>
[root@RHEL52 ~]# chkconfig crond off
[root@RHEL52 ~]# chkconfig --list crond
crond           0:off   1:off   2:off   3:off   4:off   5:off   6:off
[root@RHEL52 ~]# chkconfig crond on
[root@RHEL52 ~]# chkconfig --list crond
crond           0:off   1:off   2:on    3:on    4:on    5:on    6:off
		</screen>
	</section>
</section>
<section><title>update-rc.d</title>
	<para></para>
	<screen>
	</screen>
	<para></para>
</section>
