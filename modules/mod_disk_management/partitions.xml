<section><title>Partitions</title>
	<section><title>About Partitions</title>
		<para>Linux requires you to create one or more <command>partitions</command><indexterm><primary>partition</primary></indexterm> aka <command>slices</command><indexterm><primary>slice</primary></indexterm>. <emphasis>Please don't break your head on the difference between a partition and a slice. Different tools have different interpretations of which is which.</emphasis> Although partitions reside on the same hard disk device, you can (almost) see them as independent of each other.</para>
		<para>A partition's <command>geometry</command> and size is usually defined by a starting and ending cylinder (sometimes by head or even sector). Partitions can be of type <command>primary</command><indexterm><primary>primary partition</primary></indexterm> (maximum four), <command>extended</command><indexterm><primary>extended partition</primary></indexterm> (maximum one) or <command>logical</command><indexterm><primary>logical drive</primary></indexterm> (contained within the extended partition). Each partition has a <command>type field</command> that contains a code. This determines the computers operating system or the partitions file system.</para>
	</section>
	<section><title>Partition naming</title>
		<para>We saw before that hard disk devices are named /dev/hdx or /dev/sdx with x depending on the hardware configuration. Next is the partition number, starting the count at 1. Hence the four (possible) primary partitions are numbered 1 to 4. Logical partition counting always starts at 5. Thus /dev/hda2 is the second partition on the first ATA hard disk device, and /dev/hdb5 is the first logical partition on the second ATA hard disk device. Same for SCSI, /dev/sdb3 is the third partition on the second SCSI disk.</para>

<table frame='all'><title>Partition naming</title>
<?dbfo table-width="50%" ?>
<tgroup cols='2' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="3*" align="center"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<thead>
<row>
  <entry>Partition Type</entry>
  <entry>naming</entry>
</row>
</thead>
<tbody>
<row>
  <entry>Primary (max 4)</entry>
  <entry>1-4</entry>
</row>
<row>
  <entry>Extended (max 1)</entry>
  <entry>1-4</entry>
</row>
<row>
  <entry>Logical</entry>
  <entry>5-</entry>
</row>
</tbody>
</tgroup>
</table>
	</section>
	<section><title>/proc/partitions</title>
		<para>The <command>/proc/partitions</command><indexterm><primary>/proc/partitions</primary></indexterm> file contains a table with major and minor number of partitioned devices, their number of blocks and the device name in <command>/dev</command><indexterm><primary>/dev</primary></indexterm>. Verify with <command>/proc/devices</command><indexterm><primary>/proc/devices</primary></indexterm> to link the major number to the proper device.</para>
		<screen>
paul@RHELv4u4:~$ cat /proc/partitions 
major minor  #blocks  name

   3     0     524288 hda
   3    64     734003 hdb
   8     0    8388608 sda
   8     1     104391 sda1
   8     2    8281507 sda2
   8    16    1048576 sdb
   8    32    1048576 sdc
   8    48    1048576 sdd
 253     0    7176192 dm-0
 253     1    1048576 dm-1
		</screen>
	</section>
	<section><title>fdisk -l</title>
		<para>In the <command>fdisk -l</command><indexterm><primary>fdisk(1)</primary></indexterm> example below you can see that two partitions exist on /dev/sdb2. The first partition spans 31 cylinders and contains a Linux swap partition. The second partition is much bigger.</para>
		<screen>
root@laika:~# fdisk -l /dev/sdb

Disk /dev/sdb: 100.0 GB, 100030242816 bytes
255 heads, 63 sectors/track, 12161 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes

   Device Boot    Start      End     Blocks   Id  System
/dev/sdb1             1       31     248976   82  Linux swap / Solaris
/dev/sdb2            32    12161   97434225   83  Linux
root@laika:~#		
		</screen>
	</section>
	<section><title>other tools</title>
		<para>You might be interested in more GUI-oriented alternatives to fdisk and parted like cfdisk, sfdisk and gparted.</para>
	</section>
	<section><title>Partitioning new disks</title>
		<para>In the example below, we bought a new disk for our system. After the new hardware is properly attached, you can use <command>fdisk</command> and <command>parted</command><indexterm><primary>parted(1)</primary></indexterm> to create the necessary partition(s). This example uses fdisk, but there is nothing wrong with using parted.</para>
		<para>First, we check with <command>fdisk -l</command> whether Linux can see the new disk. Yes it does, the new disk is seen as /dev/sdb, but it does not have any partitions yet.</para>
		<screen>
root@RHELv4u2:~# fdisk -l
		
Disk /dev/sda: 12.8 GB, 12884901888 bytes
255 heads, 63 sectors/track, 1566 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start      End      Blocks   Id  System
/dev/sda1   *       1        13      104391   83  Linux
/dev/sda2          14      1566    12474472+  8e  Linux LVM
		
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Disk /dev/sdb doesn't contain a valid partition table
		</screen>
		<para>Then we create a partition with fdisk on /dev/sdb. First we start the fdisk tool with /dev/sdb as argument. Be very very careful not to partition the wrong disk!!</para>
		<screen>
root@RHELv4u2:~# fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI...
Building a new DOS disklabel. Changes will remain in memory only,
until you decide to write them. After that, of course, the previous
content won't be recoverable.
		
Warning: invalid flag 0x0000 of partition table 4 will be corrected...
		</screen>
		<para>Inside the fdisk tool, we can issue the <command>p</command><indexterm><primary>fdisk(1)</primary></indexterm> command to see the current disks partition table.</para>
		<screen>
Command (m for help): p
		
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start         End      Blocks   Id  System
		
		</screen>
		<para>No partitions exist yet, so we issue <command>n</command> to create a new partition. We choose p for primary, 1 for the partition number, 1 for the start cylinder and 14 for the end cylinder.</para>
		<screen>
Command (m for help): n
Command action
e   extended
p   primary partition (1-4)
p
Partition number (1-4): 1
First cylinder (1-130, default 1): 
Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-130, default 130): 14
		</screen>
		<para>We can now issue p again to verify our changes, but they are not yet written to disk. This means we can still cancel this operation! But it looks good, so we use <command>w</command> to write the changes to disk, and then quit the fdisk tool.</para>
		<screen>
Command (m for help): p
	
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1          14      112423+  83  Linux
		
Command (m for help): w
The partition table has been altered!
		
Calling ioctl() to re-read partition table.
Syncing disks.
root@RHELv4u2:~#
		</screen>
		<para>Let's verify again with <command>fdisk -l</command><indexterm><primary>fdisk(1)</primary></indexterm> to make sure reality fits our dreams. Indeed, the screenshot below now shows a partition on /dev/sdb. </para>
		<screen>
root@RHELv4u2:~# fdisk -l
		
Disk /dev/sda: 12.8 GB, 12884901888 bytes
255 heads, 63 sectors/track, 1566 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start        End      Blocks   Id  System
/dev/sda1   *        1         13      104391   83  Linux
/dev/sda2           14       1566    12474472+  8e  Linux LVM
		
Disk /dev/sdb: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
		
Device Boot      Start         End      Blocks   Id  System
/dev/sdb1               1          14      112423+  83  Linux
root@RHELv4u2:~# 
		</screen>
	</section>
	<section><title>Master Boot Record</title>
		<para>The partition table information (primary and extended partitions) is written in the <command>Master Boot Record</command><indexterm><primary>master boot record</primary></indexterm> or <command>MBR</command><indexterm><primary>mbr</primary></indexterm>. You can use <command>dd</command><indexterm><primary>dd(1)</primary></indexterm> to copy the mbr to a file.</para>
		<para>This example copies the master boot record from the first SCSI hard disk.</para>
		<screen>dd if=/dev/sda of=/SCSIdisk.mbr bs=512 count=1</screen>
		<para>The same tool can also be used to wipe out all information about partitions on a disk. This example writes zeroes over the master boot record.</para>
		<screen>dd if=/dev/zero of=/dev/sda bs=512 count=1</screen>
	</section>
	<section><title>partprobe</title>
		<para>Don't forget that after restoring a Master Boot Record with dd, that you need to force the kernel to reread the partition table with  <command>partprobe</command><indexterm><primary>partprobe(1)</primary></indexterm>. After running partprobe, the partitions can be used again.</para>
		<screen>
[root@RHEL5 ~]# partprobe 
[root@RHEL5 ~]#
		</screen>
	</section>
	<section><title>logical drives</title>
		<para>The partition table does not contain information about logical drives. So the dd backup of the mbr only works for primary and extended partitions. To backup the partition table inlcuding the logical drives, you can use <command>sfdisk</command><indexterm><primary>sfdisk(1)</primary></indexterm>. The following command will copy the mbr and the logical drive information from /dev/sda to /dev/sdb.</para>
		<screen>sfdisk -d /dev/sda | sfdisk /dev/sdb</screen>
	</section>
	<section><title>Practice Partitions</title>
		<para>1. Use fdisk and df to display existing partitions and sizes. Compare the output of the two commands.</para>
		<para>2. Create a 50MB primary partition on a small disk.</para>
		<para>3. Create a 200MB primary partition and two 100MB logical drives on a big disk.</para>
		<para>4. Use df and fdisk -l to verify your work.</para>
		<para>5. Take a backup of the partition table containing your 200MB primary and 100MB logical drives. Destroy the partitions with fdisk. Then restore your backup.</para>
		<para></para>
		<para></para>
	</section>
</section>
