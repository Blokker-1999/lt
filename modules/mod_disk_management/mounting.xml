<section><title>mounting</title>
	<para>Once you've put a file system on a partition, you can <command>mount</command><indexterm><primary>mount(1)</primary></indexterm> it. Mounting a file system makes it available for use, usually as a directory. We say <command>mounting a file system</command><indexterm><primary>mounting</primary></indexterm> instead of mounting a partition because we will see later that we can also mount file systems that do not exists on partitions.</para>
	<section><title>mounting local file systems</title>
		<para>On all <command>Unix</command> systems, every file and every directory is part of one big file tree. To access a file, you need to know the full path starting from the root directory. When adding a <command>file system</command> to your computer, you need to make it available somewhere in the file tree. The directory where you make a file system available is called a <command>mount point</command><indexterm><primary>mount point</primary></indexterm>.</para>
		<section><title>/bin/mkdir</title>
			<para>This example shows how to create a new <command>mount point</command> with <command>mkdir</command>.</para>
			<screen>
root@RHELv4u2:~# mkdir /home/project55
			</screen>
		</section>
		<section><title>/bin/mount</title>
			<para>When the <command>mount point</command> is created, and a <command>file system</command> is present on the partition, then <command>mount</command> can <command>mount</command> the <command>file system</command> on the <command>mount point directory</command>.</para>
			<screen>
root@RHELv4u2:~# mount -t ext2 /dev/sdb1 /home/project55/
			</screen>
 			<para>Once mounted, the new file system is accessible to users.</para>
		</section>
		<section><title>/etc/filesystems</title>
			<para>Actually the explicit <command>-t ext2</command> option to set the file system is not always necessary. The <command>mount</command> command is able to automatically detect a lot of file systems.</para>
			<para>When mounting a file system without specifying explicitly the file system, then <command>mount</command><indexterm><primary>mount</primary></indexterm> will first probe <command>/etc/filesystems</command><indexterm><primary>/etc/filesystems</primary></indexterm>. Mount will skip lines with the <command>nodev</command><indexterm><primary>nodev</primary></indexterm> directive.</para>
			<screen>
paul@RHELv4u4:~$ cat /etc/filesystems 
ext3
ext2
nodev proc
nodev devpts
iso9660
vfat
hfs
paul@RHELv4u4:~$
			</screen>
		</section>
		<section><title>/proc/filesystems</title>
			<para>When <command>/etc/filesystems</command> does not exist, or ends with a single * on the last line, then <command>mount</command> will read <command>/proc/filesystems</command><indexterm><primary>/proc/filesystems</primary></indexterm>.</para>
			<screen>
[root@RHEL52 ~]# cat /proc/filesystems | grep -v ^nodev
	ext2
	iso9660
	ext3
			</screen>
		</section>
	</section>
	<section><title>displaying mounted file systems</title>
		<para>To display all mounted file systems, issue the <command>mount</command> command. Or look at the files <command>/proc/mounts</command><indexterm><primary>/proc/mounts</primary></indexterm> and <command>/etc/mtab</command><indexterm><primary>/etc/mtab</primary></indexterm>.</para>
		<section><title>/bin/mount</title>
			<para>The simplest and most common way to view all mounts is by issuing the <command>mount</command><indexterm><primary>mount(1)</primary></indexterm> command without any arguments.</para>
			<screen>
root@RHELv4u2:~# mount | grep /dev/sdb
/dev/sdb1 on /home/project55 type ext2 (rw)
			</screen>
		</section>
		<section><title>/proc/mounts</title>
			<para>The kernel provides the info in <command>/proc/mounts</command> in file form, but <command>/proc/mounts</command> does not exist as a file on any hard disk. Looking at <command>/proc/mounts</command> is looking at information that comes directly from the kernel.</para>
			<screen>
root@RHELv4u2:~# cat /proc/mounts | grep /dev/sdb
/dev/sdb1 /home/project55 ext2 rw 0 0
			</screen>
		</section>
		<section><title>/etc/mtab</title>
			<para>The <command>/etc/mtab</command> file is not updated by the kernel, but is maintained by the <command>mount</command> command. Do not edit <command>/etc/mtab</command> manually.</para>
			<screen>
root@RHELv4u2:~# cat /etc/mtab | grep /dev/sdb
/dev/sdb1 /home/project55 ext2 rw 0 0
			</screen>
		</section>
		<section><title>/bin/df</title>
		<para>A more user friendly way to look at mounted file systems is <command>df</command><indexterm><primary>df(1)</primary></indexterm>. The <command>df (diskfree)</command> command has the added benefit of showing you the free space on each mounted disk. Like a lot of Linux commands, <command>df</command> supports the <command>-h</command> switch to make the output more <command>human readable</command>.</para>
		<screen>
root@RHELv4u2:~# df
Filesystem           1K-blocks      Used Available Use% Mounted on
/dev/mapper/VolGroup00-LogVol00
11707972   6366996   4746240  58% /
/dev/sda1             101086    9300    86567  10% /boot
none                  127988       0   127988   0% /dev/shm
/dev/sdb1             108865    1550   101694   2% /home/project55
root@RHELv4u2:~# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/mapper/VolGroup00-LogVol00
12G  6.1G  4.6G  58% /
/dev/sda1              99M  9.1M   85M  10% /boot
none                  125M     0  125M   0% /dev/shm
/dev/sdb1             107M  1.6M  100M   2% /home/project55
		</screen>
                <para>In the <command>df -h</command><indexterm><primary>df(1)</primary></indexterm> example below you can see the size, free space, used gigabytes and percentage and mount point of a partition.</para>
                <screen>
root@laika:~# df -h | egrep -e "(sdb2|File)"
Filesystem            Size Used Avail Use% Mounted on
/dev/sdb2              92G   83G  8.6G  91% /media/sdb2
root@laika:~#
                </screen>
		</section>
        	<section><title>/bin/du</title>
        	        <para>The <command>du</command><indexterm><primary>du(1)</primary></indexterm> command can summarize <command>disk usage</command> for files and directories. Preventing <command>du</command> to go into subdirectories with the <command>-s</command> option will give you a total for that directory. This option is often used together with <command>-h</command>, so <command>du -sh</command> on a mount point gives the total amount used in that partition.</para>
        	        <screen>
root@pasha:~# du -sh /home/reet
881G     /home/reet
			</screen>
		</section>
	</section>
	<section><title>permanent mounts</title>
		<para>Until now, we performed all mounts manually. This works nice, until the next reboot. Luckily there is a way to tell your computer to automatically mount certain file systems during boot.</para>
		<section><title>/etc/fstab</title>
			<para>This is done using the file system table located in the <command>/etc/fstab</command><indexterm><primary>/etc/fstab</primary></indexterm> file. Below is a sample <command>/etc/fstab</command> file.</para>
			<screen>
root@RHELv4u2:~# cat /etc/fstab 
/dev/VolGroup00/LogVol00 /                ext3    defaults        1 1
LABEL=/boot             /boot             ext3    defaults        1 2
none                    /dev/pts          devpts  gid=5,mode=620  0 0
none                    /dev/shm          tmpfs   defaults        0 0
none                    /proc             proc    defaults        0 0
none                    /sys              sysfs   defaults        0 0
/dev/VolGroup00/LogVol01 swap             swap    defaults        0 0
			</screen>
			<para>By adding the following line, we can automate the mounting of a file system.</para>
			<screen>
/dev/sdb1                /home/project55      ext2    defaults    0 0
			</screen>
		</section>
		<section><title>mount /mountpoint</title>
			<para>Adding an entry to <command>/etc/fstab</command> has the added advantage that you can simplify the <command>mount</command> command. The command in the screenshot below forces <command>mount</command> to look for the partition info in <command>/etc/fstab</command>.</para>
			<screen># mount /home/project55
			</screen>
		</section>
	</section>
	<section><title>securing mounts</title>
		<para>File systems can be secured with several <command>mount options</command>. Here are some examples.</para>
		<section><title>ro</title>
			<para>The <command>ro</command> option will mount a file system as read only, preventing anyone from writing.</para>
			<screen>root@rhel53 ~# mount -t ext2 -o ro /dev/hdb1 /home/project42
root@rhel53 ~# touch /home/project42/testwrite
touch: cannot touch `/home/project42/testwrite': Read-only file system</screen>
		</section>
		<section><title>noexec</title>
			<para>The <command>noexec</command> option will prevent the execution of binaries and scripts on the mounted file system.</para>
			<screen>root@rhel53 ~# mount -t ext2 -o noexec /dev/hdb1 /home/project42
root@rhel53 ~# cp /bin/cat /home/project42
root@rhel53 ~# /home/project42/cat /etc/hosts
-bash: /home/project42/cat: Permission denied
root@rhel53 ~# echo echo hello > /home/project42/helloscript
root@rhel53 ~# chmod +x /home/project42/helloscript 
root@rhel53 ~# /home/project42/helloscript 
-bash: /home/project42/helloscript: Permission denied</screen>
		</section>
		<section><title>nosuid</title>
			<para>The <command>nosuid</command> option will ignore <command>setuid</command> bit set binaries on the mounted file system.</para>
			<para>Note that you can still set the <command>setuid</command> bit on files.</para>
			<screen>root@rhel53 ~# mount -o nosuid /dev/hdb1 /home/project42
root@rhel53 ~# cp /bin/sleep /home/project42/
root@rhel53 ~# chmod 4555 /home/project42/sleep 
root@rhel53 ~# ls -l /home/project42/sleep 
-r-sr-xr-x 1 root root 19564 Jun 24 17:57 /home/project42/sleep
			</screen>
			<para>But users cannot exploit the <command>setuid</command> feature.</para>
			<screen>
root@rhel53 ~# su - paul
[paul@rhel53 ~]$ /home/project42/sleep 500 &#038;
[1] 2876
[paul@rhel53 ~]$ ps -f 2876
UID        PID  PPID  C STIME TTY      STAT   TIME CMD
paul      2876  2853  0 17:58 pts/0    S      0:00 /home/project42/sleep 500
[paul@rhel53 ~]$</screen>
		</section>
		<section><title>noacl</title>
			<para>To prevent cluttering permissions with <command>acl's</command>, use the <command>noacl</command> option.</para>
			<screen>root@rhel53 ~# mount -o noacl /dev/hdb1 /home/project42</screen>
		</section>
		<para>More <command>mount options</command> can be found in the manual page of <command>mount</command>.</para>
	</section>
</section>

