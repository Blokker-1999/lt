<section><title>about shells</title>
	<section><title>several shells</title>
		<para>The command line interface used on most Linux systems is <command>bash</command><indexterm><primary>/bin/bash</primary></indexterm>, which stands for <command>Bourne again shell</command><indexterm><primary>Bourne again shell</primary></indexterm>. Bash incorporates features from <command>sh</command><indexterm><primary>/bin/sh</primary></indexterm> (the original Bourne shell), <command>csh</command><indexterm><primary>/bin/csh</primary></indexterm> (the C shell) and <command>ksh</command><indexterm><primary>/bin/ksh</primary></indexterm> (the Korn shell). Ubuntu recently started including the <command>dash</command><indexterm><primary>/bin/dash</primary></indexterm> (Debian ash) shell.</para>
		<para>This chapter will explain general features of a shell using mainly the /bin/bash shell. Important differences in /bin/ksh and /bin/dash will be mentioned seperately.</para>
	</section>
	<section><title>Why talk about shells ?</title>
		<para>The shell is very important, because every command on your Linux system is processed and changed by the shell. After you type the command, but before the command is executed the shell might change your command line! The manual page of a typical shell contains more than one hundred pages.</para>
	</section>
	<section><title>commands</title>
		<para>Not all commands are external to the shell, some are built-in.</para>
		<para><command>External commands</command> are programs that have their own binary and reside somewhere on the system in a directory. Many external commands are located in /bin or /sbin. <command>Built-in commands</command> are functions inside the shell program. When an external command exists with the same name as a built-in command, then the built-in will take priority. You will need to provide the full path to execute the external command.</para>
	</section>
	<section><title>which</title>
		<para>To find out whether a command given to the shell will be executed as an <command>external command</command> or as a <command>built-in command</command>, use the <command>which</command><indexterm><primary>which(1)</primary></indexterm> command. This screenshot shows that cd is not a seperate binary, that cat will execute /bin/cat and which will execute /usr/bin/which.</para>
		<screen>
paul@laika:~$ which cd
paul@laika:~$ which cat
/bin/cat
paul@laika:~$ which which
/usr/bin/which
paul@laika:~$
		</screen>
		<para>The which command will look for binaries in the <command>PATH</command><indexterm><primary>$PATH</primary></indexterm> environment variable. (Variables are explained later). In the screenshot below, it looks like cd is built-in, and ls cp rm mv mkdir pwd and which are external commands.</para> 
		<screen>
[root@RHEL4b ~]# which cp ls mv rm cd mkdir pwd which
/bin/cp
/bin/ls
/bin/mv
/bin/rm
/usr/bin/which: no cd in (/usr/kerberos/sbin:/usr/kerberos/bin:...
/bin/mkdir
/bin/pwd
/usr/bin/which
[root@RHEL4b ~]#
		</screen>
	</section>
	<section><title>type</title>
	<para>You can also use the shell built-in <command>type</command> command, which will show you whether the command is aliased or not (explained later).</para>
<screen>
paul@laika:~$ type ls
ls is aliased to `ls --color=auto'
paul@laika:~$ type -P ls
/bin/ls
paul@laika:~$ 
</screen>
	</section>
	<section><title>shell expansion</title>
    		<para>One of the primary features of a shell is to perform a <command>command line scan</command><indexterm><primary>command line scan</primary></indexterm>. When you enter a command on the shell's command prompt, and press the enter key, then the shell will start scanning that line. While scanning the line, the shell might make a lot of changes to the command line you typed. This process is called <command>shell expansion</command><indexterm><primary>shell expansion</primary></indexterm>. After the shell has finished scanning and changing that line, the line will be executed. Shell expansion is influenced by the following topics : control operators, white space removal, filename generation, variables, escaping, embedding and shell aliases. All these topics are discussed in the next sections.</para>
	</section>
	<section><title>echo</title>
		<para>This book frequently uses the <command>echo</command><indexterm><primary>echo(1)</primary></indexterm> command to demonstrate shell features. The echo command echoes the input that it receives.</para>
		<screen>
paul@laika:~$ echo Burtonville
Burtonville
paul@laika:~$ echo Smurfs are blue
Smurfs are blue
		</screen>
	</section>
</section>
