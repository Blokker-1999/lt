<chapter><title>Standard File Permissions</title>
	<section><title>Reading permissions</title>
		<para>The <command>users</command><indexterm><primary>users</primary></indexterm> and <command>groups</command><indexterm><primary>groups</primary></indexterm> of a system can be locally managed in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> and <command>/etc/group</command><indexterm><primary>/etc/group</primary></indexterm>, or they can be in a NIS, LDAP or Samba domain. These users and groups can <command>own</command> files. Actually, every file has a <command>user owner</command><indexterm><primary>file ownership</primary></indexterm> and a <command>group owner</command>, as can be seen in the following screenshot.</para>
		<screen>
paul@RHELv4u4:~/test$ ls -l
total 24
-rw-rw-r--  1 paul paul  17 Feb  7 11:53 file1
-rw-rw-r--  1 paul paul 106 Feb  5 17:04 file2
-rw-rw-r--  1 paul proj 984 Feb  5 15:38 data.odt
-rw-r--r--  1 root root   0 Feb  7 16:07 stuff.txt
paul@RHELv4u4:~/test$ 
		</screen>
		<para>User paul owns three files, two of those are also owned by the group paul, data.odt is owned by the group proj. The root user owns the file stuff.txt, as does the group root. Before the user and group owner, you can see ten characters. The first character tells us the type of file. Regular files get a <command>-</command>, directories get a <command>d</command>, symbolic links are shown with an <command>l</command>, pipes get a <command>p</command>, character devices a <command>c</command>, block devices a <command>b</command> and sockets an <command>s</command>. After that, you get the permissions in three triplets, containing <command>r</command> for read access, <command>w</command> for write access and <command>x</command> for execute permissions. You need the r permission to list (ls) the contents of a directory and x permission to enter (cd) a directory, and you need the w permission to create files in or remove files from a directory. Some examples below.</para>
		<screen>
paul@laika:~/perms$ ll
total 12K
drwxr-xr-x 2 paul paul 4.0K 2007-02-07 22:26 AllEnter_UserCreateDelete
-rw-r--r-- 1 paul paul    0 2007-02-07 22:22 DefaultPermissions.txt
-rwxrwxrwx 1 paul paul    0 2007-02-07 22:21 EveryoneFullControl.txt
-r--r----- 1 paul paul    0 2007-02-07 22:21 OnlyOwnerRead.txt
-rwxrwx--- 1 paul paul    0 2007-02-07 22:21 OwnerAll_Restnothing.txt
drwxrwx--- 2 paul paul 4.0K 2007-02-07 22:25 UserAndGroupEnter
drwx------ 2 paul paul 4.0K 2007-02-07 22:25 UserEnterOnly
paul@laika:~/perms$ 
		</screen>
		<para>It is important to know that the first triplet represents the <command>user owner</command>, the second is the <command>group owner</command>, and the third triplet is all the <command>other</command> users that are not the user owner and are not a member of the group owner.</para>
	</section>
	<section><title>Setting permissions</title>
		<para>Permissions can be changed with <command>chmod</command><indexterm><primary>chmod(1)</primary></indexterm>, owners can be changed with <command>chown</command><indexterm><primary>chown(1)</primary></indexterm> and <command>chgrp</command><indexterm><primary>chgrp(1)</primary></indexterm>. The first example gives the user owner execute permissions.</para>
		<screen>
paul@laika:~/perms$ ls -l permissions.txt 
-rw-r--r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
paul@laika:~/perms$ chmod u+x permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxr--r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>This example removes the group owners read permission.</para>
		<screen>
paul@laika:~/perms$ chmod g-r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx---r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>This example removes the others read permission.</para>
		<screen>
paul@laika:~/perms$ chmod o-r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx------ 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>This example gives all of them the write permission.</para>
		<screen>
paul@laika:~/perms$ chmod a+w permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx-w--w- 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>You don't even have to type the a.</para>
		<screen>
paul@laika:~/perms$ chmod +x permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwx-wx-wx 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>You can also set explicit permissions.</para>
		<screen>
paul@laika:~/perms$ chmod u=rw permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rw--wx-wx 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>Feel free to make any kind of combinations.</para>
		<screen>
paul@laika:~/perms$ chmod u=rw,g=rw,o=r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rw-rw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
		<para>Even the fishy combinations are accepted by chmod.</para>
		<screen>
paul@laika:~/perms$ chmod u=rwx,ug+rw,o=r permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxrw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
	</section>
	<section><title>Setting octal permissions</title>
		<para>Most Unix administrators will use the <command>old school</command> octal system to talk about and set permissions. Look at the triplet bitwise, equaling r to 4, w to 2 and x to 1. This makes <command>777</command><indexterm><primary>777</primary></indexterm> equal to rwxrwxrwx and by the same logic has 654 mean rw-r-xr-- . The <command>chmod</command> command will accept these numbers.</para>
		<screen>
paul@laika:~/perms$ chmod 777 permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxrwxrwx 1 paul paul 0 2007-02-07 22:34 permissions.txt
paul@laika:~/perms$ chmod 664 permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rw-rw-r-- 1 paul paul 0 2007-02-07 22:34 permissions.txt
paul@laika:~/perms$ chmod 750 permissions.txt 
paul@laika:~/perms$ ls -l permissions.txt 
-rwxr-x--- 1 paul paul 0 2007-02-07 22:34 permissions.txt
		</screen>
	</section>
	<section><title>umask</title>
		<para>When creating a file or directory, a set of default permissions are applied. These default permissions are determined by the <command>umask</command><indexterm><primary>umask(1)</primary></indexterm>. The umask specifies permissions that you do not want set by default. You can display the umask with the umask command.</para>
		<screen>
[Harry@RHEL4b ~]$ umask
0002
[Harry@RHEL4b ~]$ touch test
[Harry@RHEL4b ~]$ ls -l test
-rw-rw-r--  1 Harry Harry 0 Jul 24 06:03 test
[Harry@RHEL4b ~]$
		</screen>
		<para>As you can see, the file is also not executable by default. This is a general security feature among Unixes, newly created files are never executable by default. You have to explicitely do a <command>chmod +x</command><indexterm><primary>chmod +x</primary></indexterm> to make a file executable. This also means that the 1 bit in the umask has no meaning, a umask of 0022 is the same as 0033.</para>
	</section>
<section><title>Practice: File Permissions</title>
	<para>1. As normal user, create a directory ~/permissions. Create a file owned by yourself in there.</para>
	<para>2. Copy a file owned by root from /etc/ to your permissions dir, who owns this file now ?</para>
	<para>3. As root, create a file in the users ~/permissions directory.</para>
	<para>4. As normal user, look at who owns this file created by root.</para>
	<para>5. Change the ownership of all files in ~/permissions to yourself.</para>
	<para>6. Make sure you have all rights to these files, and others can only read.</para>
	<para>7. With chmod, is 770 the same as rwxrwx--- ?</para>
	<para>8. With chmod, is 664 the same as r-xr-xr-- ?</para>
	<para>9. With chmod, is 400 the same as r-------- ?</para>
	<para>10. With chmod, is 734 the same as rwxr-xr-- ?</para>
	<para>11a. Display the umask in octal and in symbolic form.</para>
	<para>11b. Set the umask to 077, but use the symbolic format to set it. Verify that this works.</para>
	<para>12. Create a file as root, give only read to others. Can a normal user read this file ? Test writing to this file with vi.</para>
	<para>13a. Create a file as normal user, give only read to others. Can another normal user read this file ? Test writing to this file with vi.</para>
	<para>13b. Can root read this file ? Can root write to this file with vi ?</para>
	<para>14. Create a directory that belongs to a group, where every member of that group can read and write to files, and create files. Make sure that people can only delete their own files.</para>
	<para></para>
	<para></para>	
</section>
<section><title>The sticky bit</title>
	<para>You can set the <command>sticky bit</command><indexterm><primary>sticky bit</primary></indexterm> on a directory to prevent users from removing files that they do not own as a user owner. The sticky bit is displayed at the same location as the x permission for others. The sticky bit is represented by a <command>t</command> (meaning x is also there) or a <command>T</command> (when there is no x for others).</para>
	<screen>
root@RHELv4u4:~# mkdir /project55
root@RHELv4u4:~# ls -ld /project55
drwxr-xr-x  2 root root 4096 Feb  7 17:38 /project55
root@RHELv4u4:~# chmod +t /project55/
root@RHELv4u4:~# ls -ld /project55
drwxr-xr-t  2 root root 4096 Feb  7 17:38 /project55
root@RHELv4u4:~# 
	</screen>
	<para>The sticky bit can also be set with octal permissions, it is binary 1 in the first of four triplets.</para>
	<screen>
root@RHELv4u4:~# chmod 1775 /project55/
root@RHELv4u4:~# ls -ld /project55
drwxrwxr-t  2 root root 4096 Feb  7 17:38 /project55
root@RHELv4u4:~# 
	</screen>
</section>	
<section><title>SetGID and SetUID</title>
<section><title>SetGID on directories</title>
	<para>The <command>SetGID</command><indexterm><primary>SetGID</primary></indexterm> can be used on directories to make sure that all files inside the directory are group owned by the group owner of the directory. The SetGID bit is displayed at the same location as the x permission for group owner. The SetGID bit is represented by an <command>s</command> (meaning x is also there) or a <command>S</command> (when there is no x for the group owner). Like this example shows, even though root does not belong to the group proj55, the files created by root in /project55 will belong to proj55 when the SetGID is set.</para>
	<screen>
root@RHELv4u4:~# groupadd proj55
root@RHELv4u4:~# chown root:proj55 /project55/
root@RHELv4u4:~# chmod 3775 /project55/
root@RHELv4u4:~# touch /project55/fromroot.txt
root@RHELv4u4:~# ls -ld /project55/
drwxrwsr-t  2 root proj55 4096 Feb  7 17:45 /project55/
root@RHELv4u4:~# ls -l /project55/
total 4
-rw-r--r--  1 root proj55 0 Feb  7 17:45 fromroot.txt
root@RHELv4u4:~# 
	</screen>
</section>
<section><title>SetGID and SetUID on regular files</title>
	<para>These two permissions make for the executable file to be executed with the permissions of the file owner(s) instead of the executing owner. This means that if any user starts a program that belongs to the root user, and the <command>setuid</command><indexterm><primary>setuid</primary></indexterm> bit is set on that program, then the program runs as root. Can be dangerous, but sometimes this is good for security.</para>
	<para>Take the example of passwords, they are stored in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm> which is only readable by root. (The root user never needs permissions anyway.)</para>
	<screen>
root@RHELv4u4:~# ls -l /etc/shadow
-r--------  1 root root 1260 Jan 21 07:49 /etc/shadow
	</screen>
	<para>Changing your password requires an update of this file, so how can normal non-root users do this ? Let's take a look at the permissions on the <command>/usr/bin/passwd</command><indexterm><primary>/usr/bin/passwd</primary></indexterm>.</para>
	<screen>
root@RHELv4u4:~# ls -l /usr/bin/passwd 
-r-s--x--x  1 root root 21200 Jun 17  2005 /usr/bin/passwd
	</screen>
	<para>So essentially, when starting the <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm> program, you are running that program with root credentials.</para>
	<para>You can use the <command>find</command><indexterm><primary>find(1)</primary></indexterm> command to find all <command>setuid</command><indexterm><primary>setuid</primary></indexterm>setuid programs.</para>
	<screen>
paul@laika:~$ find /usr/bin -type f -perm -04000
/usr/bin/arping
/usr/bin/kgrantpty
/usr/bin/newgrp
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/fping6
/usr/bin/passwd
/usr/bin/gpasswd
...
	</screen>
</section>
</section>
<section><title>Practice: Advanced File Permissions</title>
	<para>1. Set up a directory, owned by the group sports.</para>
	<para>2. Members of the sports group should be able to create files in this directory.</para>
	<para>3. All files created in this directory should be group-owned by the sports group.</para>
	<para>4. Users should be able to delete only their own user-owned files.</para>
	<para>5. Test that this works!</para>
	<para>6. If time permits (or if you are waiting for other students to finish this practice), read about file attributes in the man page of chattr and lsattr. Try setting the i attribute on a file and test that it works.</para>
	<para></para>
	<para></para>	
</section>
</chapter>
