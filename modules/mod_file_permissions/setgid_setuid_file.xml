<section><title>SetGID and SetUID</title>
<section><title>SetGID on directories</title>
	<para>The <command>SetGID</command><indexterm><primary>SetGID</primary></indexterm> can be used on directories to make sure that all files inside the directory are group owned by the group owner of the directory. The SetGID bit is displayed at the same location as the x permission for group owner. The SetGID bit is represented by an <command>s</command> (meaning x is also there) or a <command>S</command> (when there is no x for the group owner). Like this example shows, even though root does not belong to the group proj55, the files created by root in /project55 will belong to proj55 when the SetGID is set.</para>
	<screen>
root@RHELv4u4:~# groupadd proj55
root@RHELv4u4:~# chown root:proj55 /project55/
root@RHELv4u4:~# chmod 3775 /project55/
root@RHELv4u4:~# touch /project55/fromroot.txt
root@RHELv4u4:~# ls -ld /project55/
drwxrwsr-t  2 root proj55 4096 Feb  7 17:45 /project55/
root@RHELv4u4:~# ls -l /project55/
total 4
-rw-r--r--  1 root proj55 0 Feb  7 17:45 fromroot.txt
root@RHELv4u4:~# 
	</screen>
</section>
<section><title>SetGID and SetUID on regular files</title>
	<para>These two permissions make for the executable file to be executed with the permissions of the file owner(s) instead of the executing owner. This means that if any user starts a program that belongs to the root user, and the <command>setuid</command><indexterm><primary>setuid</primary></indexterm> bit is set on that program, then the program runs as root. Can be dangerous, but sometimes this is good for security.</para>
	<para>Take the example of passwords, they are stored in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm> which is only readable by root. (The root user never needs permissions anyway.)</para>
	<screen>
root@RHELv4u4:~# ls -l /etc/shadow
-r--------  1 root root 1260 Jan 21 07:49 /etc/shadow
	</screen>
	<para>Changing your password requires an update of this file, so how can normal non-root users do this ? Let's take a look at the permissions on the <command>/usr/bin/passwd</command><indexterm><primary>/usr/bin/passwd</primary></indexterm>.</para>
	<screen>
root@RHELv4u4:~# ls -l /usr/bin/passwd 
-r-s--x--x  1 root root 21200 Jun 17  2005 /usr/bin/passwd
	</screen>
	<para>So essentially, when starting the <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm> program, you are running that program with root credentials.</para>
	<para>You can use the <command>find</command><indexterm><primary>find(1)</primary></indexterm> command to find all <command>setuid</command><indexterm><primary>setuid</primary></indexterm>setuid programs.</para>
	<screen>
paul@laika:~$ find /usr/bin -type f -perm -04000
/usr/bin/arping
/usr/bin/kgrantpty
/usr/bin/newgrp
/usr/bin/chfn
/usr/bin/sudo
/usr/bin/fping6
/usr/bin/passwd
/usr/bin/gpasswd
...
	</screen>
</section>
</section>
