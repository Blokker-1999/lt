<chapter><title>Introduction to Users</title>
<section><title>About Users</title>
	<para>In general, if you are a novice linux user and you need to manage users and groups on your home system, then use the graphical tool that is provided by your linux distro. This will make sure that you do not run into problems. Server administrators will use command line tools like useradd, userdel, groupadd and so on, whereas really advanced administrators will use vi (or vipw) to edit the proper files directly. Do not attempt the latter as a novice on production systems.</para>
</section>
<section><title>/etc/passwd</title>
	<para>All users on a linux system are listed in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm>. </para>
	<screen>
[paul@RHEL4b ~]$ tail /etc/passwd
paul:x:500:500:Paul Cobbaut:/home/paul:/bin/bash
Jef:x:501:501::/home/Jef:/bin/bash
Martina:x:505:505:Martina Hingis:/home/Martina:/bin/bash
Venus:x:507:511:Venus Williams:/home/Venus:/bin/bash
Serena:x:508:512:Serena Williams:/home/Serena:/bin/bash
Kim:x:509:513:Kim Clijsters:/home/Kim:/bin/bash
Figo:x:510:514::/home/Figo:/bin/bash
Pfaff:x:511:515::/home/Pfaff:/bin/bash
Harry:x:516:520:Potter Harry:/home/Harry:/bin/bash
Hermione:x:517:521:Hermione Granger:/home/Hermione:/bin/bash
[paul@RHEL4b ~]$ 
	</screen>
</section>
<section><title>useradd</title>	
	<para>You can add users with the <command>useradd</command><indexterm><primary>useradd</primary></indexterm> command as shown in this example. </para>
	<screen>
[root@RHEL4b ~]# useradd -m Harry
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520::/home/Harry:/bin/bash
[root@RHEL4b ~]# ls -ld /home/Harry/
drwx------  4 Harry Harry 4096 Jul 23 12:35 /home/Harry/
[root@RHEL4b ~]# 
	</screen>
	<para>The user named Harry has userid 516 and <command>primary group</command><indexterm><primary>primary group</primary></indexterm> id 520. He does not have a description, his home directory is /home/Harry and it is created by default (because of the -m option). His default shell is /bin/bash. You can see the default options with <command>useradd -D</command><indexterm><primary>useradd -D</primary></indexterm>.</para>
	<screen>
[root@RHEL4b ~]# useradd -D
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
[root@RHEL4b ~]#
	</screen>
	<para>You can also explicitly supply these options with the useradd command.First we will delete the user Harry with <command>userdel</command><indexterm><primary>userdel</primary></indexterm>, then recreate him with proper options. The -r option of userdel will also remove the home directory. Harry's password will be set later with the passwd command.</para>
	<screen>
[root@RHEL4b ~]# userdel -r Harry
[root@RHEL4b ~]# useradd -m -s /bin/bash -c 'Harry Potter' Harry
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520:Harry Potter:/home/Harry:/bin/bash
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>usermod</title>
	<para>You can modify a user with the <command>usermod</command><indexterm><primary>usermod</primary></indexterm> command.</para>
	<screen>
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520:Harry Potter:/home/Harry:/bin/bash
[root@RHEL4b ~]# usermod -c 'Potter Harry' Harry
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520:Potter Harry:/home/Harry:/bin/bash
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>Passwords</title>
	<section><title>passwd</title>
		<para>Passwords of users can be set with the <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command. Users will have to provide their old password before entering the new one twice.</para>
		<screen>
[Harry@RHEL4b ~]$ passwd
Changing password for user Harry.
Changing password for Harry
(current) UNIX password: 
New UNIX password: 
BAD PASSWORD: it's WAY too short
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[Harry@RHEL4b ~]$ 
		</screen>
		<para>As you can see, the passwd tool will do some basic verification to prevent users from using too simple passwords. The root user does not have to follow these rules (there will be a warning though). The root user also does not need to provide the old password before entering the new password twice.</para>
	</section>
	<section><title>/etc/shadow</title>
	<para>User passwords are encrypted and kept in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm>. The /etc/shadow file is read only, and can only be read by root. We will see in the file permissions section how it is possible for users to change their password. For now, you will have to know that users can change their password with the <command>/usr/bin/passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command.</para>
	</section>
	<section><title>usermod</title>
		<para>You can also lock (or suspend) and unlock a user account with usermod. The first line in the next screenshot will disable the user Harry by adding a ! in front of his password, making it impossible for Harry to authenticate. The root user (and users with sudo rights on su) will still be able to su to Harry (because the password is not needed here). You can unlock the account again with <command>usermod -U</command><indexterm><primary>usermod -U</primary></indexterm>.</para>
		<screen>
[root@RHEL4b ~]# usermod -L Harry
[root@RHEL4b ~]# tail -1 /etc/shadow
Harry:!$1$143TO9IZ$RLm/FpQkpDrV4/Tkhku5e1:13717:0:99999:7:::
[root@RHEL4b ~]# su - Harry
[Harry@RHEL4b ~]$
		</screen>
		<para>Watch out for tiny differences in the command line options of usermod and useradd depending on the distribution!</para>
	</section>
	<section><title>password encryption</title>
		<section><title>encryption with passwd</title>
			<para>Passwords are stored in an encrypted format. This encryption is done by the <command>crypt</command><indexterm><primary>crypt</primary></indexterm> function. The easiest (and recommended) way to add a user with a password to the system is to add the user with the <command>useradd -m user</command><indexterm><primary>useradd -m</primary></indexterm> command, and then set the user's password with <command>passwd user</command><indexterm><primary>passwd(1)</primary></indexterm>.</para>
			<screen>
[root@RHEL4b ~]# useradd -m xavier
[root@RHEL4b ~]# passwd xavier
Changing password for user xavier.
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[root@RHEL4b ~]#
			</screen>
		</section>
		<section><title>encryption with openssl</title>
			<para>Another way to create users with a password is to use the -p option of useradd, but that option requires an encrypted password. You can generate this encrypted password with the <command>openssl passwd</command><indexterm><primary>openssl passwd</primary></indexterm> command.</para>
			<screen>
[root@RHEL4b ~]# openssl passwd stargate
ZZNX16QZVgUQg
[root@RHEL4b ~]# useradd -m -p ZZNX16QZVgUQg mohamed 
[root@RHEL4b ~]# 
			</screen>
		</section>
		<section><title>encryption with crypt</title>
			<para>A third option is to create your own c program using the crypt function, and compile this into a command.</para>
			<screen>
[root@RHEL4b ~]# cat MyCrypt.c 
#include &#060;stdio.h&#062;
#include &#060;unistd.h&#062;

int main(int argc, char** argv)
{
  printf("%s\n", crypt(argv[1], "01"));
  return 0;
}

[root@RHEL4b ~]# g++ MyCrypt.c -o MyCrypt -lcrypt
[root@RHEL4b ~]# ./MyCrypt stargate
01Y.yPnlQ6R.Y
			</screen>
		</section>
	</section>
</section>
<section><title>who and whoami</title>
	<para>The <command>who</command><indexterm><primary>who</primary></indexterm> command will give you information about who is logged on to the system. With <command>who am i</command><indexterm><primary>who am i</primary></indexterm> you can see which of the who list is yourself. The <command>whoami</command><indexterm><primary>whoami</primary></indexterm> command exists to tell you your username.</para>
	<screen>
[paul@RHEL4b ~]$ whoami
paul
[paul@RHEL4b ~]$ who am i
paul     pts/0        Jul 24 05:02 (laika)
[paul@RHEL4b ~]$ who
paul     pts/0        Jul 24 05:02 (laika)
Harry    pts/1        Jul 24 05:04 (laika)
[paul@RHEL4b ~]$
	</screen>
</section>
<section><title>/etc/login.defs</title>
	<para>The <command>/etc/login.defs</command><indexterm><primary>/etc/login.defs</primary></indexterm> file contains some default settings for users. You will find password aging and length settings, the numerical limits of user id's and group id's and whether or not a home directory should be created by default.</para>
	<screen>
[root@RHEL4b ~]# grep -i pass /etc/login.defs 
# Password aging controls:
# PASS_MAX_DAYS  Maximum number of days a password may be used.
# PASS_MIN_DAYS  Minimum number of days allowed between password changes.
# PASS_MIN_LEN   Minimum acceptable password length.
# PASS_WARN_AGE  Number of days warning given before a password expires.
PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>chage</title>
	<para>The <command>chage</command><indexterm><primary>chage(1)</primary></indexterm> command can be used to set an expiration date for a user account (-E), set a mimimum (-m) and maximum (-M) password age, a password expiration date, and set the number of warning days before the password expiration date. A lot of this functionality is also available via the passwd command. The -l option of chage will list these settings for a user.</para>
	<screen>
[root@RHEL4b ~]# chage -l Harry
Minimum:        0
Maximum:        99999
Warning:        7
Inactive:       -1
Last Change:            Jul 23, 2007
Password Expires:       Never
Password Inactive:      Never
Account Expires:        Never
[root@RHEL4b ~]#
	</screen>
</section>
<section><title>chsh</title>
	<para>Users can change their own login shell with the <command>chsh</command><indexterm><primary>chsh(1)</primary></indexterm> command. Harry here is first obtaining a list of available shells ( the user could have done a cat <command>/etc/shells</command><indexterm><primary>/etc/shells</primary></indexterm> ) and then changes his login shell to the <command>Korn shell</command><indexterm><primary>Korn Shell</primary></indexterm> (/bin/ksh). At the next login, Harry will default into ksh instead of bash. </para>
	<screen>
[Harry@RHEL4b ~]$ chsh -l
/bin/sh
/bin/bash
/sbin/nologin
/bin/ash
/bin/bsh
/bin/ksh
/usr/bin/ksh
/usr/bin/pdksh
/bin/tcsh
/bin/csh
/bin/zsh
[Harry@RHEL4b ~]$ chsh -s /bin/ksh
Changing shell for Harry.
Password: 
Shell changed.
[Harry@RHEL4b ~]$
	</screen>
</section>
<section><title>/etc/skel/</title>
	<para>The <command>/etc/skel/</command><indexterm><primary>/etc/skel</primary></indexterm> directory is copied to a newly created user's home directory. The /etc/skel/ directory contains some (usually hidden) files that contain profile settings and default values for applications. In this way /etc/skel/ serves as a default home directory and as a default user profile.</para>
</section>
<section><title>vipw</title>
	<para>If after knowing all these commands for user and group management you still want to edit the /etc/passwd, /etc/group, /etc/shadow and /etc/gshadow manually, then use <command>vipw</command><indexterm><primary>vipw</primary></indexterm> instead of vim directly. The vipw tool will do proper locking of the file.</para>
</section>
<section><title>About su and sudo</title>
	<para>There are two easy ways to switch to another users. With the <command>su</command> command you switch the context of the command prompt (your bash session) to another user. With <command>sudo</command> you start a program with the credentials of another user. Both su and sudo might prompt you for a password.</para>
</section>
<section><title>su</title>
	<para>The <command>su</command><indexterm><primary>su(1)</primary></indexterm> command allows a user to run a shell as another user. Running a shell as another user requires that you know the password of the other user, unless you are root. The root user can become any other user without knowing the user's password.</para>
	<screen>
[paul@RHEL4b ~]$ su Harry
Password: 
[Harry@RHEL4b paul]$ su root
Password: 
[root@RHEL4b paul]# su Serena
[Serena@RHEL4b paul]$
	</screen>
	<para>By default, the su command keeps the same shell environment. To become another user and also get the target user's environment, issue the <command>su -</command><indexterm><primary>su(1)</primary></indexterm> command followed by the target username. When no username is provided to su or su - then the command will assume root is the target.</para>
	<screen>
[paul@RHEL4b ~]$ su - Harry
Password: 
[Harry@RHEL4b ~]$ su -
Password: 
[root@RHEL4b ~]#
	</screen>
</section>
<section><title>sudo</title>
	<section><title>About sudo</title>
	</section>
	<section><title>/usr/bin/sudo</title>
		<para>The sudo binary has the setuid bit set, so any user can run it with effective userid set as root.</para>
		<screen>
paul@laika:~$ ls -l `which sudo`
-rwsr-xr-x 2 root root 107872 2008-05-15 02:41 /usr/bin/sudo
paul@laika:~$ 
		</screen>
	</section>
</section>
<section><title>sudo</title>
	<para>On linux systems like Ubuntu, the root user does not have a password set. This means that it is not possible to logon as root (extra security). To perform tasks as root, users can be given <command>sudo rights</command><indexterm><primary>sudo(1)</primary></indexterm> via the <command>/etc/sudoers</command><indexterm><primary>/etc/sudoers</primary></indexterm> file to run a command as another user. On Ubuntu the first user created will get sudo rights to run the su command as root. The end result of this is that the user can type <command>sudo su -</command><indexterm><primary>sudo su -</primary></indexterm> and become root without having to enter the root password. The sudo command does require you to enter your own password. Thus the password prompt in the screenshot below is for sudo, not for su. Check the man page of <command>visudo</command><indexterm><primary>visudo(1)</primary></indexterm> before playing with the /etc/sudoers file.</para>
	<screen>
paul@laika:~$ sudo su -
Password:
root@laika:~#
	</screen>
</section>
	<section><title>Practice Users</title>
		<para>1. Create the users Serena Williams, Venus Williams and Justine Henin. all of them with password set to stargate, with username as their first name, and their full name in the comment. Verify that the users and their home directory are properly created.</para>
		<para>2. Create a user called kornuser, give him the Korn shell (/bin/ksh) as his default shell. Log on with this user (on a command line or in a tty).</para>
		<para>3. Create a user named Einstime without home directory, give him /bin/date as his default logon shell. What happens when you log on with this user ? Can you think of a useful real world example for changing a user's login shell to an application ?</para>
		<para>4. Try the commands who, whoami, who am i, w, id, echo $USER $UID .</para>
		<para>5a. Lock the Venus user account with usermod.</para>
		<para>5b. Use passwd -d to disable the Serena password.</para>
		<para>5c. What is the difference between locking a user account and disabling a user account's password ?</para>
		<para>6. As root change the password of Einstime to stargate.</para>
		<para>7. Now try changing the password of Serena to Serena as Serena.</para>
		<para>8. Make sure every new user needs to change his password every 10 days.</para>
		<para>9. Set the warning number of days to four for the kornuser.</para>
		<para>10a. Set the password of two seperate users to stargate. Look at the encrypted stargate's in /etc/shadow and explain.</para>
		<para>10b. Take a backup as root of /etc/shadow. Use vi to copy an encrypted stargate to another user. Can this other user now log on with stargate as a password ?</para>
		<para>11. Put a file in the skeleton directory and check whether it is copied to user's home directory. When is the skeleton directory copied ?</para>
		<para>12. Why use vipw instead of vi ? What could be the problem when using vi or vim ?</para>
		<para>13. Use chsh to list all shells, and compare to cat /etc/shells. Change your login shell to the Korn shell, log out and back in. Now change back to bash.</para>
		<para>14. Which useradd option allows you to name a home directory ?</para>
	</section>
</chapter>
