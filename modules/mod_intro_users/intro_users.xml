<section><title>/etc/passwd</title>
	<para>All users on a linux system are listed in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm>. </para>
	<screen>
[paul@RHEL4b ~]$ tail /etc/passwd
paul:x:500:500:Paul Cobbaut:/home/paul:/bin/bash
Jef:x:501:501::/home/Jef:/bin/bash
Martina:x:505:505:Martina Hingis:/home/Martina:/bin/bash
Venus:x:507:511:Venus Williams:/home/Venus:/bin/bash
Serena:x:508:512:Serena Williams:/home/Serena:/bin/bash
Kim:x:509:513:Kim Clijsters:/home/Kim:/bin/bash
Figo:x:510:514::/home/Figo:/bin/bash
Pfaff:x:511:515::/home/Pfaff:/bin/bash
Harry:x:516:520:Potter Harry:/home/Harry:/bin/bash
Hermione:x:517:521:Hermione Granger:/home/Hermione:/bin/bash
[paul@RHEL4b ~]$ 
	</screen>
</section>
<section><title>useradd</title>	
	<para>You can add users with the <command>useradd</command><indexterm><primary>useradd</primary></indexterm> command as shown in this example. </para>
	<screen>
[root@RHEL4b ~]# useradd -m Harry
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520::/home/Harry:/bin/bash
[root@RHEL4b ~]# ls -ld /home/Harry/
drwx------  4 Harry Harry 4096 Jul 23 12:35 /home/Harry/
[root@RHEL4b ~]# 
	</screen>
	<para>The user named Harry has userid 516 and <command>primary group</command><indexterm><primary>primary group</primary></indexterm> id 520. He does not have a description, his home directory is /home/Harry and it is created by default (because of the -m option). His default shell is /bin/bash. You can see the default options with <command>useradd -D</command><indexterm><primary>useradd -D</primary></indexterm>.</para>
	<screen>
[root@RHEL4b ~]# useradd -D
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
[root@RHEL4b ~]#
	</screen>
	<para>You can also explicitly supply these options with the useradd command.First we will delete the user Harry with <command>userdel</command><indexterm><primary>userdel</primary></indexterm>, then recreate him with proper options. The -r option of userdel will also remove the home directory. Harry's password will be set later with the passwd command.</para>
	<screen>
[root@RHEL4b ~]# userdel -r Harry
[root@RHEL4b ~]# useradd -m -s /bin/bash -c 'Harry Potter' Harry
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520:Harry Potter:/home/Harry:/bin/bash
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>usermod</title>
	<para>You can modify a user with the <command>usermod</command><indexterm><primary>usermod</primary></indexterm> command.</para>
	<screen>
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520:Harry Potter:/home/Harry:/bin/bash
[root@RHEL4b ~]# usermod -c 'Potter Harry' Harry
[root@RHEL4b ~]# tail -1 /etc/passwd
Harry:x:516:520:Potter Harry:/home/Harry:/bin/bash
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>Passwords</title>
	<section><title>passwd</title>
		<para>Passwords of users can be set with the <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command. Users will have to provide their old password before entering the new one twice.</para>
		<screen>
[Harry@RHEL4b ~]$ passwd
Changing password for user Harry.
Changing password for Harry
(current) UNIX password: 
New UNIX password: 
BAD PASSWORD: it's WAY too short
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[Harry@RHEL4b ~]$ 
		</screen>
		<para>As you can see, the passwd tool will do some basic verification to prevent users from using too simple passwords. The root user does not have to follow these rules (there will be a warning though). The root user also does not need to provide the old password before entering the new password twice.</para>
	</section>
	<section><title>/etc/shadow</title>
	<para>User passwords are encrypted and kept in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm>. The /etc/shadow file is read only, and can only be read by root. We will see in the file permissions section how it is possible for users to change their password. For now, you will have to know that users can change their password with the <command>/usr/bin/passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command.</para>
	</section>
	<section><title>usermod</title>
		<para>You can also lock (or suspend) and unlock a user account with usermod. The first line in the next screenshot will disable the user Harry by adding a ! in front of his password, making it impossible for Harry to authenticate. The root user (and users with sudo rights on su) will still be able to su to Harry (because the password is not needed here). You can unlock the account again with <command>usermod -U</command><indexterm><primary>usermod -U</primary></indexterm>.</para>
		<screen>
[root@RHEL4b ~]# usermod -L Harry
[root@RHEL4b ~]# tail -1 /etc/shadow
Harry:!$1$143TO9IZ$RLm/FpQkpDrV4/Tkhku5e1:13717:0:99999:7:::
[root@RHEL4b ~]# su - Harry
[Harry@RHEL4b ~]$
		</screen>
		<para>Watch out for tiny differences in the command line options of usermod and useradd depending on the distribution!</para>
	</section>
	<section><title>password encryption</title>
		<section><title>encryption with passwd</title>
			<para>Passwords are stored in an encrypted format. This encryption is done by the <command>crypt</command><indexterm><primary>crypt</primary></indexterm> function. The easiest (and recommended) way to add a user with a password to the system is to add the user with the <command>useradd -m user</command><indexterm><primary>useradd -m</primary></indexterm> command, and then set the user's password with <command>passwd user</command><indexterm><primary>passwd(1)</primary></indexterm>.</para>
			<screen>
[root@RHEL4b ~]# useradd -m xavier
[root@RHEL4b ~]# passwd xavier
Changing password for user xavier.
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[root@RHEL4b ~]#
			</screen>
		</section>
		<section><title>encryption with openssl</title>
			<para>Another way to create users with a password is to use the -p option of useradd, but that option requires an encrypted password. You can generate this encrypted password with the <command>openssl passwd</command><indexterm><primary>openssl passwd</primary></indexterm> command.</para>
			<screen>
[root@RHEL4b ~]# openssl passwd stargate
ZZNX16QZVgUQg
[root@RHEL4b ~]# useradd -m -p ZZNX16QZVgUQg mohamed 
[root@RHEL4b ~]# 
			</screen>
		</section>
		<section><title>encryption with crypt</title>
			<para>A third option is to create your own c program using the crypt function, and compile this into a command.</para>
			<screen>
[root@RHEL4b ~]# cat MyCrypt.c 
#include &#060;stdio.h&#062;
#include &#060;unistd.h&#062;

int main(int argc, char** argv)
{
  printf("%s\n", crypt(argv[1], "01"));
  return 0;
}

[root@RHEL4b ~]# g++ MyCrypt.c -o MyCrypt -lcrypt
[root@RHEL4b ~]# ./MyCrypt stargate
01Y.yPnlQ6R.Y
			</screen>
		</section>
	</section>
</section>
<section><title>who and whoami</title>
	<para>The <command>who</command><indexterm><primary>who</primary></indexterm> command will give you information about who is logged on to the system. With <command>who am i</command><indexterm><primary>who am i</primary></indexterm> you can see which of the who list is yourself. The <command>whoami</command><indexterm><primary>whoami</primary></indexterm> command exists to tell you your username.</para>
	<screen>
[paul@RHEL4b ~]$ whoami
paul
[paul@RHEL4b ~]$ who am i
paul     pts/0        Jul 24 05:02 (laika)
[paul@RHEL4b ~]$ who
paul     pts/0        Jul 24 05:02 (laika)
Harry    pts/1        Jul 24 05:04 (laika)
[paul@RHEL4b ~]$
	</screen>
</section>
<section><title>/etc/login.defs</title>
	<para>The <command>/etc/login.defs</command><indexterm><primary>/etc/login.defs</primary></indexterm> file contains some default settings for users. You will find password aging and length settings, the numerical limits of user id's and group id's and whether or not a home directory should be created by default.</para>
	<screen>
[root@RHEL4b ~]# grep -i pass /etc/login.defs 
# Password aging controls:
# PASS_MAX_DAYS  Maximum number of days a password may be used.
# PASS_MIN_DAYS  Minimum number of days allowed between password changes.
# PASS_MIN_LEN   Minimum acceptable password length.
# PASS_WARN_AGE  Number of days warning given before a password expires.
PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>chage</title>
	<para>The <command>chage</command><indexterm><primary>chage(1)</primary></indexterm> command can be used to set an expiration date for a user account (-E), set a mimimum (-m) and maximum (-M) password age, a password expiration date, and set the number of warning days before the password expiration date. A lot of this functionality is also available via the passwd command. The -l option of chage will list these settings for a user.</para>
	<screen>
[root@RHEL4b ~]# chage -l Harry
Minimum:        0
Maximum:        99999
Warning:        7
Inactive:       -1
Last Change:            Jul 23, 2007
Password Expires:       Never
Password Inactive:      Never
Account Expires:        Never
[root@RHEL4b ~]#
	</screen>
</section>
<section><title>chsh</title>
	<para>Users can change their own login shell with the <command>chsh</command><indexterm><primary>chsh(1)</primary></indexterm> command. Harry here is first obtaining a list of available shells ( the user could have done a cat <command>/etc/shells</command><indexterm><primary>/etc/shells</primary></indexterm> ) and then changes his login shell to the <command>Korn shell</command><indexterm><primary>Korn Shell</primary></indexterm> (/bin/ksh). At the next login, Harry will default into ksh instead of bash. </para>
	<screen>
[Harry@RHEL4b ~]$ chsh -l
/bin/sh
/bin/bash
/sbin/nologin
/bin/ash
/bin/bsh
/bin/ksh
/usr/bin/ksh
/usr/bin/pdksh
/bin/tcsh
/bin/csh
/bin/zsh
[Harry@RHEL4b ~]$ chsh -s /bin/ksh
Changing shell for Harry.
Password: 
Shell changed.
[Harry@RHEL4b ~]$
	</screen>
</section>
<section><title>/etc/skel/</title>
	<para>The <command>/etc/skel/</command><indexterm><primary>/etc/skel</primary></indexterm> directory is copied to a newly created user's home directory. The /etc/skel/ directory contains some (usually hidden) files that contain profile settings and default values for applications. In this way /etc/skel/ serves as a default home directory and as a default user profile.</para>
</section>
<section><title>vipw</title>
	<para>If after knowing all these commands for user and group management you still want to edit the /etc/passwd, /etc/group, /etc/shadow and /etc/gshadow manually, then use <command>vipw</command><indexterm><primary>vipw</primary></indexterm> instead of vim directly. The vipw tool will do proper locking of the file.</para>
</section>
