<section><title>passwords</title>
	<section><title>passwd</title>
		<para>Passwords of users can be set with the <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command. Users will have to provide their old password before entering the new one twice.</para>
		<screen>
[harry@RHEL4 ~]$ passwd
Changing password for user harry.
Changing password for harry
(current) UNIX password: 
New UNIX password: 
BAD PASSWORD: it's WAY too short
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[harry@RHEL4 ~]$ 
		</screen>
		<para>As you can see, the passwd tool will do some basic verification to prevent users from using too simple passwords. The root user does not have to follow these rules (there will be a warning though). The root user also does not need to provide the old password before entering the new password twice.</para>
	</section>
	<section><title>/etc/shadow</title>
		<para>User passwords are encrypted and kept in <command>/etc/shadow</command><indexterm><primary>/etc/shadow</primary></indexterm>. The /etc/shadow file is read only, and can only be read by root. We will see in the file permissions section how it is possible for users to change their password. For now, you will have to know that users can change their password with the <command>/usr/bin/passwd</command><indexterm><primary>passwd(1)</primary></indexterm> command.</para>
		<screen>
[root@RHEL5 ~]# tail /etc/shadow
inge:$1$yWMSimOV$YsYvcVKqByFVYLKnU3ncd0:14054:0:99999:7:::
ann:!!:14054:0:99999:7:::
frederik:!!:14054:0:99999:7:::
steven:!!:14054:0:99999:7:::
pascale:!!:14054:0:99999:7:::
geert:!!:14054:0:99999:7:::
wim:!!:14054:0:99999:7:::
sandra:!!:14054:0:99999:7:::
annelies:!!:14054:0:99999:7:::
laura:$1$Tvby1Kpa$lL.WzgobujUS3LClIRmdv1:14054:0:99999:7:::
		</screen>
		<para>The /etc/shadow file contains nine columns, separated by a colon. The nine fields contain (from left to right) the user name, the encrypted password (note that only inge and laura have an encrypted password), the day the password was last changed (day 1 is January 1, 1970), number of days the password has to be left unchanged, password expiry day, warning number of days before password expiry, number of days after expiry before disabling the account, the day the account was disabled (since 1970 again). The last field has no meaning yet.</para>
	</section>
	<section><title>password encryption</title>
		<section><title>encryption with passwd</title>
			<para>Passwords are stored in an encrypted format. This encryption is done by the <command>crypt</command><indexterm><primary>crypt</primary></indexterm> function. The easiest (and recommended) way to add a user with a password to the system is to add the user with the <command>useradd -m user</command><indexterm><primary>useradd(1)</primary></indexterm> command, and then set the user's password with <command>passwd</command><indexterm><primary>passwd(1)</primary></indexterm>.</para>
			<screen>
[root@RHEL4 ~]# useradd -m xavier
[root@RHEL4 ~]# passwd xavier
Changing password for user xavier.
New UNIX password: 
Retype new UNIX password: 
passwd: all authentication tokens updated successfully.
[root@RHEL4 ~]#
			</screen>
		</section>
		<section><title>encryption with openssl</title>
			<para>Another way to create users with a password is to use the -p option of useradd, but that option requires an encrypted password. You can generate this encrypted password with the <command>openssl passwd</command><indexterm><primary>openssl(1)</primary></indexterm> command.</para>
			<screen>
[root@RHEL4 ~]# openssl passwd stargate
ZZNX16QZVgUQg
[root@RHEL4 ~]# useradd -m -p ZZNX16QZVgUQg mohamed 
			</screen>
		</section>
		<section><title>encryption with crypt</title>
			<para>A third option is to create your own C program using the crypt function, and compile this into a command.</para>
			<screen>
[paul@laika ~]$ cat MyCrypt.c 
#include &#060;stdio.h&#062;
#define __USE_XOPEN
#include &#060;unistd.h&#062;

int main(int argc, char** argv)
{
 if(argc==3)
   {
       printf("%s\n", crypt(argv[1],argv[2]));
   }
   else
   {
       printf("Usage: MyCrypt $password $salt\n" );
   }
  return 0;
}
			</screen>
			<para>This little program can be compiled with <command>gcc</command><indexterm><primary>gcc(1)</primary></indexterm> like this.</para>
			<screen>
[paul@laika ~]$ gcc MyCrypt.c -o MyCrypt -lcrypt
			</screen>
			<para>To use it, we need to give two parameters to MyCript. The first is the unencrypted password, the second is the salt. The salt is used to perturb the encryption algorithm in one of 4096 different ways. This variation prevents two users with the same password from having the same entry in /etc/shadow.</para>
			<screen>
paul@laika:~$ ./MyCrypt stargate 12
12L4FoTS3/k9U
paul@laika:~$ ./MyCrypt stargate 01
01Y.yPnlQ6R.Y
paul@laika:~$ ./MyCrypt stargate 33
330asFUbzgVeg
paul@laika:~$ ./MyCrypt stargate 42
42XFxoT4R75gk
			</screen>
			<para>Did you notice that the first two characters of the password are the salt ?</para>
			<para>The standard output of the crypt function is using the DES algorithm, which is old and can be cracked in minutes. A better method is to use MD5 passwords, which can be recognized by a salt starting with $1$.</para>
			<screen>
paul@laika:~$ ./MyCrypt stargate '$1$12'
$1$12$xUIQ4116Us.Q5Osc2Khbm1
paul@laika:~$ ./MyCrypt stargate '$1$01'
$1$01$yNs8brjp4b4TEw.v9/IlJ/
paul@laika:~$ ./MyCrypt stargate '$1$33'
$1$33$tLh/Ldy2wskdKAJR.Ph4M0
paul@laika:~$ ./MyCrypt stargate '$1$42'
$1$42$Hb3nvP0KwHSQ7fQmIlY7R.
			</screen>
			<para>The MD5 salt can be up to eight characters long. The salt is displayed in /etc/shadow between the second and third $, so never use the password as the salt!</para>
			<screen>
paul@laika:~$ ./MyCrypt stargate '$1$stargate'
$1$stargate$qqxoLqiSVNvGr5ybMxEVM1
			</screen>
		</section>
	</section>
	<section><title>password defaults</title>
		<section><title>/etc/login.defs</title>
			<para>The <command>/etc/login.defs</command><indexterm><primary>/etc/login.defs</primary></indexterm> file contains some default settings for user passwords like password aging and length settings. (You will also find the numerical limits of user id's and group id's and whether or not a home directory should be created by default).</para>
			<screen>
[root@RHEL4 ~]# grep -i pass /etc/login.defs 
# Password aging controls:
# PASS_MAX_DAYS  Maximum number of days a password may be used.
# PASS_MIN_DAYS  Minimum number of days allowed between password changes.
# PASS_MIN_LEN   Minimum acceptable password length.
# PASS_WARN_AGE  Number of days warning given before a password expires.
PASS_MAX_DAYS   99999
PASS_MIN_DAYS   0
PASS_MIN_LEN    5
PASS_WARN_AGE   7
			</screen>
		</section>
		<section><title>chage</title>
			<para>The <command>chage</command><indexterm><primary>chage(1)</primary></indexterm> command can be used to set an expiration date for a user account (-E), set a mimimum (-m) and maximum (-M) password age, a password expiration date, and set the number of warning days before the password expiration date. A lot of this functionality is also available via the passwd command. The -l option of chage will list these settings for a user.</para>
			<screen>
[root@RHEL4 ~]# chage -l harry
Minimum:        0
Maximum:        99999
Warning:        7
Inactive:       -1
Last Change:            Jul 23, 2007
Password Expires:       Never
Password Inactive:      Never
Account Expires:        Never
[root@RHEL4 ~]#
			</screen>
		</section>
	</section>
	<section><title>disabling a password</title>
		<para>Passwords in /etc/shadow cannot begin with an exclamation mark. When the second field in /etc/passwd starts with an exclamation mark, then the password can not be used.</para>
		<para>Using this feature is often called <command>locking</command>, <command>disabling</command> or <command>suspending</command> a user account. Besides vi (or vipw) you can also accomplish this with <command>usermod</command><indexterm><primary>usermod(1)</primary></indexterm>.</para>
		<para>The first line in the next screenshot will disable the password of user harry, making it impossible for harry to authenticate using this password.</para>
		<screen>
[root@RHEL4 ~]# usermod -L harry
[root@RHEL4 ~]# tail -1 /etc/shadow
harry:!$1$143TO9IZ$RLm/FpQkpDrV4/Tkhku5e1:13717:0:99999:7:::
		</screen>
		<para>The root user (and users with sudo rights on su) will still be able to su to harry (because the password is not needed here). Note also that harry will still be able to login if he set up passwordless ssh!</para>
		<screen>
[root@RHEL4 ~]# su - harry
[harry@RHEL4 ~]$
		</screen>
		<para>You can unlock the account again with <command>usermod -U</command><indexterm><primary>usermod(1)</primary></indexterm>.</para>
		<para>Watch out for tiny differences in the command line options of passwd, usermod and useradd on different distributions! Verify the local files when using features like 'disabling', 'suspending' or 'locking' users and passwords!</para>
	</section>
	<section><title>editing local files</title>
	        <para>If after knowing all these commands for password management you still want to edit the /etc/passwd or /etc/shadow manually, then use <command>vipw</command><indexterm><primary>vipw(1)</primary></indexterm> instead of vi(m) directly. The vipw tool will do proper locking of the file.</para>
	        <screen>
[root@RHEL5 ~]# vipw /etc/passwd
vipw: the password file is busy (/etc/ptmp present)
	        </screen>
	</section>
</section>
