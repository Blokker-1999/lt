<?hard-pagebreak?>
<section><title>about ssh</title>
	<section><title>secure shell</title>
	<para>Avoid using <command>telnet</command><indexterm><primary>telnet</primary></indexterm>, <command>rlogin</command><indexterm><primary>rlogin</primary></indexterm> and <command>rsh</command><indexterm><primary>rsh</primary></indexterm> to remotely connect to your servers. These older protocols do not encrypt the login session, which means your user id and password can be sniffed by tools like <command>wireshark</command><indexterm><primary>wireshark</primary></indexterm> or <command>tcpdump</command>. To securely connect to your servers, use <command>ssh</command><indexterm><primary>openssh</primary></indexterm>.</para>
	<para>The <command>ssh protocol</command> is secure in two ways. Firstly the connection is <command>encrypted</command> and secondly the connection is <command>authenticated</command> both ways.</para>
	<para>An ssh connection always starts with a cryptographic handshake, followed by <command>encryption</command> of the transport layer using a symmetric cypher. In other words, the tunnel is encrypted before you start typing anything.</para>
	<para>Then <command>authentication</command> takes place (using user id/password or public/private keys) and communication can begin over the encrypted connection.</para>
	<para>The <command>openssh</command> package is maintained by the <command>OpenBSD</command><indexterm><primary>OpenBSD</primary></indexterm> people and is distributed with a lot of operating systems (it may even be the most popular package in the world).</para>
	</section>
	<section><title>/etc/ssh/</title>
	<para>Configuration of <command>ssh</command><indexterm><primary>ssh</primary></indexterm> client and server is done in the <command>/etc/ssh</command><indexterm><primary>/etc/ssh</primary></indexterm> directory. In the next sections we will discuss most of the files found in <command>/etc/ssh/</command>.</para>
	</section>
	<section><title>ssh protocol versions</title>
	<para>The <command>ssh</command> protocol has two versions (1 and 2). Avoid using version 1 anywhere, since it contains some known vulnerabilities. You can control the protocol version via <command>/etc/ssh/ssh_config</command><indexterm><primary>/etc/ssh/ssh_config</primary></indexterm> for the client side and <command>/etc/ssh/sshd_config</command><indexterm><primary>/etc/ssh/sshd_config</primary></indexterm> for the openssh-server daemon.</para>
	<screen>paul@ubu1204:/etc/ssh$ grep Protocol ssh_config 
#   Protocol 2,1
paul@ubu1204:/etc/ssh$ grep Protocol sshd_config 
Protocol 2</screen>
	</section>
	<section><title>public and private keys</title>
	<para>The <command>ssh</command> protocol uses the well known system of <command>public and private keys</command><indexterm><primary>public key</primary></indexterm>. The below explanation is succinct, more information can be found on wikipedia.</para>
<screen>http://en.wikipedia.org/wiki/Public-key_cryptography</screen>
	<para>Imagine Alice and Bob<indexterm><primary>Alica and Bob</primary></indexterm>, two people that like to communicate with each other. Using <command>public and private keys</command> they can communicate with <command>encryption</command> and with <command>authentication</command>.</para>
	<para>When Alice wants to send an encrypted message to Bob, she uses the <command>public key</command> of Bob. Bob shares his <command>public key</command> with Alice, but keeps his <command>private key</command><indexterm><primary>private key</primary></indexterm> private! Since Bob is the only one to have Bob's <command>private key</command>, Alice is sure that Bob is the only one that can read the encrypted message.</para>
	<para>When Bob wants to verify that the message came from Alice, Bob uses the <command>public key</command> of Alice to verify that Alice signed the message with her <command>private key</command>. Since Alice is the only one to have Alice's <command>private key</command>, Bob is sure the message came from Alice.</para>
	</section>
	<section><title>rsa and dsa algorithms</title>
	<para>This chapter does not explain the technical implementation of cryptographic algorithms, it only explains how to use the ssh tools with <command>rsa</command><indexterm><primary>rsa</primary></indexterm> and <command>dsa</command><indexterm><primary>dsa</primary></indexterm>. More information about these algorithms can be found here:</para>
	<screen>http://en.wikipedia.org/wiki/RSA_(algorithm)
http://en.wikipedia.org/wiki/Digital_Signature_Algorithm</screen>
	</section>
</section>
<section><title>log on to a remote server</title>
	<para>The following screenshot shows how to use <command>ssh</command> to log on to a remote computer running Linux. The local user is named <command>paul</command> and he is logging on as user <command>admin42</command> on the remote system.</para>
<screen>paul@ubu1204:~$ ssh admin42@192.168.1.30
The authenticity of host '192.168.1.30 (192.168.1.30)' can't be established.
RSA key fingerprint is b5:fb:3c:53:50:b4:ab:81:f3:cd:2e:bb:ba:44:d3:75.
Are you sure you want to continue connecting (yes/no)?</screen>
	<para>As you can see, the user <command>paul</command> is presented with an <command>rsa</command> authentication fingerprint from the remote system. The user can accepts this bu typing <command>yes</command>. We will see later that an entry will be added to the <command>~/.ssh/known_hosts</command> file.</para>
	<screen>paul@ubu1204:~$ ssh admin42@192.168.1.30
The authenticity of host '192.168.1.30 (192.168.1.30)' can't be established.
RSA key fingerprint is b5:fb:3c:53:50:b4:ab:81:f3:cd:2e:bb:ba:44:d3:75.
Are you sure you want to continue connecting (yes/no)? <command>yes</command>
Warning: Permanently added '192.168.1.30' (RSA) to the list of known hosts.
admin42@192.168.1.30's password: 
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-26-generic-pae i686)

 * Documentation:  https://help.ubuntu.com/

1 package can be updated.
0 updates are security updates.

Last login: Wed Jun  6 19:25:57 2012 from 172.28.0.131
admin42@ubuserver:~$</screen>
	<para>The user can get log out of the remote server by typing <command>exit</command> or by using <command>Ctrl-d</command>.</para>
<screen>admin42@ubuserver:~$ exit
logout
Connection to 192.168.1.30 closed.
paul@ubu1204:~$</screen>
</section>
<section><title>executing a command in remote</title>
	<para>This screenshot shows how to execute the <command>pwd</command> on the remote server. There is no need to <command>exit</command> the server manually.</para>
	<screen>paul@ubu1204:~$ ssh admin42@192.168.1.30 pwd
admin42@192.168.1.30's password: 
/home/admin42
paul@ubu1204:~$</screen>
</section>
<section><title>scp</title>
	<para>The <command>scp</command> command works just like <command>cp</command>, but allows the source and destination of the copy to be behind <command>ssh</command>. Here is an example where we copy /etc/hosts from the remote server to the home directory of user paul.</para>
	<screen>paul@ubu1204:~$ scp admin42@192.168.1.30:/etc/hosts /home/paul/server_hosts
admin42@192.168.1.30's password: 
hosts                                        100%  809     0.8KB/s   00:00</screen>
</section>





<section><title>setting up passwordless ssh</title>
	<para>To set up passwordless ssh authentication through public/private keys, use <command>ssh-keygen</command> to generate a key pair without a passphrase, and then copy your public key to the destination server. Let's do this step by step.</para>
	<para>In the example that follows, we will set up ssh without password between Alice and Bob. Alice has an account on a Red Hat Enterprise Linux server, Bob is using Ubuntu on his laptop. Bob wants to give Alice access using ssh and the public and private key system. This means that even if Bob changes his password on his laptop, Alice will still have access.</para>
<section><title>ssh-keygen</title>
	<para>The example below shows how Alice uses <command>ssh-keygen</command><indexterm><primary>ssh-keygen(1)</primary></indexterm> to generate a key pair. Alice does not enter a passphrase.</para>
	<screen>
[alice@RHEL5 ~]$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/alice/.ssh/id_rsa): 
Created directory '/home/alice/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/alice/.ssh/id_rsa.
Your public key has been saved in /home/alice/.ssh/id_rsa.pub.
The key fingerprint is:
9b:ac:ac:56:c2:98:e5:d9:18:c4:2a:51:72:bb:45:eb alice@RHEL5
[alice@RHEL5 ~]$ 
		</screen>
	</section>
	<section><title>~/.ssh</title>
		<para>While <command>ssh-keygen</command> generates a public and a private key, it will also create a hidden <command>.ssh</command><indexterm><primary>.ssh</primary></indexterm> directory with proper permissions. If you create the .ssh directory manually, then you need to chmod 700 it! Otherwise ssh will refuse to use the keys (world readable private keys are not secure!).</para>
		<para>As you can see, the <command>.ssh</command> directory is secure in Alice's home directory.</para>
		<screen>
[alice@RHEL5 ~]$ ls -ld .ssh
drwx------ 2 alice alice 4096 May  1 07:38 .ssh
[alice@RHEL5 ~]$ 
		</screen>
		<para>Bob is using Ubuntu at home. He decides to manually create the <command>.ssh</command> directory, so he needs to manually secure it.</para>
		<screen>
bob@laika:~$ mkdir .ssh
bob@laika:~$ ls -ld .ssh
drwxr-xr-x 2 bob bob 4096 2008-05-14 16:53 .ssh
bob@laika:~$ chmod 700 .ssh/
bob@laika:~$
		</screen>
	</section>
	<section><title>id_rsa and id_rsa.pub</title>
		<para>The ssh-keygen command generate two keys in .ssh. The public key is named <command>~/.ssh/id_rsa.pub</command><indexterm><primary>~/.ssh/id_rsa.pub</primary></indexterm>. The private key is named <command>~/.ssh/id_rsa</command><indexterm><primary>~/.ssh/id_rsa</primary></indexterm>.</para>
		<screen>
[alice@RHEL5 ~]$ ls -l .ssh/
total 16
-rw------- 1 alice alice 1671 May  1 07:38 id_rsa
-rw-r--r-- 1 alice alice  393 May  1 07:38 id_rsa.pub
[alice@RHEL5 ~]$ 
		</screen>
	</section>
	<section><title>scp</title>
		<para>To copy the public key from Alice's server tot Bob's laptop, Alice decides to use <command>scp</command><indexterm><primary>scp(1)</primary></indexterm>.</para>
		<screen>
[alice@RHEL5 .ssh]$ scp id_rsa.pub bob@192.168.48.92:~/.ssh/authorized_keys
bob@192.168.48.92's password: 
id_rsa.pub                                    100%  393     0.4KB/s   00:00    
[alice@RHEL5 .ssh]$
		</screen>
		<para>Be careful when copying a second key! Do not overwrite the first key, instead append the key to the same ~/.ssh/authorized_keys file!</para>
	</section>
	<section><title>authorized_keys</title>
		<para>In your ~/.ssh directory, you can create a file called <command>authorized_keys</command><indexterm><primary>~/.ssh/authorized_keys</primary></indexterm>. This file can contain one or more public keys from people you trust. Those trusted people can use their private keys to prove their identity and gain access to your account via ssh (without password). The example shows Bob's authorized_keys file containing the public key of Alice.</para>
		<screen>
bob@laika:~$ cat .ssh/authorized_keys 
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEApCQ9xzyLzJes1sR+hPyqW2vyzt1D4zTLqk\
MDWBR4mMFuUZD/O583I3Lg/Q+JIq0RSksNzaL/BNLDou1jMpBe2Dmf/u22u4KmqlJBfDhe\
yTmGSBzeNYCYRSMq78CT9l9a+y6x/shucwhaILsy8A2XfJ9VCggkVtu7XlWFDL2cum08/0\
mRFwVrfc/uPsAn5XkkTscl4g21mQbnp9wJC40pGSJXXMuFOk8MgCb5ieSnpKFniAKM+tEo\
/vjDGSi3F/bxu691jscrU0VUdIoOSo98HUfEf7jKBRikxGAC7I4HLa+/zX73OIvRFAb2hv\
tUhn6RHrBtUJUjbSGiYeFTLDfcTQ== alice@RHEL5
bob@laika:~$ 
		</screen>
	</section>
	<section><title>passwordless ssh</title>
		<para>Alice can now use ssh to connect passwordless to Bob's laptop. In combination with ssh's capability to execute commands on the remote host, this can be useful in pipes across different machines.</para>
		<screen>
[alice@RHEL5 ~]$ ssh bob@192.168.48.92 "ls -l .ssh"
total 4
-rw-r--r-- 1 bob bob 393 2008-05-14 17:03 authorized_keys
[alice@RHEL5 ~]$ 
		</screen>
	</section>
<section><title>X forwarding via SSH</title>
	<para> The <command>ssh protocol</command><indexterm><primary>ssh</primary></indexterm> will remember the servers it connected to (and warn you in case something suspicious happened), and will use strong 128-bit encryption. Another popular feature of ssh is called <command>X11 forwarding</command> and is implemented with <command>ssh -X</command><indexterm><primary>ssh -X</primary></indexterm>.</para>
	<para>Below an example of X11 forwarding: user paul logs in as user greet on her computer to start the graphical application mozilla-thunderbird. Although the application will run on the remote computer from greet, it will be displayed on the screen attached locally to paul's computer.</para>
	<screen>
paul@laika:~/PDF$ ssh -X greet@greet.dyndns.org -p 55555
Warning: Permanently added the RSA host key for IP address \
'81.240.174.161' to the list of known hosts.
Password: 
Linux raika 2.6.8-2-686 #1 Tue Aug 16 13:22:48 UTC 2005 i686 GNU/Linux
				
Last login: Thu Jan 18 12:35:56 2007
greet@raika:~$ ps fax | grep thun
greet@raika:~$ mozilla-thunderbird &#038;
[1] 30336
	</screen>
</section>
<section><title>troubleshooting ssh</title>
	<para>Use <command>ssh -v</command> to get debug information about the ssh connection attempt.</para>
	<screen>
paul@laika:~$ ssh -v bert@192.168.1.192
OpenSSH_4.3p2 Debian-8ubuntu1, OpenSSL 0.9.8c 05 Sep 2006
debug1: Reading configuration data /home/paul/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to 192.168.1.192 [192.168.1.192] port 22.
debug1: Connection established.
debug1: identity file /home/paul/.ssh/identity type -1
debug1: identity file /home/paul/.ssh/id_rsa type 1
debug1: identity file /home/paul/.ssh/id_dsa type -1
debug1: Remote protocol version 1.99, remote software version OpenSSH_3
debug1: match: OpenSSH_3.9p1 pat OpenSSH_3.*
debug1: Enabling compatibility mode for protocol 2.0
...
	</screen>
</section>
</section>
