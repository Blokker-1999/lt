	<section><title>about apache</title>
		<para>According to NetCraft (http://news.netcraft.com/archives/web_server_survey.html) about seventy percent of all web servers are running on Apache. Some people say that the name is derived from <command>a patchy</command> web server, because of all the patches people wrote for the NCSA httpd server.</para>
	</section>
	<section><title>is apache installed ?</title>
		<para>To verify whether Apache is installed, use the proper tools (rpm, dpkg, ...) and grep for apache or httpd.</para>
		<para>This Red Hat Enterprise 4 Server has apache installed.</para>
		<screen>
[paul@rhel4 ~]$ rpm -qa | grep -i httpd
httpd-2.0.52-25.ent
httpd-manual-2.0.52-25.ent
system-config-httpd-1.3.1-1
httpd-devel-2.0.52-25.ent
httpd-suexec-2.0.52-25.ent
		</screen>
		<para>This Ubuntu also has apache installed.</para>
		<screen>
paul@laika:~$ dpkg -l | grep apache
ii  apache2                  2.2.3-3.2build1      Next generation, scalable, ...
ii  apache2-mpm-prefork      2.2.3-3.2build1      Traditional model for Apach...
ii  apache2-utils            2.2.3-3.2build1      utility programs for webser...
ii  apache2.2-common         2.2.3-3.2build1      Next generation, scalable, ...
ii  libapache2-mod-php5      5.2.1-0ubuntu1.2     server-side, HTML-embedded ...
		</screen>
	</section>
	<section><title>is apache running ?</title>
		<para>This is how apache looks when it is installed on Red Hat Enterprise Linux 4, running named as <command>httpd</command><indexterm><primary>httpd</primary></indexterm>.</para>
		<screen>
[root@RHELv4u3 ~]# /etc/init.d/httpd status
httpd is stopped
[root@RHELv4u3 ~]# service httpd start
Starting httpd:                                            [  OK  ]
[root@RHELv4u3 ~]# ps -C httpd
PID TTY          TIME CMD
4573 ?        00:00:00 httpd
4576 ?        00:00:00 httpd
4577 ?        00:00:00 httpd
4578 ?        00:00:00 httpd
4579 ?        00:00:00 httpd
4580 ?        00:00:00 httpd
4581 ?        00:00:00 httpd
4582 ?        00:00:00 httpd
4583 ?        00:00:00 httpd
[root@RHELv4u3 ~]#
		</screen>
		<para>And here is Apache running on Ubuntu, named as <command>apache2</command><indexterm><primary>apache2</primary></indexterm>.</para>
		<screen>
root@laika:~# ps -C apache2
PID TTY          TIME CMD
6170 ?        00:00:00 apache2
6248 ?        00:00:01 apache2
6249 ?        00:00:01 apache2
6250 ?        00:00:00 apache2
6251 ?        00:00:01 apache2
6252 ?        00:00:01 apache2
7520 ?        00:00:01 apache2
8943 ?        00:00:01 apache2
root@laika:~# /etc/init.d/apache2 status
* Usage: /etc/init.d/apache2 {start|stop|restart|reload|force-reload}
root@laika:~# 
		</screen>
		<para>To verify that apache is running, open a web browser on the web server, and browse to http://localhost. An Apache test page should be shown. The http://localhosts/manual url will give you an extensive Apache manual. The second test is to connect to your Apache from another computer.</para>
	</section>
	<section><title>apache configuration</title>
		<para>Configuring Apache changed a bit the past couple of years. But it still takes place in <command>/etc/httpd</command><indexterm><primary>/etc/httpd</primary></indexterm> or <command>/etc/apache</command><indexterm><primary>/etc/apache</primary></indexterm>.</para>
		<screen>
[root@RHELv4u3 ~]# cd /etc/httpd/
[root@RHELv4u3 httpd]# ll
total 32
lrwxrwxrwx  1 root root   25 Jan 24 09:28 build -> ../../usr/lib/httpd/build
drwxr-xr-x  7 root root 4096 Jan 24 08:48 conf
drwxr-xr-x  2 root root 4096 Jan 24 09:29 conf.d
lrwxrwxrwx  1 root root   19 Jan 24 08:48 logs -> ../../var/log/httpd
lrwxrwxrwx  1 root root   27 Jan 24 08:48 modules -> ../../usr/lib/httpd/modules
lrwxrwxrwx  1 root root   13 Jan 24 08:48 run -> ../../var/run
[root@RHELv4u3 httpd]#
		</screen>
		<para>The main configuration file for the Apache server on RHEL is <command>/etc/httpd/conf/httpd.conf</command><indexterm><primary>/etc/httpd/conf/httpd.conf</primary></indexterm>, on Ubuntu it is <command>/etc/apache2/apache2.conf</command><indexterm><primary>/etc/apache2/apache2.conf</primary></indexterm>. The file explains itself, and contains examples for how to set up virtual hosts or configure access.</para>
	</section>
	<section><title>virtual hosts</title>
		<para>Virtual hosts can be defined by ip-address, by port or by name (host record). (The new way of defining virtual hosts is through seperate config files in the conf.d directory.) Below is a very simple virtual host definition.</para>
		<screen>
[root@rhel4 conf]# tail /etc/httpd/conf/httpd.conf 
#
# This is a small test website
#
&#060;VirtualHost testsite.local:80&#062;
ServerAdmin webmaster@testsite.local
DocumentRoot /var/www/html/testsite/
ServerName testsite.local
ErrorLog logs/testsite.local-error_log
CustomLog logs/testsite.local-access_log common
&#060;/VirtualHost&#062;
[root@rhel4 conf]# 
		</screen>
		<para>Should you put this little index.html file in the directory mentioned in the above screenshot, then you can access this humble website.</para>
		<screen>
[root@rhel4 conf]# cat /var/www/html/testsite/index.html 
&#060;html&#062;
	&#060;head&#062;&#060;title>Test Site&#060;/title&#062;&#060;/head&#062;
	&#060;body&#062;
		&#060;p&#062;This is the test site.&#060;/p&#062;
	&#060;/body&#062;
&#060;/html&#062;
		</screen>
		<para>Below is a sample virtual host configuration. This virtual hosts overrules the default Apache <command>ErrorDocument</command> directive.</para>
		<screen>
&#060;VirtualHost 83.217.76.245:80&#062;
ServerName cobbaut.be
ServerAlias www.cobbaut.be
DocumentRoot /home/paul/public_html
ErrorLog /home/paul/logs/error_log
CustomLog /home/paul/logs/access_log common
ScriptAlias /cgi-bin/ /home/paul/cgi-bin/
&#060;Directory /home/paul/public_html&#062;
	Options Indexes IncludesNOEXEC FollowSymLinks
	allow from all
&#060;/Directory&#062;
ErrorDocument 404 http://www.cobbaut.be/cobbaut.php
&#060;/VirtualHost&#062;
		</screen>
	</section>
	<section><title>aliases and redirects</title>
		<para>Apache supports aliases for directories, like this example shows.</para>
		<screen>Alias /paul/ "/home/paul/public_html/"</screen>
		<para>Similarly, content can be redirected to another website or web server.</para>
		<screen>Redirect permanent /foo http://www.foo.com/bar</screen>
	</section>
	<section><title>securing directories with htpasswd and .htaccess</title>
		<para>You can secure files and directories in your website with a userid/password. First, enter your website, and use the <command>htpasswd</command><indexterm><primary>htpasswd(1)</primary></indexterm> command to create a <command>.htpasswd file</command><indexterm><primary>.htpasswd</primary></indexterm> that contains a userid and an (encrypted) password.</para>
		<screen>
		[root@rhel4 testsite]# htpasswd -c .htpasswd pol
		New password: 
		Re-type new password: 
		Adding password for user pol
		[root@rhel4 testsite]# cat .htpasswd 
		pol:x5vZlyw1V6KXE
		[root@rhel4 testsite]# 
		</screen>
		<para>You can add users to this file, just don't use the -c switch again.</para>
		<screen>
		[root@rhel4 testsite]# htpasswd .htpasswd kim
		New password: 
		Re-type new password: 
		Adding password for user kim
		[root@rhel4 testsite]# cat .htpasswd 
		pol:x5vZlyw1V6KXE
		kim:6/RbvugwsgOI6
		[root@rhel4 testsite]# 
		</screen>
		<para>You have now defined two users. Next create a subsdirectory that you want to protect with these two accounts. And put the following .htaccess file in that subdirectory.</para>
		<screen>
		[root@rhel4 kimonly]# pwd
		/var/www/html/testsite/kimonly
		[root@rhel4 kimonly]# cat .htaccess 
		AuthUserFile /var/www/html/testsite/.htpasswd
		AuthGroupFile /dev/null
		AuthName "test access title"
		AuthType Basic
		
		&#060;Limit GET POST&#062;
		require valid-user
		&#060;/Limit&#062;
		[root@rhel4 kimonly]# 
		</screen>
		<para>Finally, don't forget to verify that AllowOverride is set to All in the general Apache configuration file.</para>
		<screen>
		# AllowOverride controls what directives may be placed in .htaccess files.
		# It can be "All", "None", or any combination of the keywords:
		#   Options FileInfo AuthConfig Limit
		#
		AllowOverride All
		</screen>
		<para>From now on, when a user accesses a file in that subdirectory, that user will have to provide a userid/password combo that is defined in your .htpasswd.</para>
	</section>
	<section><title>more on .htaccess</title>
		<para>You can do much more with <command>.htaccess</command><indexterm><primary>.htaccess</primary></indexterm>. One example is to use .htaccess to prevent people from certain domains to access your website. Like in this case, where a number of referer spammers are blocked from the website.</para>
		<screen>
		paul@lounge:~/cobbaut.be$ cat .htaccess 
		# Options +FollowSymlinks
		RewriteEngine On
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-adipex.fw.nu.*$ [OR]
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-levitra.asso.ws.*$ [NC,OR]
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-tramadol.fw.nu.*$ [NC,OR]
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-viagra.lookin.at.*$ [NC,OR]
		...
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?www.healthinsurancehelp.net.*$ [NC]
		RewriteRule .* - [F,L]
		paul@lounge:~/cobbaut.be$ 
	</screen>
	</section>
	<section><title>traffic</title>
		<para>Apache keeps a log of all visitors. The <command>webalizer</command><indexterm><primary>webalizer</primary></indexterm> is often used to parse this log into nice html statistics.</para>
	</section>
	<section><title>practice: apache</title>
		<para>1. Verify that Apache is installed and running.</para>
		<para>2. Browse to the Apache HTML manual from another computer.</para>
		<para>3. Create a virtual hosts that listens to port 8247.</para>
		<para>4. Create a virtual hosts that listens on another ip-address.</para>
		<para>5. Test from another computer that all virtual hosts work.</para>
		<para>6. Protect a subdirectory of a website with .htpasswd and .htaccess.</para>
	</section>
