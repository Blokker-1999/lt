<section><title>Filesystem Hierarchy</title>
	<para>On http://www.pathname.com/fhs/ we read "The filesystem hierarchy standard has been designed to be used by Unix distribution developers, package developers, and system implementors. However, it is primarily intended to be a reference and is not a tutorial on how to manage a Unix filesystem or directory hierarchy." Below we will discuss a couple of root directories. <emphasis>For a complete reference, you'll have to check with every developer and system administrator in the world ;-)</emphasis></para>
	<section><title>/bin binaries</title>
		<para>The <command>/bin</command><indexterm><primary>/bin</primary></indexterm> directory contains binaries for use by all users. According to the FHS /bin/date should exist, and /bin should contain /bin/cat. You will find a bin subdirectory in many other directories. Binaries are sometimes called <command>executables</command><indexterm><primary>executables</primary></indexterm>. In the screenshot below you see a lot of common unix commands like cat, cp, cpio, date, dd, echo, grep and so on. A lot of these will be covered in this book.</para>
<screen>
paul@laika:~$ ls /bin
archdetect       egrep             mt               setupcon
autopartition    false             mt-gnu           sh
bash             fgconsole         mv               sh.distrib
bunzip2          fgrep             nano             sleep
bzcat            fuser             nc               stralign
bzcmp            fusermount        nc.traditional   stty
bzdiff           get_mountoptions  netcat           su
bzegrep          grep              netstat          sync
bzexe            gunzip            ntfs-3g          sysfs
bzfgrep          gzexe             ntfs-3g.probe    tailf
bzgrep           gzip              parted_devices   tar
bzip2            hostname          parted_server    tempfile
bzip2recover     hw-detect         partman          touch
bzless           ip                partman-commit   true
bzmore           kbd_mode          perform_recipe   ulockmgr
cat              kill              pidof            umount
...
</screen>
		</section>
		<section><title>/boot static files to boot the system</title>
			<para>The <command>/boot</command><indexterm><primary>/boot</primary></indexterm> directory contains all files needed to boot the computer. These files don't change very often. On Linux systems you typically find the <command>/boot/grub</command><indexterm><primary>/boot/grub</primary></indexterm> directory here. This /boot/grub contains <command>/boot/grub/menu.lst</command><indexterm><primary>/boot/grub/menu.lst</primary></indexterm> (the grub configuration file is often linked to <command>/boot/grub/grub.conf</command><indexterm><primary>/boot/grub/grub.conf</primary></indexterm>), which defines the bootmenu that is being displayed before the kernel starts.</para>
		</section>
		<section><title>/dev device files</title>
			<para>Device files in <command>/dev</command><indexterm><primary>/dev</primary></indexterm> appear to be ordinary files, but are not located on the harddisk. The /dev directory is populated with files when the kernel is recognizing hardware.</para>
			<section><title>Common physical devices</title>
				<para>Common hardware such as hard disk devices are represented by device files in <command>/dev</command>. Below a screenshot of SATA device files on a laptop and then IDE attached drives on a desktop. (The detailed meaning of these devices will be discussed later.)</para>
				<screen>
#
# SATA or SCSI
#
paul@laika:~$ ls /dev/sd*
/dev/sda  /dev/sda1  /dev/sda2  /dev/sda3  /dev/sdb  /dev/sdb1  /dev/sdb2

#
# IDE or ATAPI
#
paul@barry:~$ ls /dev/hd*
/dev/hda  /dev/hda1  /dev/hda2  /dev/hdb  /dev/hdb1  /dev/hdb2  /dev/hdc
				</screen>
				<para>Besides representing physical hardware, some device files are special. These special devices can be very useful.</para>
			</section>
			<section><title>/dev/tty and /dev/pts</title>
				<para>For example <command>/dev/tty1</command><indexterm><primary>/dev/tty1</primary></indexterm> represents a terminal or console attached to the system. (Don't break your head on the exact terminology of 'terminal' or 'console', what we mean here is a commandline interface.) When typing commands in a terminal that is part of a graphical interface like Gnome or KDE, then your terminal will be represented as <command>/dev/pts/1</command><indexterm><primary>/dev/pts/1</primary></indexterm> (1 can be another number).</para>
			</section>
			<section><title>/dev/null</title>
				<para>On Linux you will find special devices like <command>/dev/null</command><indexterm><primary>/dev/null</primary></indexterm> which can be considered a black hole, it has unlimited storage, but nothing can be retrieved from it. Technically speaking, anything given to /dev/null will be discarded. /dev/null can be useful to discard unwanted output from commands. <emphasis>/dev/null is not a good location to store all your backups ;-)</emphasis>.</para>
			</section>
		</section>
		<section><title>/etc Configuration Files</title>
			<para>All of the machine-specific configuration files should be located in <command>/etc</command><indexterm><primary>/etc</primary></indexterm>. Many times the name of a configuration files is the same as the application or daemon or protocol with .conf added as an extension. But there is much more to be found in /etc.</para>
			<screen>
paul@laika:~$ ls /etc/*.conf
/etc/adduser.conf        /etc/ld.so.conf       /etc/scrollkeeper.conf
/etc/brltty.conf         /etc/lftp.conf        /etc/sysctl.conf
/etc/ccertificates.conf  /etc/libao.conf       /etc/syslog.conf
/etc/cvs-cron.conf       /etc/logrotate.conf   /etc/ucf.conf
/etc/ddclient.conf       /etc/ltrace.conf      /etc/uniconf.conf
/etc/debconf.conf        /etc/mke2fs.conf      /etc/updatedb.conf
/etc/deluser.conf        /etc/netscsid.conf    /etc/usplash.conf
/etc/fdmount.conf        /etc/nsswitch.conf    /etc/uswsusp.conf
/etc/hdparm.conf         /etc/pam.conf         /etc/vnc.conf
/etc/host.conf           /etc/pnm2ppa.conf     /etc/wodim.conf
/etc/inetd.conf          /etc/povray.conf      /etc/wvdial.conf
/etc/kernel-img.conf     /etc/resolv.conf
paul@laika:~$ 
			</screen>
			<section><title>/etc/X11/</title>
				<para>The graphical display (aka <command>X Window System</command><indexterm><primary>X Window System</primary></indexterm> or just <command>X</command><indexterm><primary>X</primary></indexterm>) is driven by software from the X.org foundation. The configuration file for your graphical display is <command>/etc/X11/xorg.conf</command><indexterm><primary>/etc/X11/xorg.conf</primary></indexterm>. </para>
			</section>
			<section><title>/etc/filesystems</title>
				<para>When mounting a file system without specifying explicitly the file system, then <command>mount</command><indexterm><primary>mount</primary></indexterm> will first probe <command>/etc/filesystems</command><indexterm><primary>/etc/filesystems</primary></indexterm>. Mount will skip lines with the <command>nodev</command><indexterm><primary>nodev</primary></indexterm> directive, and should this file end with a single * on the last line, then mount will continue probing <command>/proc/filesystems</command><indexterm><primary>/proc/filesystems</primary></indexterm>.</para>
				<screen>
paul@RHELv4u4:~$ cat /etc/filesystems 
ext3
ext2
nodev proc
nodev devpts
iso9660
vfat
hfs
paul@RHELv4u4:~$
				</screen>
			</section>
			<section><title>/etc/skel/</title>
				<para>The <command>skeleton</command><indexterm><primary>skeleton</primary></indexterm> directory <command>/etc/skel</command><indexterm><primary>/etc/skel</primary></indexterm> is copied to the home directory of a newly created user. It usually contains hidden files like a <command>.bashrc</command> script.</para>
			</section>
			<section><title>/etc/sysconfig/</title>
				<para>This directory, which is not mentioned in the FHS, contains a lot of Red Hat Enterprise Linux configuration files. We will discuss some of them in greater detail. The screenshot below is the <command>/etc/sysconfig</command><indexterm><primary>/etc/sysconfig</primary></indexterm> from RHELv4u4 with everything installed.</para>
				<screen>
paul@RHELv4u4:~$ ls /etc/sysconfig/
apmd         firstboot     irda              network      saslauthd
apm-scripts  grub          irqbalance        networking   selinux
authconfig   hidd          keyboard          ntpd         spamassassin
autofs       httpd         kudzu             openib.conf  squid
bluetooth    hwconf        lm_sensors        pand         syslog
clock        i18n          mouse             pcmcia       sys-config-sec
console      init          mouse.B           pgsql        sys-config-users
crond        installinfo   named             prelink      sys-logviewer
desktop      ipmi          netdump           rawdevices   tux
diskdump     iptables      netdump_id_dsa    rhn          vncservers
dund         iptables-cfg  netdump_id_dsa.p  samba        xinetd
paul@RHELv4u4:~$ 
				</screen>
				<para>The file <command>/etc/sysconfig/firstboot</command><indexterm><primary>/etc/sysconfig/firstboot</primary></indexterm> tells the Red Hat Setup Agent to not run at boot time. If you want to run the Red Hat Setup Agent at the next reboot, then simply remove this file, and run <command>chkconfig --level 5 firstboot on</command><indexterm><primary>chkconfig</primary></indexterm>. The Red Hat Setup Agent allows you to install the latest updates, create a user account, join the Red Hat Network and more. It will then create the /etc/sysconfig/firstboot file again.</para>
				<screen>
paul@RHELv4u4:~$ cat /etc/sysconfig/firstboot 
RUN_FIRSTBOOT=NO
				</screen>
				<para>The file <command>/etc/sysconfig/harddisks</command><indexterm><primary>/etc/sysconfig/harddisks</primary></indexterm> contains some parameters to tune the hard disks. The file explains itself.</para>
				<para>You can see hardware detected by <command>kudzu</command><indexterm><primary>kudzu</primary></indexterm> in <command>/etc/sysconfig/hwconf</command><indexterm><primary>/etc/sysconfig/hwconf</primary></indexterm>. Kudzu is software from Red Hat for automatic discovery and configuration of hardware.</para>
				<para>The keyboard type and table are set in the <command>/etc/sysconfig/keyboard</command><indexterm><primary>/etc/sysconfig/keyboard</primary></indexterm> file. For more console keyboard information, check the manual pages of <command>keymaps(5)</command><indexterm><primary>keymaps(5)</primary></indexterm>, <command>dumpkeys(1)</command><indexterm><primary>dumpkeys(1)</primary></indexterm>, <command>loadkeys(1)</command><indexterm><primary>loadkeys(1)</primary></indexterm> and the directory <command>/lib/kbd/keymaps/</command><indexterm><primary>/lib/kbd/keymaps/</primary></indexterm>.</para>
				<screen>
root@RHELv4u4:/etc/sysconfig# cat keyboard 
KEYBOARDTYPE="pc"
KEYTABLE="us"
				</screen>
				<para>We will discuss the networking files in this directory in the networking chapter.</para>
			</section>
		</section>
		<section><title>/home sweet home</title>
			<para>You will find a lot of locations with an extensive hierarchy of personal or project data under <command>/home</command><indexterm><primary>/home</primary></indexterm>. It is common practice (but not mandatory) to name the users home directory after their username in the format /home/$USERNAME. Like in this example:</para>
			<screen>
paul@pasha:~$ ls /home 
geert  guillaume  maria  paul  tom
			</screen>
			<para>Besides giving every user (or every project or group) a location to store personal files, the home directory of a user also serves as a location to store the user profile. A typical Unix user profile contains a bunch of hidden files (files who's filename starts with a dot). The hidden files of the Unix user profile contain settings specific for that user.</para>
			<screen>
paul@pasha:~$ ls -d /home/paul/.*
/home/paul/.              /home/paul/.bash_profile  /home/paul/.ssh
/home/paul/..             /home/paul/.bashrc        /home/paul/.viminfo
/home/paul/.bash_history  /home/paul/.lesshst       /home/paul/.Xauthority
			</screen>
		</section>
		<section><title>/initrd</title>
			<para>This empty directory is used as a mount point by Red Hat Enterprise Linux during boot time. Removing it causes a kernel panic during the next boot.</para>
		</section>
		<section><title>/lib shared libraries</title>
			<para>Binaries, like those found in /bin, often use shared libraries located in <command>/lib</command><indexterm><primary>/lib</primary></indexterm>. Below a partial screenshot of the contents of /lib.</para>
			<screen>
paul@laika:~$ ls /lib/libc*
/lib/libc-2.5.so     /lib/libcfont.so.0.0.0  /lib/libcom_err.so.2.1    
/lib/libcap.so.1     /lib/libcidn-2.5.so     /lib/libconsole.so.0      
/lib/libcap.so.1.10  /lib/libcidn.so.1       /lib/libconsole.so.0.0.0  
/lib/libcfont.so.0   /lib/libcom_err.so.2    /lib/libcrypt-2.5.so      
			</screen>
			<section><title>/lib/modules</title>
				<para>Typically, the kernel loads kernel modules from <command>/lib/modules</command><indexterm><primary>/lib/modules</primary></indexterm>. </para>
			</section>
			<section><title>/lib32 and /lib64</title>
				<para>We are now (the year 2007) in a transition between 32-bit and 64-bit systems. So you might encounter directories named <command>/lib32</command><indexterm><primary>/lib32</primary></indexterm> and <command>/lib64</command><indexterm><primary>/lib64</primary></indexterm>, to clarify the register size used at compilation time of the libraries. My current 64-bit laptop has some older 32-bit binaries and libraries for compatibility with legacy applications. The screenshot uses the <command>file</command><indexterm><primary>file(1)</primary></indexterm> utility to point out the difference.</para>
				<screen>
paul@laika:~$ file /lib32/libc-2.5.so 
/lib32/libc-2.5.so: ELF 32-bit LSB shared object, Intel 80386, \
version 1 (SYSV), for GNU/Linux 2.6.0, stripped
paul@laika:~$ file /lib64/libcap.so.1.10 
/lib64/libcap.so.1.10: ELF 64-bit LSB shared object, AMD x86-64, \
version 1 (SYSV), stripped
				</screen>
				<para>The ELF <command>Executable and Linkable Format</command><indexterm><primary>ELF</primary></indexterm> is used in almost every Unix-like operating system since System V.</para>
			</section>
		</section>
		<section><title>/media for Removable Media</title>
			<para>The <command>/media</command><indexterm><primary>/media</primary></indexterm> directory serves as a mount point for removable media, meaning devices such as CD-ROM's, digital cameras and various usb-attached devices. Since <command>/media</command> is rather new in the Unix world, you could very well encounter systems running without this directory. Solaris 9 does not have it, Solaris 10 does.</para>
			<screen>
paul@laika:~$ ls /media/
cdrom  cdrom0  usbdisk
			</screen>
		</section>
		<section><title>/mnt standard mount point</title>
			<para>Older Unixes (and Linuxes) used to mount all kind of stuff under /mnt/something/. According to the FHS, <command>/mnt</command><indexterm><primary>/mnt</primary></indexterm> should only be used to temporarily mount something. But you will most likely witness a lot of systems with more than one directory underneath /mnt used as a mountpoint for various local and remote filesystems.</para>
		</section>
		<section><title>/opt Optional software</title>
			<para>Most of my systems today have an empty <command>/opt</command><indexterm><primary>/opt</primary></indexterm> directory. It is considered outdated, but you might find some systems with add-on software installed in /opt. If that is the case, the package should install all its files in the typical bin, lib, etc subdirectories in /opt/$packagename/. If for example the package is called wp, then it installs in /opt/wp, putting binaries in /opt/wp/bin and manpages in /opt/wp/man. Most of the default software which comes along with the distribution, will not be installed in /opt.</para>
		</section>
		<section><title>/proc conversation with the kernel</title>
		<para><command>/proc</command><indexterm><primary>/proc</primary></indexterm> is another special directory, appearing to be ordinary files, but not taking up diskspace. It is actually a view on the kernel, or better on what the kernel sees, and a means to talk to the kernel directly. <command>/proc</command> is a proc filesystem.</para>
			<screen>
paul@RHELv4u4:~$ mount -t proc
none on /proc type proc (rw)
			</screen>
			<para>When listing the /proc directory, you will see a lot of numbers (on any Unix), and some interesting files (on Linux)</para>
			<screen>
mul@laika:~$ ls /proc
1      2339   4724  5418  6587  7201       cmdline      mounts
10175  2523   4729  5421  6596  7204       cpuinfo      mtrr
10211  2783   4741  5658  6599  7206       crypto       net
10239  2975   4873  5661  6638  7214       devices      pagetypeinfo
141    29775  4874  5665  6652  7216       diskstats    partitions
15045  29792  4878  5927  6719  7218       dma          sched_debug
1519   2997   4879  6     6736  7223       driver       scsi
1548   3      4881  6032  6737  7224       execdomains  self
1551   30228  4882  6033  6755  7227       fb           slabinfo
1554   3069   5     6145  6762  7260       filesystems  stat
1557   31422  5073  6298  6774  7267       fs           swaps
1606   3149   5147  6414  6816  7275       ide          sys
180    31507  5203  6418  6991  7282       interrupts   sysrq-trigger
181    3189   5206  6419  6993  7298       iomem        sysvipc
182    3193   5228  6420  6996  7319       ioports      timer_list
18898  3246   5272  6421  7157  7330       irq          timer_stats
19799  3248   5291  6422  7163  7345       kallsyms     tty
19803  3253   5294  6423  7164  7513       kcore        uptime
19804  3372   5356  6424  7171  7525       key-users    version
1987   4      5370  6425  7175  7529       kmsg         version_signature
1989   42     5379  6426  7188  9964       loadavg      vmcore
2      45     5380  6430  7189  acpi       locks        vmnet
20845  4542   5412  6450  7191  asound     meminfo      vmstat
221    46     5414  6551  7192  buddyinfo  misc         zoneinfo
2338   4704   5416  6568  7199  bus        modules
			</screen>
			<para>Let's investigate the file properties inside /proc. Looking at the date and time will display the current date and time, meaning the files are constantly updated (A view on the kernel).</para>
			<screen>
paul@RHELv4u4:~$ date
Mon Jan 29 18:06:32 EST 2007
paul@RHELv4u4:~$ ls -al /proc/cpuinfo 
-r--r--r--  1 root root 0 Jan 29 18:06 /proc/cpuinfo
paul@RHELv4u4:~$ 
paul@RHELv4u4:~$  ...time passes...
paul@RHELv4u4:~$ 
paul@RHELv4u4:~$ date
Mon Jan 29 18:10:00 EST 2007
paul@RHELv4u4:~$ ls -al /proc/cpuinfo 
-r--r--r--  1 root root 0 Jan 29 18:10 /proc/cpuinfo
			</screen>
			<para>Most files in /proc are 0 bytes, yet they contain data, sometimes a lot of data. You can see this by executing cat on files like <command>/proc/cpuinfo</command><indexterm><primary>/proc/cpuinfo</primary></indexterm>, which contains information on the CPU. </para>
			<screen>
paul@RHELv4u4:~$ file /proc/cpuinfo 
/proc/cpuinfo: empty
paul@RHELv4u4:~$ cat /proc/cpuinfo 
processor       : 0
vendor_id       : AuthenticAMD
cpu family      : 15
model           : 43
model name      : AMD Athlon(tm) 64 X2 Dual Core Processor 4600+
stepping        : 1
cpu MHz         : 2398.628
cache size      : 512 KB
fdiv_bug        : no
hlt_bug         : no
f00f_bug        : no
coma_bug        : no
fpu             : yes
fpu_exception   : yes
cpuid level     : 1
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge...
bogomips        : 4803.54
			</screen>
			<para><emphasis>Just for fun, here is /proc/cpuinfo on a Sun Sunblade 1000...</emphasis></para>
			<screen>
paul@pasha:~$ cat /proc/cpuinfo
cpu : TI UltraSparc III (Cheetah)
fpu : UltraSparc III integrated FPU
promlib : Version 3 Revision 2
prom : 4.2.2
type : sun4u
ncpus probed : 2
ncpus active : 2
Cpu0Bogo : 498.68
Cpu0ClkTck : 000000002cb41780
Cpu1Bogo : 498.68
Cpu1ClkTck : 000000002cb41780
MMU Type : Cheetah
State:
CPU0: online
CPU1: online 
			</screen>
			<para><emphasis>... and on a Sony Playstation 3.</emphasis></para>
			<screen>
[root@ps3 tmp]# uname -a
Linux ps3 2.6.20-rc5 #58 SMP Thu Jan 18 13:35:01 CET 2007 ppc64 ppc64
ppc64 GNU/Linux
[root@ps3 tmp]# cat /proc/cpuinfo
processor       : 0
cpu             : Cell Broadband Engine, altivec supported
clock           : 3192.000000MHz
revision        : 5.1 (pvr 0070 0501)

processor       : 1
cpu             : Cell Broadband Engine, altivec supported
clock           : 3192.000000MHz
revision        : 5.1 (pvr 0070 0501)

timebase        : 79800000
platform        : PS3
machine         : PS3 
			</screen>
			<para>Most of the files in /proc are read only, some require root privileges. But some files are writable, a lot of files in <command>/proc/sys</command><indexterm><primary>/proc/sys</primary></indexterm> are writable. Let's discuss some of the files in /proc.</para>
			<section><title>/proc/cmdline</title>
				<para>The parameters that were passed to the kernel at boot time are in <command>/proc/cmdline</command><indexterm><primary>/proc/cmdline</primary></indexterm>.</para>
				<screen>
paul@RHELv4u4:~$ cat /proc/cmdline 
ro root=/dev/VolGroup00/LogVol00 rhgb quiet
				</screen>
			</section>
			<section><title>/proc/filesystems</title>
				<para>The <command>/proc/filesystems</command><indexterm><primary>/proc/filesystems</primary></indexterm> file displays a list of supported file systems. When you mount a file system without explicitly defining one, then mount will first try to probe <command>/etc/filesystems</command><indexterm><primary>/etc/filesystems</primary></indexterm> and then probe <command>/proc/filesystems</command> for all the filesystems in there without the <command>nodev</command><indexterm><primary>nodev</primary></indexterm> label. If /etc/filesystems ends with a line containing nothing but a *, then both files are probed.</para> 
				<screen>
paul@RHELv4u4:~$ cat /proc/filesystems 
nodev   sysfs
nodev   rootfs
nodev   bdev
nodev   proc
nodev   sockfs
nodev   binfmt_misc
nodev   usbfs
nodev   usbdevfs
nodev   futexfs
nodev   tmpfs
nodev   pipefs
nodev   eventpollfs
nodev   devpts
        ext2
nodev   ramfs
nodev   hugetlbfs
        iso9660
nodev   relayfs
nodev   mqueue
nodev   selinuxfs
        ext3
nodev   rpc_pipefs
nodev   vmware-hgfs
nodev   autofs
paul@RHELv4u4:~$
				</screen>
			</section>
			<section><title>/proc/interrupts</title>
				<para>On the x86 architecture, <command>/proc/interrupts</command><indexterm><primary>/proc/interrupts</primary></indexterm> displays the interrupts.</para>
				<screen>
paul@RHELv4u4:~$ cat /proc/interrupts 
           CPU0       
  0:   13876877    IO-APIC-edge  timer
  1:         15    IO-APIC-edge  i8042
  8:          1    IO-APIC-edge  rtc
  9:          0   IO-APIC-level  acpi
 12:         67    IO-APIC-edge  i8042
 14:        128    IO-APIC-edge  ide0
 15:     124320    IO-APIC-edge  ide1
169:     111993   IO-APIC-level  ioc0
177:       2428   IO-APIC-level  eth0
NMI:          0 
LOC:   13878037 
ERR:          0
MIS:          0
paul@RHELv4u4:~$ 
				</screen>
				<para>On a machine with two CPU's, the file looks like this.</para>
				<screen>
paul@laika:~$ cat /proc/interrupts 
          CPU0      CPU1       
  0:    860013        0  IO-APIC-edge     timer
  1:      4533        0  IO-APIC-edge     i8042
  7:         0        0  IO-APIC-edge     parport0
  8:   6588227        0  IO-APIC-edge     rtc
 10:      2314        0  IO-APIC-fasteoi  acpi
 12:       133        0  IO-APIC-edge     i8042
 14:         0        0  IO-APIC-edge     libata
 15:     72269        0  IO-APIC-edge     libata
 18:         1        0  IO-APIC-fasteoi  yenta
 19:    115036        0  IO-APIC-fasteoi  eth0
 20:    126871        0  IO-APIC-fasteoi  libata, ohci1394
 21:     30204        0  IO-APIC-fasteoi  ehci_hcd:usb1, uhci_hcd:usb2
 22:      1334        0  IO-APIC-fasteoi  saa7133[0], saa7133[0]
 24:    234739        0  IO-APIC-fasteoi  nvidia
NMI:        72       42 
LOC:    860000   859994 
ERR:         0
paul@laika:~$
				</screen>
			</section>
			<section><title>/proc/kcore</title>
				<para>The physical memory is represented in <command>/proc/kcore</command><indexterm><primary>/proc/kcore</primary></indexterm>. Do not try to cat this file, instead use a debugger. The size of /proc/kcore is the same as your physical memory, plus four bytes.</para>
				<screen>
paul@laika:~$ ls -lh /proc/kcore 
-r-------- 1 root root 2.0G 2007-01-30 08:57 /proc/kcore
paul@laika:~$ 
				</screen>
			</section>
			<section><title>/proc/mdstat</title>
				<para>You can obtain RAID information from the kernel by displaying <command>/proc/mdstat</command><indexterm><primary>/proc/mdstat</primary></indexterm>. With a RAID configured, it looks like this.</para>
				<screen>
paul@RHELv4u2:~$ cat /proc/mdstat 
Personalities : [raid5] 
md0 : active raid5 sdd1[2] sdc1[1] sdb1[0]
      2088192 blocks level 5, 64k chunk, algorithm 2 [3/3] [UUU]
      
unused devices: &#060;none&#062;
paul@RHELv4u2:~$ 
				</screen>
				<para>When there is no RAID present, the following is displayed.</para>
				<screen>
paul@RHELv4u4:~$ cat /proc/mdstat 
Personalities : 
unused devices: &#060;none&#062;
paul@RHELv4u4:~$ 
				</screen>
			</section>
			<section><title>/proc/meminfo</title>
				<para>You will rarely want to look at <command>/proc/meminfo</command><indexterm><primary>/proc/meminfo</primary></indexterm>...</para>
			<screen>
paul@RHELv4u4:~$ cat /proc/meminfo 
MemTotal:       255864 kB
MemFree:          5336 kB
Buffers:         42396 kB
Cached:         159912 kB
SwapCached:          0 kB
Active:         104184 kB
Inactive:       119724 kB
HighTotal:           0 kB
HighFree:            0 kB
LowTotal:       255864 kB
LowFree:          5336 kB
SwapTotal:     1048568 kB
SwapFree:      1048568 kB
Dirty:              40 kB
Writeback:           0 kB
Mapped:          33644 kB
Slab:            21956 kB
CommitLimit:   1176500 kB
Committed_AS:    82984 kB
PageTables:        960 kB
VmallocTotal:   761848 kB
VmallocUsed:      2588 kB
VmallocChunk:   759096 kB
HugePages_Total:     0
HugePages_Free:      0
Hugepagesize:     4096 kB
				</screen>
				<para> ...since the <command>free</command><indexterm><primary>free(1)</primary></indexterm> command displays the same information in a more user friendly output.</para>
				<screen>
paul@RHELv4u4:~$ free -om
           total      used      free    shared   buffers    cached
Mem:         249       244         5         0        41       156
Swap:       1023         0      1023
paul@RHELv4u4:~$ 
				</screen>
			</section>
			<section><title>/proc/modules</title>
				<para><command>/proc/modules</command><indexterm><primary>/proc/modules</primary></indexterm> lists all modules loaded by the kernel. The output would be too long to display here, so lets <command>grep</command><indexterm><primary>grep</primary></indexterm> for a few. First vm (from Vmware), which tells us that vmmon and vmnet are both loaded. You can display the same information with <command>lsmod</command><indexterm><primary>lsmod</primary></indexterm>. </para>
				<screen>
paul@laika:~$ cat /proc/modules | grep vm
vmnet 36896 13 - Live 0xffffffff88b21000 (P)
vmmon 194540 0 - Live 0xffffffff88af0000 (P)
paul@laika:~$ lsmod | grep vm
vmnet                  36896  13 
vmmon                 194540  0 
paul@laika:~$ 
				</screen>
				<para>Some modules depend on others. In the following example, you can see that the nfsd module is used by exportfs, lockd and sunrpc. </para>
				<screen>
paul@laika:~$ cat /proc/modules | grep nfsd
nfsd 267432 17 - Live 0xffffffff88a40000
exportfs 7808 1 nfsd, Live 0xffffffff88a3d000
lockd 73520 3 nfs,nfsd, Live 0xffffffff88a2a000
sunrpc 185032 12 nfs,nfsd,lockd, Live 0xffffffff889fb000
paul@laika:~$ lsmod | grep nfsd
nfsd                  267432  17 
exportfs                7808  1 nfsd
lockd                  73520  3 nfs,nfsd
sunrpc                185032  12 nfs,nfsd,lockd
paul@laika:~$ 
				</screen>
			</section>
			<section><title>/proc/mounts</title>
				<para>Like the <command>mount</command><indexterm><primary>mount</primary></indexterm> command and the <command>/etc/mtab</command><indexterm><primary>/etc/mtab</primary></indexterm> file, <command>/proc/mounts</command><indexterm><primary>/proc/mounts</primary></indexterm> lists all the mounted file systems. But /proc/mounts displays what the kernel sees, so it is always up to date and correct. You see the device, mount point, file system, read-only or read-write and two zero's.</para>
				<screen>
paul@RHELv4u4:~$ cat /proc/mounts 
rootfs / rootfs rw 0 0
/proc /proc proc rw,nodiratime 0 0
none /dev tmpfs rw 0 0
/dev/root / ext3 rw 0 0
none /dev tmpfs rw 0 0
none /selinux selinuxfs rw 0 0
/proc /proc proc rw,nodiratime 0 0
/proc/bus/usb /proc/bus/usb usbfs rw 0 0
/sys /sys sysfs rw 0 0
none /dev/pts devpts rw 0 0
/dev/sda1 /boot ext3 rw 0 0
none /dev/shm tmpfs rw 0 0
none /proc/sys/fs/binfmt_misc binfmt_misc rw 0 0
sunrpc /var/lib/nfs/rpc_pipefs rpc_pipefs rw 0 0
paul@RHELv4u4:~$ 
				</screen>
			</section>
			<section><title>/proc/partitions</title>
				<para>The <command>/proc/partitions</command><indexterm><primary>/proc/partitions</primary></indexterm> file contains a table with major and minor number of partitioned devices, their number of blocks and the device name in <command>/dev</command><indexterm><primary>/dev</primary></indexterm>. Verify with <command>/proc/devices</command><indexterm><primary>/proc/devices</primary></indexterm> to link the major number to the proper device.</para>
				<screen>
paul@RHELv4u4:~$ cat /proc/partitions 
major minor  #blocks  name

   3     0     524288 hda
   3    64     734003 hdb
   8     0    8388608 sda
   8     1     104391 sda1
   8     2    8281507 sda2
   8    16    1048576 sdb
   8    32    1048576 sdc
   8    48    1048576 sdd
 253     0    7176192 dm-0
 253     1    1048576 dm-1
paul@RHELv4u4:~$ 
				</screen>
			</section>
			<section><title>/proc/swaps</title>
				<para>You can find information about <command>swap partition(s)</command><indexterm><primary>swap partition(s)</primary></indexterm> in <command>/proc/swaps</command><indexterm><primary>/proc/swaps</primary></indexterm>.</para>
				<screen>paul@RHELv4u4:~$ cat /proc/swaps 
Filename                           Type        Size    Used    Priority
/dev/mapper/VolGroup00-LogVol01    partition   1048568 0       -1
paul@RHELv4u4:~$ 
				</screen>
			</section>
		</section>
		<section><title>/root the superuser's home</title>
			<para>On many systems, <command>/root</command><indexterm><primary>/root</primary></indexterm> is the default location for the root user's personal data and profile. If it does not exist by default, then some administrators create it. </para>
		</section>
		<section><title>/sbin system binaries</title>
			<para>Similar to /bin, but mainly for booting and for tools to configure the system. A lot of the system binaries will require root privileges for certain tasks. You will also find a <command>/sbin</command><indexterm><primary>/sbin</primary></indexterm> subdirectory in other directories.</para>
		</section>
		<section><title>/srv served by your system</title>
			<para>You may find <command>/srv</command><indexterm><primary>/srv</primary></indexterm> to be empty on many systems, but not for long. The FHS suggests locating cvs, rsync, ftp and www data to this location. The FHS also approves administrative naming in /srv, like /srv/project55/ftp and /srv/sales/www. Red Hat plans to move some data that is currently located in /var to /srv. </para>
		</section>
		<section><title>/sys Linux 2.6 hot plugging</title>
			<para>The <command>/sys</command><indexterm><primary>/sys</primary></indexterm> directory is created for the Linux 2.6 kernel. Since 2.6, Linux uses <command>sysfs</command><indexterm><primary>sysfs</primary></indexterm> to support <command>usb</command><indexterm><primary>usb</primary></indexterm> and <command>IEEE 1394</command><indexterm><primary>IEEE 1394</primary></indexterm> (aka <command>FireWire</command><indexterm><primary>FireWire</primary></indexterm>) hot plug devices. See the manual pages of udev(8) (the successor of <command>devfs</command><indexterm><primary>devfs</primary></indexterm>) and hotplug(8) for more info (Or visit http://linux-hotplug.sourceforge.net/ ).</para>
		<screen>
paul@RHELv4u4:~$ ls /sys/*
/sys/block:
dm-0 fd0 hdb md0  ram1  ram11 ram13 ram15 ram3 ram5 ram7 ram9   
dm-1 hda hdc ram0 ram10 ram12 ram14 ram2  ram4 ram6 ram8 sda  

/sys/bus:
i2c  ide  pci  platform  pnp  scsi  serio  usb

/sys/class:
firmware i2c-adapter input misc netlink printer scsi_device tty  
graphics i2c-dev     mem   net  pci_bus raw     scsi_host   usb 

/sys/devices:
pci0000:00  platform  system

/sys/firmware:
acpi

/sys/module:
ac       dm_mirror    ext3      ip_conntrack    ipt_state  md5      
autofs4  dm_mod       floppy    iptable_filter  ipv6       mii        
battery  dm_snapshot  i2c_core  ip_tables       jbd        mptbase   
button   dm_zero      i2c_dev   ipt_REJECT      lp         mptfc      

/sys/power:
state
paul@RHELv4u4:~$
		</screen>
		</section>
		<section><title>/tmp for temporary files</title>
			<para>When applications (or Users) need to store temporary data, they should use <command>/tmp</command><indexterm><primary>/tmp</primary></indexterm>. /tmp might take up diskspace, then again, it might also not (as in being mounted inside RAM memory). In any case, files in /tmp can be cleared by the operating system. Never use /tmp to store data that you want to archive.</para>
		</section>
		<section><title>/usr Unix System Resources</title>
			<para>Although <command>/usr</command><indexterm><primary>/usr</primary></indexterm> is pronounced like user, never forget that it stands for Unix System Resources. The /usr hierarchy should contain <command>sharable, read only</command> data. Some people even choose to mount /usr as read only. This can be done from its own partition, or from a read only NFS share.</para>
		</section>
		<section><title>/var variable data</title>
		<para>Data that is unpredictable in size, such as log files (<command>/var/log</command><indexterm><primary>/var/log</primary></indexterm>), print spool directories (<command>/var/spool</command><indexterm><primary>/var/spool</primary></indexterm>) and various caches (<command>/var/cache</command><indexterm><primary>/var/cache</primary></indexterm>) should be located in <command>/var</command><indexterm><primary>/var</primary></indexterm>. But /var is much more than that, it contains Process ID files in <command>/var/run</command><indexterm><primary>/var/run</primary></indexterm> and temporary files that survive a reboot in <command>/var/tmp</command><indexterm><primary>/var/tmp</primary></indexterm>. There will be more examples of /var usage further in this book.</para>
		<section><title>/var/lib/rpm</title>
			<para>Red Hat Enterprise Linux keeps files pertaining to <command>RPM</command><indexterm><primary>RPM</primary></indexterm> in <command>/var/lib/rpm/</command><indexterm><primary>/var/lib/rpm</primary></indexterm>.</para>
		</section>
		<section><title>/var/spool/up2date</title>
			<para>The <command>Red Hat Update Agent</command><indexterm><primary>Red Hat Update Agent</primary></indexterm> uses files in <command>/var/spool/up2date</command><indexterm><primary>/var/spool/up2date</primary></indexterm>. This location is also used when files are downloaded from the <command>Red Hat Network</command><indexterm><primary>Red Hat Network</primary></indexterm>.</para>
		</section>
	</section>
	<section><title>Practice: file system tree</title>
		<para>1. Does the file /bin/cat exist ? What about /bin/dd and /bin/echo. What is the type of these files ?</para>
		<para>2. What is the size of the Linux kernel file(s) (vmlinu*) in /boot ?</para>
		<para>3. Create a directory ~/test. Then issue the following commands:</para>
		<screen>cd ~/test</screen>
		<screen>dd if=/dev/zero of=zeroes.txt count=1 bs=100</screen>
		<screen>od zeroes.txt</screen>
		<para>dd will copy one times (count=1) a block of size 100 bytes (bs=100) from the file /dev/zero to ~/test/zeroes.txt. Can you describe the functionality of /dev/zero ?</para>
		<para>4. Now issue the following command:</para>
		<screen>dd if=/dev/random of=random.txt count=1 bs=100 ; od random.txt</screen>
		<para>dd will copy one times (count=1) a block of size 100 bytes (bs=100) from the file /dev/random to ~/test/random.txt. Can you describe the functionality of /dev/random ?</para>
		<para>5. Issue the following two commands, and look at the first character of each output line.</para>
		<screen>ls -l /dev/sd* /dev/hd*</screen>
		<screen>ls -l /dev/tty* /dev/input/mou*</screen>
		<para>The first ls will show block(b) devices, the second ls shows character(c) devices. Can you tell the difference between block and character devices ?</para>
		<para>6. Use cat to display /etc/hosts and /etc/resolv.conf. What is your idea about the purpose of these files ?</para>
		<para>7. Are there any files in /etc/skel/ ? Check also for hidden files.</para>
		<para>8. Display /proc/cpuinfo. On what architecture is your Linux running ?</para>
		<para>9. Display /proc/interrupts. What is the size of this file ? Where is this file stored ?</para>
		<para>10. Can you enter the /root directory ? Are there (hidden) files ?</para>
		<para>11. Are the binaries ifconfig, fdisk, parted, shutdown and grub-install present in /sbin ? Why are these files in /sbin and not in /bin ?</para>
		<para>12. Is /var/log a file or a directory ? What about /var/spool ?</para>
		<para>13. Open two command prompts (Ctrl-Shift-T in gnome-terminal) or terminals (Ctrl-Alt-F1, Ctrl-Alt-F2, ...) and issue the <command>who am i</command> in both. The try to echo a word from one terminal to the other.</para>
		<para>14. Read the man page of <command>random</command> and explain the difference between <command>/dev/random</command> and <command>/dev/urandom</command><indexterm><primary>/dev/urandom</primary></indexterm>.</para>
		<para></para>
		<para></para>
	</section>
	<section><title>Solutions: file system tree</title>
		<para>1. Does the file /bin/cat exist ? What about /bin/dd and /bin/echo. What is the type of these files ?</para>
		<para>ls /bin/cat</para>
		<para>ls /bin/dd</para>
		<para>ls /bin/echo</para>
		<para>2. What is the size of the Linux kernel file(s) (vmlinu*) in /boot ?</para>
		<para>ls -h /boot/vm*</para>
		<para>3. Create a directory ~/test. Then issue the following commands:</para>
		<screen>cd ~/test</screen>
		<screen>dd if=/dev/zero of=zeroes.txt count=1 bs=100</screen>
		<screen>od zeroes.txt</screen>
		<para>dd will copy one times (count=1) a block of size 100 bytes (bs=100) from the file /dev/zero to ~/test/zeroes.txt. Can you describe the functionality of /dev/zero ?</para>
		<para><command>/dev/zero</command><indexterm><primary>/dev/zero</primary></indexterm> is a Linux special device. It can be considered a source of zeroes. You cannot sent something to /dev/zero, but you can read zeroes from it.</para>
		<para>4. Now issue the following command:</para>
		<screen>dd if=/dev/random of=random.txt count=1 bs=100 ; od random.txt</screen>
		<para>dd will copy one times (count=1) a block of size 100 bytes (bs=100) from the file /dev/random to ~/test/random.txt. Can you describe the functionality of /dev/random ?</para>
		<para><command>/dev/random</command><indexterm><primary>/dev/random</primary></indexterm> acts as a <command>random number generator</command><indexterm><primary>random number generator</primary></indexterm> on your Linux machine.</para>
		<para></para>
		<para>5. Issue the following two commands, and look at the first character of each output line.</para>
		<screen>ls -l /dev/sd* /dev/hd*</screen>
		<screen>ls -l /dev/tty* /dev/input/mou*</screen>
		<para>The first ls will show block(b) devices, the second ls shows character(c) devices. Can you tell the difference between block and character devices ?</para>
		<para>Block devices are always written to (or read from) in blocks. For hard disks, blocks of 512 bytes are common. Character devices act as a stream of characters (or bytes). Mouse and keyboard are typical character devices.</para>
		<para>6. Use cat to display /etc/hosts and /etc/resolv.conf. What is your idea about the purpose of these files ?</para>
		<para><command>/etc/hosts</command><indexterm><primary>/etc/hosts</primary></indexterm> contains hostnames with their ip-address, and <command>/etc/resolv.conf</command><indexterm><primary>/etc/resolv.conf</primary></indexterm> should contain the ip-address of a DNS name server.</para>
		<para>7. Are there any files in /etc/skel/ ? Check also for hidden files.</para>
		<para>Issue "ls -al /etc/skel/". Yes, there should be hidden files there.</para>
		<para>8. Display /proc/cpuinfo. On what architecture is your Linux running ?</para>
		<para>The file should contain at least one line with Intel Pentium or other cpu.</para>
		<para>9. Display /proc/interrupts. What is the size of this file ? Where is this file stored ?</para>
		<para>The size is zero, yet the file contains data. It is not stored anywhere because /proc is a virtual file system that allows you to talk with the kernel. (If you answered "stored in RAM-memory, that is also correct...).</para>
		<para>10. Can you enter the /root directory ? Are there (hidden) files ?</para>
		<para>Try "cd /root". Yes there are (hidden) files there.</para>
		<para>11. Are the binaries ifconfig, fdisk, parted, shutdown and grub-install present in /sbin ? Why are these files in /sbin and not in /bin ?</para>
		<para>Because those files are only meant for system administrators.</para>
		<para>12. Is /var/log a file or a directory ? What about /var/spool ?</para>
		<para>Both are directories.</para>
		<para>13. Open two command prompts (Ctrl-Shift-T in gnome-terminal) or terminals (Ctrl-Alt-F1, Ctrl-Alt-F2, ...) and issue the <command>who am i</command> in both. The try to echo a word from one terminal to the other.</para>
		<screen>tty-terminal: echo Hello > /dev/tty1</screen>
		<screen>pts-terminal: echo Hello > /dev/pts/1</screen>
		<para>14. Read the man page of <command>random</command> and explain the difference between <command>/dev/random</command> and <command>/dev/urandom</command><indexterm><primary>/dev/urandom</primary></indexterm>.</para>
		<screen>man 4 random</screen>
		<para></para>
		<para></para>
		<para></para>
	</section>
</section>
