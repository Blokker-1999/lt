<?hard-pagebreak?>
	<section><title>What is DNS ?</title>
		<para>DNS is a service on a tcp/ip network that enables clients to translate names into ip-addresses. DNS is much more than that, but let's keep it simple for now.</para>
		<para>When you use a browser to go to a website, then you type the name of that website in the url bar. But for your computer to actually communicate with the web server hosting said website, your computer needs the ip-address of that web server. That is where DNS comes in.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_01_what_is_dns.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
		<para>In wireshark you can use the <command>dns</command> filter to see this traffic.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_01_what_is_dns.ws.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
	<section><title>forward and reverse lookup queries</title>
		<para>The question a client asks a dns server is called a <command>query</command>. When a client queries for an ip-address, this is called a <command>forward lookup query</command> (as seen in the picture above).</para>
		<para>The reverse, a query for the name of a host, is called a <command>reverse lookup query</command>.</para>
		<para>Below a picture of a <command>reverse lookup query</command>.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_02_reverse.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
		<para>Here is a screenshot of a <command>reverse lookup query</command> in <command>nslookup</command>.</para>
		<screen>paul@ubu1010:~$ nslookup 
> set type=PTR
> 178.63.30.100
Server:		212.71.8.10
Address:	212.71.8.10#53

Non-authoritative answer:
100.30.63.178.in-addr.arpa	name = antares.ginsys.net.</screen>
		<para>This is what a reverse lookup looks like when sniffing with wireshark.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_02_reverse.ws.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
	<section><title>/etc/resolv.conf</title>
		<para>A client computer needs to know the ip-address of the <command>dns server</command> to be able to send queries to it. This is either provided by a <command>dhcp server</command> or manually entered.</para>
		<para>Linux clients keep this information in <command>/etc/resolv.conf</command>.</para>
		<screen>paul@ubu1010:~$ cat /etc/resolv.conf 
nameserver 212.71.8.10</screen>
	</section>
<?hard-pagebreak?>
	<section><title>DNS namespace</title>
		<para>The <command>dns namespace</command> is hierarchical tree structure, with the <command>root servers</command> (aka dot-servers) at the top. The <command>root servers</command><indexterm><primary>root(DNS)</primary></indexterm> are usually represented by a dot.</para>
		<para>Below the <command>root-servers</command> are the <command>Top Level Domains</command> or TLD's.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_03_namespace_tld.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
		<para>There are more TLD's than shown in the picture. Currently about 200 countries have a TLD. And there are several general TLD's like .com, .edu, .org, .gov, .net, .mil, .int and more recently also .aero, .info, .museum, ...</para>
	</section>
	<section><title>root servers</title>
		<para>There are thirteen <command>root servers</command> on the internet, they are named A to M. Journalists often refer to these servers as <command>the master servers of the internet</command>, because if these servers go down, then nobody can (use names to) connect to websites.</para>
		<para>The root servers are not thirteen physical machines, they are many more. For example the F root server (http://f.root-servers.org) consists of 46 physical machines that all behave as one (using anycast). More information at http://root-servers.org and http://en.wikipedia.org/wiki/Root_nameserver.</para>
	</section>
<?hard-pagebreak?>
	<section><title>top level domains (TLD)</title>
		<para>Below the root level are the <command>top level domains</command><indexterm><primary>top level domain</primary></indexterm> or <command>TLD's</command><indexterm><primary>TLD</primary></indexterm>. Originally there were only seven defined:</para>
<table frame='all'><title>The first TLD's</title>
<?dbfo table-width="90%" ?>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="1*" align="center"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<colspec colname='c3' colwidth="6*" align="left"/>
<thead>
<row>
  <entry>year</entry>
  <entry>TLD</entry>
  <entry>purpose</entry>
</row>
</thead>
<tbody>
<row>
  <entry>1985</entry>
  <entry>.arpa</entry>
  <entry>Reverse lookup via in-addr.arpa</entry>
</row>
<row>
  <entry>1985</entry>
  <entry>.com</entry>
  <entry>Commercial Organizations</entry>
</row>
<row>
  <entry>1985</entry>
  <entry>.edu</entry>
  <entry>US Educational Institutions</entry>
</row>
<row>
  <entry>1985</entry>
  <entry>.gov</entry>
  <entry>US Government Institutions</entry>
</row>
<row>
  <entry>1985</entry>
  <entry>.mil</entry>
  <entry>US Military</entry>
</row>
<row>
  <entry>1985</entry>
  <entry>.net</entry>
  <entry>Internet Service Providers, Internet Infrastructure</entry>
</row>
<row>
  <entry>1985</entry>
  <entry>.org</entry>
  <entry>Non profit Organizations</entry>
</row>
<row>
  <entry>1988</entry>
  <entry>.int</entry>
  <entry>International Treaties like nato.int</entry>
</row>
</tbody>
</tgroup>
</table>
		<para>Country TLD's were defined for individual countries, like <command>.uk</command> in 1985 for Great Britain (yes really), <command>.be</command> for Belgium in 1988 and <command>.fr</command> for France in 1986. See RFC 1591 for more info.</para>
		<para>In 1998 seven new general purpose TLD's where chosen, they became active in the 21st century.</para>
<table frame='all'><title>new general purpose TLD's</title>
<?dbfo table-width="90%" ?>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1' colwidth="1*" align="center"/>
<colspec colname='c2' colwidth="1*" align="center"/>
<colspec colname='c3' colwidth="6*" align="left"/>
<thead>
<row>
  <entry>year</entry>
  <entry>TLD</entry>
  <entry>purpose</entry>
</row>
</thead>
<tbody>
<row>
  <entry>2002</entry>
  <entry>.aero</entry>
  <entry>aviation related</entry>
</row>
<row>
  <entry>2001</entry>
  <entry>.biz</entry>
  <entry>businesses</entry>
</row>
<row>
  <entry>2001</entry>
  <entry>.coop</entry>
  <entry>for co-operatives</entry>
</row>
<row>
  <entry>2001</entry>
  <entry>.info</entry>
  <entry>informative internet resources</entry>
</row>
<row>
  <entry>2001</entry>
  <entry>.museum</entry>
  <entry>for museums</entry>
</row>
<row>
  <entry>2001</entry>
  <entry>.name</entry>
  <entry>for all kinds of names, pseudonyms and labels...</entry>
</row>
<row>
  <entry>2004</entry>
  <entry>.pro</entry>
  <entry>for professionals</entry>
</row>
</tbody>
</tgroup>
</table>
		<para>Many people were surprised by the choices, claiming not much use for them and wanting a separate <command>.xxx</command> domain (introduced in 2011) for adult content, and <command>.kidz</command> a save haven for children. In the meantime more useless TLD's were create like <command>.travel</command> (for travel agents) and <command>.tel</command> (for internet communications) and <command>.jobs</command> (for jobs sites).</para>
	</section>
<?hard-pagebreak?>
	<section><title>DNS domains</title>
		<para>One level below the <command>top level domains</command> are the <command>domains</command><indexterm><primary>domain(DNS)</primary></indexterm>. Domains can have subdomains (also called child domains).</para>
		<para>This picture shows <command>dns domains</command> like google.com, chess.com, linux-training.be (there are millions more).</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_03_namespace_domains.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
		<para>DNS domains are registered at the TLD servers, the TLD servers are registered at the <command>dot servers</command>.</para>
	</section>
	<section><title>fully qualified domain name</title>
		<para>The <command>fully qualified domain name</command><indexterm><primary>fully qualified domain name</primary></indexterm> or <command>FQDN</command><indexterm><primary>FQDN</primary></indexterm> is the combination of the <command>hostname</command> of a machine appended with its <command>domain name</command>.</para>
		<para>If for example a system is called <command>wolf</command> and it is in the domain <command>linux-training.be</command>, then the FQDN of this system is <command>wolf.linux-training.be</command>.</para>
	</section>
	<section><title>hostname and domainname commands</title>
		<para>On Linux systems you can use the <command>hostname</command> and <command>domainname</command> commands to verify this information.</para>
		<screen>paul@shared-010:~$ hostname 
shared-010
paul@shared-010:~$ hostname --fqdn
shared-010.openminds.be</screen>
	</section>
<?hard-pagebreak?>
	<section><title>zones and records</title>
		<para>A <command>zone</command> (aka a <command>zone of authority</command>) is a portion of the DNS tree. The picture below represents zones as blue ovals. Some zones will contain only one <command>dns domain</command> while others might have a whole tree of domains.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_04_zones.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
		<para>In a zone are records, also called <command>resource records</command>. We will list some of those records here, and look at them in more detail later.</para>
		<section><title>A record</title>
			<para>The <command>A record</command><indexterm><primary>A (DNS record)</primary></indexterm>, which is also called a <command>host record</command><indexterm><primary>host (DNS record)</primary></indexterm> contains the ipv4-address of a computer. When a DNS client queries a DNS server for an A record, then the DNS server will resolve the hostname in the query to an ip-address. An <command>AAAA record</command><indexterm><primary>AAAA (DNS record)</primary></indexterm> is similar but contains an ipv6 address instead of ipv4.</para>
		</section>
		<section><title>PTR record</title>
			<para>A <command>PTR record</command><indexterm><primary>PTR (DNS record)</primary></indexterm> is the reverse of an A record. It contains the name of a computer and can be used to resolve an ip-address to a hostname.</para>
		</section>
		<section><title>NS record</title>
			<para>A <command>NS record</command><indexterm><primary>NS (DNS record)</primary></indexterm> or <command>nameserver record</command> is a record that points to a DNS name server (in this zone). You can list all your name servers for your DNS zone in distinct NS records.</para>
		</section>
		<section><title>glue A record</title>
			<para>An A record that maps the name of an NS record to an ip address is said to be a <command>glue record</command>.</para>
		</section>
		<section><title>SOA record</title>
			<para>The SOA record of a zone contains meta information about the zone itself. The contents of the SOA record is explained in detail in the section about zone transfers. There is exactly one SOA record for each zone.</para>
		</section>
		<section><title>CNAME record</title>
			<para>A <command>CNAME record</command><indexterm><primary>CNAME (DNS record)</primary></indexterm> maps a hostname to a hostname, creating effectively an alias for an existing hostname. The name of the mail server is often aliased to <command>mail</command> or <command>smtp</command>, and the name of a web server to <command>www</command>.</para>
		</section>
		<section><title>MX record</title>
			<para>The <command>MX</command><indexterm><primary>MX (DNS record)</primary></indexterm> record points to an <command>smtp server</command>. When you send an email to another domain, then your mail server will need the MX record of the target domain's mail server.</para>
		</section>
	</section>
<?hard-pagebreak?>
	<section><title>caching only server</title>
		<para>A DNS server that is set up without its own zone, but that is connected to other name servers and caches the queries is called a <command>caching only name server</command><indexterm><primary>cahing only name server</primary></indexterm>. Caching only name servers do not have a <command>zone database</command> with resource records. Instead they connect to other name servers and cache that information.</para>
		<para>There are two kinds of caching only name servers. Those with a <command>forwarder</command>, and those without.</para>
	<section><title>caching only server with forwarder</title>
		<para>A <command>caching only server</command> with a <command>forwarder</command> is a DNS server that will get all its information from the <command>forwarder</command>. The <command>forwarder</command> can be the DNS server of an ISP.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_05_forwarder.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
		<para>This picture shows a DNS server on the company LAN that has set the DNS server from their ISP as a forwarder. If the ip address of the ISP DNS server is 212.71.8.10, then the following lines would occur in the <command>named.conf</command> file of the company DNS server:</para>
<screen>forwarders {
 	212.71.8.10;
 };</screen>
	</section>
<?hard-pagebreak?>
	<section><title>caching only server without forwarder</title>
		<para>A caching only server without forwarder will have to get information elsewhere. When it receives a query from a client, then it will consult one of the root servers. The root server will refer it to a TLD server, which will refer it to another dns server. That last server might know the answer to the query, or may refer to yet another dns server. In the end, our hard working dns server will find an answer and report this back to the client. </para>
		<para>In the picture below, the clients asks for the ip address of linux-training.be. Our caching only server will contact the root server, and be refered to the .be server. It will then contact the .be server and be refered to one of the name servers of Openminds. One of these name servers (in this cas ns1.openminds.be) will answer the query with the ip-address of linux-training.be. When our caching only server reports this to the client, then the client can connect to this website.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_06_caching_only.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
	<section><title>iterative or recursive query</title>
		<para>A <command>recursive query</command><indexterm><primary>recursive query</primary></indexterm> is a DNS query where the client that is submitting the query expects a complete answer (Like the fat red arrow above going from the Macbook to the DNS server). An <command>iterative query</command><indexterm><primary>iterative query</primary></indexterm> is a DNS query where the client does not expect a complete answer (the three black arrows originating from the DNS server in the picture above). Iterative queries usually take place between name servers. The root name servers do not respond to recursive queries.</para>
	</section>
	</section>
<?hard-pagebreak?>
	<section><title>primary and secondary</title>
		<para>A DNS server that is controlling a zone, is said to be the <command>authoritative</command> DNS server for that zone. Remember that a <command>zone</command> is a collection of <command>resource records</command>.</para>
		<para>When you set up the first <command>authoritative</command> dns server for a zone, the this is called the <command>primary dns server</command>. This server will have a readable and writable copy of the <command>zone database</command>. For reasons of fault tolerance, performance or load balancing you may decide to set up another dns server with authority over that zone. This is called a <command>secondary</command> dns server.</para>
	</section>
	<section><title>master and slave</title>
		<para>When adding a <command>secondary DNS server</command><indexterm><primary>secondary server (DNS)</primary></indexterm> to a zone, then you will configure this server as a <command>slave server</command><indexterm><primary>slave server (DNS)</primary></indexterm> to the <command>primary server</command><indexterm><primary>primary server (DNS)</primary></indexterm>. The primary server then becomes the <command>master server</command><indexterm><primary>master server (DNS)</primary></indexterm> of the slave server.</para>
		<para>Often the primary DNS server is the master server of all slaves. Sometimes a slave server is master server for a second line slave server. In the picture below ns1 is the primary dns server and ns2, ns3 and ns4 are secondaries. The master for slaves ns2 and ns3 is ns1, but the master for ns4 is ns3.</para>
		<mediaobject><imageobject><imagedata fileref="images/dns_07_primary_master.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
<?hard-pagebreak?>
	<section><title>zone transfers</title>
		<para>The slave server receives a copy of the zone database using a <command>zone transfer</command><indexterm><primary>zone transfer (DNS)</primary></indexterm>. Zone transfers are requested by the slave servers at regular intervals. Those intervals are defined in the <command>SOA record</command><indexterm><primary>SOA (DNS record)</primary></indexterm>.</para>
		<para>The SOA record contains a <command>refresh</command> value. If this is set to 30 minutes, then the slave server will request a copy of the zone file every 30 minutes. There is also a <command>retry</command> value. The retry value is used when the master server did not reply to the last zone transfer request. The value for <command>expiry time</command> says how long the slave server will answer to queries, without receiving a zone update.</para>
		<para>Zone transfers only occur when the zone database was updated (meaning when one or more resource records were added, removed or changed on the master server). The slave server will compare the <command>serial number</command> of its own copy of the SOA record with the serial number of its master's SOA record. When both serial numbers are the same, then no update is needed (because no records were added, removed or deleted). When the slave has a lower serial number than its master, then a zone transfer is requested.</para>
	</section>
	<section><title>full or incremental zone transfers</title>
		<para>When a zone tranfer occurs, this can be either a full zone transfer or an incremental zone transfer. The decision depends on the size of the transfer that is needed to completely update the zone on the slave server. An incremental zone transfer is prefered when the total size of changes is smaller than the size of the zone database. Full zone transfers use the <command>axfr</command><indexterm><primary>axfr</primary></indexterm> protocol, incremental zone transfer use the <command>ixfr</command><indexterm><primary>ixfr</primary></indexterm> protocol. </para>
	</section>
	<section><title>DNS cache</title>
		<para>DNS is a caching protocol. When a client queries its local DNS server, and the local DNS server is not authoritative for the query, then this server will go looking for an authoritative name server in the DNS tree. The local name server will first query a root server, then a TLD server and then a domain server. When the local name server resolves the query, then it will relay this information to the client that submitted the query, and it will also keep a copy of these queries in its cache. So when a(nother) client submits the same query to this name server, then it will retrieve this information form its cache.</para>
		<para>For example, a client queries for the A record on www.linux-training.be to its local server. This is the first query ever received by this local server. The local server checks that it is not authoritative for the linux-training.be domain, nor for the .be TLD, and it is also not a root server. So the local server will use the root hints to send an <command>iterative</command> query to a root server. The root server will reply with a reference to the server that is authoritative for the .be domain (root DNS servers do not resolve fqdn's, and root servers do not respond to recursive queries). The local server will then sent an iterative query to the authoritative server for the .be TLD. This server will respond with a reference to the name server that is authoritative for the linux-training.be domain. The local server will then sent the query for www.linux-training.be to the authoritative server (or one of its slave servers) for the linux-training.be domain. When the local server receives the ip-address for www.linux-training.be, then it will provide this information to the client that submitted this query. Besides caching the A record for www.linux-training.be, the local server will also cache the NS and A record for the linux-training.be name server and the .be name server.</para>
	</section>
<?hard-pagebreak?>
<section><title>Practice: caching only DNS server</title>
	<para>1a. installing DNS software on Debian/Ubuntu</para>
	<screen>root@ubu1010srv:~# dpkg -l | grep bind9
ii bind9-host  1:9.7.1.dfsg.P2-2ubuntu0.2 Version of 'host' bundled with BIND 9.X
ii libbind9-60 1:9.7.1.dfsg.P2-2ubuntu0.2 BIND9 Shared Library used by BIND
root@ubu1010srv:~# aptitude install bind9
The following NEW packages will be installed:
  bind9 bind9utils{a} 
0 packages upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
Need to get 433kB of archives. After unpacking 1,352kB will be used.
Do you want to continue? [Y/n/?] 

... output truncated ...

 * Starting domain name service... bind9                                 [ OK ] 
                                         
root@ubu1010srv:~# dpkg -l | grep bind9
ii bind9       1:9.7.1.dfsg.P2-2ubuntu0.2 Internet Domain Name Server
ii bind9-host  1:9.7.1.dfsg.P2-2ubuntu0.2 Version of 'host' bundled with BIND 9.X
ii bind9utils  1:9.7.1.dfsg.P2-2ubuntu0.2 Utilities for BIND
ii libbind9-60 1:9.7.1.dfsg.P2-2ubuntu0.2 BIND9 Shared Library used by BIND
root@ubu1010srv:~# 
</screen>
	<para>1b. installing DNS software on RHEL/Fedora</para>
	<screen>[root@fedora14 ~]# rpm -qa | grep bind
samba-winbind-clients-3.5.8-74.fc14.i686
bind-utils-9.7.3-1.fc14.i686
PackageKit-device-rebind-0.6.12-2.fc14.i686
bind-libs-9.7.3-1.fc14.i686
[root@fedora14 ~]# yum install bind
Loaded plugins: langpacks, presto, refresh-packagekit
Adding en_US to language list
Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package bind.i686 32:9.7.3-1.fc14 set to be installed
--> Finished Dependency Resolution

...output truncated

Running Transaction
  Installing     : 32:bind-9.7.3-1.fc14.i686                   1/1

Installed:
  bind.i686 32:9.7.3-1.fc14

Complete!
[root@fedora14 ~]# rpm -qa | grep bind
samba-winbind-clients-3.5.8-74.fc14.i686
bind-utils-9.7.3-1.fc14.i686
PackageKit-device-rebind-0.6.12-2.fc14.i686
bind-libs-9.7.3-1.fc14.i686
bind-9.7.3-1.fc14.i686
[root@fedora14 ~]# </screen>
	<para>2. Discover the default configuration files. Can you define the purpose of each file ?</para>
	<screen></screen>
	<para>2a. On Fedora:</para>
	<screen>[root@fedora14 ~]# ls -ld /etc/named*
drwxr-x---. 2 root named 4096 Feb 18 16:07 /etc/named
-rw-r-----. 1 root named 1008 Jul 19  2010 /etc/named.conf
-rw-r--r--. 1 root named 2544 Feb 18 16:07 /etc/named.iscdlv.key
-rw-r-----. 1 root named  931 Jun 21  2007 /etc/named.rfc1912.zones
-rw-r--r--. 1 root named  487 Jul 19  2010 /etc/named.root.key
[root@fedora14 ~]# ls -l /var/named/
total 28
drwxrwx---. 2 named named 4096 Feb 18 16:07 data
drwxrwx---. 2 named named 4096 Feb 18 16:07 dynamic
-rw-r-----. 1 root  named 1892 Feb 18  2008 named.ca
-rw-r-----. 1 root  named  152 Dec 15  2009 named.empty
-rw-r-----. 1 root  named  152 Jun 21  2007 named.localhost
-rw-r-----. 1 root  named  168 Dec 15  2009 named.loopback
drwxrwx---. 2 named named 4096 Feb 18 16:07 slaves</screen>
	<para>2. On Ubuntu:</para>
	<screen>root@ubu1010srv:~# ls -l /etc/bind
total 52
-rw-r--r-- 1 root root  601 2011-02-23 16:22 bind.keys
-rw-r--r-- 1 root root  237 2011-02-23 16:22 db.0
-rw-r--r-- 1 root root  271 2011-02-23 16:22 db.127
-rw-r--r-- 1 root root  237 2011-02-23 16:22 db.255
-rw-r--r-- 1 root root  353 2011-02-23 16:22 db.empty
-rw-r--r-- 1 root root  270 2011-02-23 16:22 db.local
-rw-r--r-- 1 root root 2994 2011-02-23 16:22 db.root
-rw-r--r-- 1 root bind  463 2011-02-23 16:22 named.conf
-rw-r--r-- 1 root bind  490 2011-02-23 16:22 named.conf.default-zones
-rw-r--r-- 1 root bind  165 2011-02-23 16:22 named.conf.local
-rw-r--r-- 1 root bind  572 2011-02-23 16:22 named.conf.options
-rw-r----- 1 bind bind   77 2011-05-15 17:52 rndc.key
-rw-r--r-- 1 root root 1317 2011-02-23 16:22 zones.rfc1918</screen>
	<para>3. Setup caching only dns server. This is normally the default setup. A caching-only name server will look up names for you and cache them. Most tutorials will tell you to add a <command>forwarder</command>, so we first try without this!</para>
	<screen>root@ubu1010srv:/var/log# nslookup 
> server 192.168.1.37
Default server: 192.168.1.37
Address: 192.168.1.37#53
> 
> slashdot.org
Server:		192.168.1.37
Address:	192.168.1.37#53

Non-authoritative answer:
Name:	slashdot.org
Address: 216.34.181.45</screen>
	<para>Hey this seems to work without a forwarder. Using a sniffer you can find out what really happens (since the server is not using a cache, not using your dns-server (from /etc/resolv.conf). So where is this information coming from, and what can you learn from sniffing this dns traffic ?</para>
	<para>4. Explain in detail what happens when you enable a caching only dns server without forwarder. This wireshark screenshot can help, but you learn more by sniffing the traffic yourself! I will choose two volunteers to explain this in front of the class.</para>
	<mediaobject><imageobject><imagedata fileref="images/wireshark_org_server.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
</section>
<?hard-pagebreak?>
<section><title>Practice: caching only with forwarder</title>
	<para>5. Add a local dns-server as a forwarder (at my home this is 192.168.1.1, probably different ip in a classroom!).</para>
	<screen>root@ubu1010srv:~# grep -A2 forwarder /etc/bind/named.conf.options| tail -3
forwarders {
 	192.168.1.1;
 };
root@ubu1010srv:~# /etc/init.d/bind9 restart
 * Stopping domain name service... bind9                   [ OK ] 
 * Starting domain name service... bind9                   [ OK ] 
root@ubu1010srv:~# </screen>
	<para>6. Explain the purpose of adding the forwarder. What is our DNS server doing when it receives a query ? Again the wireshark screenshot can help, you should see something similar.</para>
	<screen>root@ubu1010srv:~# nslookup
> server
Default server: 192.168.1.4
Address: 192.168.1.4#53
> server 192.168.1.37
Default server: 192.168.1.37
Address: 192.168.1.37#53
> 
> cobbaut.be
Server:		192.168.1.37
Address:	192.168.1.37#53

Non-authoritative answer:
Name:	cobbaut.be
Address: 88.151.243.8</screen>
	<screen></screen>
	<screen></screen>
	<mediaobject><imageobject><imagedata fileref="images/dns_forwarder.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	<para>7. What happens when you query for the same domain name more than once ?</para>
	<screen></screen>
	<screen></screen>
	<screen></screen>
	<para>8. Why does it say "non-authoritative answer" ? When is a dns server authoritative ?</para>
	<screen></screen>
	<screen></screen>
	<screen></screen>
	<para>9. You can also use <command>dig</command> instead of <command>nslookup</command>.</para>
	<screen>dig @192.168.1.37 linux-training.be</screen>
	<screen></screen>
	<para>10. How can we avoid having to set the server in dig or nslookup ?</para>
	<screen>root@ubu1010srv:~# cat /etc/resolv.conf 
nameserver 127.0.0.1</screen>
	<para>11. When you use <command>dig</command> for the first time for a domain, where is the answer coming from ? And the second time ? How can you tell ?</para>
</section>
<?hard-pagebreak?>
<section><title>Practice: primary authoritative server</title>
	<para>1. Instead of only cachng the information from other servers, we will now make our server authoritative for our own domain.</para>
	<para>2. I choose the new TLD <command>.paul</command> and the domain <command>cobbaut.paul</command> and put the information in <command>/etc/bind/named.conf.local</command>.</para>
	<screen>root@ubu1010srv:/etc/bind# grep -C1 cobbaut named.conf.local 

zone "cobbaut.paul" {
	type master;
	file "/etc/bind/db.cobbaut.paul";
};</screen>
	<para>3. Also add a zone database file, similar to this one (add some A records for testing).</para>
	<screen>root@ubu1010srv:/etc/bind# cat db.cobbaut.paul 
;
; BIND data file for domain cobbaut.paul
;
$TTL	604800
@	IN	SOA	ns.cobbaut.paul. root.cobbaut.paul. (
                       20110516         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
@               IN      NS      ns.cobbaut.paul.
ns              IN      A       192.168.1.37
ubu1010srv      IN      A       192.168.1.37
anya            IN      A       192.168.1.1
mac             IN      A       192.168.1.30
root@ubu1010srv:/etc/bind#</screen>
	<para>4. Restart the DNS server and check your zone in the error log.</para>
	<screen>root@ubu1010srv:/etc/bind# grep cobbaut /var/log/daemon.log
May 16 00:33:49 ubu1010srv named[25449]: zone cobbaut.paul/IN: loaded serial 20110516</screen>
	<para>5. Use dig or nslookup (or even ping) to test your A records.</para>
	<screen>root@ubu1010srv:/etc/bind# ping mac.cobbaut.paul
PING mac.cobbaut.paul (192.168.1.30) 56(84) bytes of data.
64 bytes from 192.168.1.30: icmp_req=1 ttl=64 time=2.28 ms
64 bytes from 192.168.1.30: icmp_req=1 ttl=64 time=2.31 ms (DUP!)
^C
--- mac.cobbaut.paul ping statistics ---
1 packets transmitted, 1 received, +1 duplicates, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 2.282/2.296/2.310/0.014 ms
root@ubu1010srv:/etc/bind# dig anya.cobbaut.paul

; &#060;&#060;>> DiG 9.7.1-P2 &#060;&#060;>> anya.cobbaut.paul
;; global options: +cmd
;; Got answer:
;; ->>HEADER&#060;&#060;- opcode: QUERY, status: NOERROR, id: 38237
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1

;; QUESTION SECTION:
;anya.cobbaut.paul.		IN	A

;; ANSWER SECTION:
anya.cobbaut.paul.	604800	IN	A	192.168.1.1

;; AUTHORITY SECTION:
cobbaut.paul.		604800	IN	NS	ns.cobbaut.paul.

;; ADDITIONAL SECTION:
ns.cobbaut.paul.	604800	IN	A	192.168.1.37

;; Query time: 1 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Mon May 16 00:38:22 2011
;; MSG SIZE  rcvd: 84

root@ubu1010srv:/etc/bind# </screen>
	<para>6. Our primary server appears to be up and running. Note the information here:</para>
	<screen>server os : Ubuntu 10.10
ip : 192.168.1.37
domain name: cobbaut.paul
server name: ns.cobbaut.paul</screen>
	<screen></screen>
</section>
<?hard-pagebreak?>
<section><title>Practice: reverse DNS</title>
	<para>1. We can add ip to name resolution to our dns-server using a reverse dns zone.</para>
	<para>2. Start by adding a .arpa zone to /etc/bind/named.conf.local like this (we set notify to no to avoid sending of notify messages to other name servers):</para>
	<screen>root@ubu1010srv:/etc/bind# grep -A4 arpa named.conf.local 
zone "1.168.192.in-addr.arpa" {
	type master;
	notify no;
	file "/etc/bind/db.192";
};</screen>
	<para>3. Also create a zone database file for this reverse lookup zone.</para>
	<screen>root@ubu1010srv:/etc/bind# cat db.192 
;
; BIND reverse data file for 192.168.1.0/24 network
;
$TTL	604800
@	IN	SOA	ns.cobbaut.paul root.cobbaut.paul. (
			20110516	; Serial
			 604800		; Refresh
			  86400		; Retry
			2419200		; Expire
			 604800 )	; Negative Cache TTL
;
@	IN	NS	ns.
37	IN	PTR	ns.cobbaut.paul.
1	IN	PTR	anya.cobbaut.paul.
30	IN	PTR	mac.cobbaut.paul.
root@ubu1010srv:/etc/bind# </screen>
	<para>4. Test with nslookup or dig:</para>
	<screen>root@ubu1010srv:/etc/bind# dig 1.168.192.in-addr.arpa AXFR</screen>
</section>
<?hard-pagebreak?>
<section><title>Practice: a DNS slave server</title>
	<para>1. A slave server transfers zone information over the network from a master server (a slave can also be a master). A primary server maintains zone records in its local file system. As an exercise, and to verify the work of all students, set up a slave server of all the master servers in the classroom.</para>
	<para>2. Before configuring the slave server, we have to allow transfers from our zone to this server. Remember that this is not very secure since transfers are in clear text and limited to an ip address. This example follows our demo from above. The ip of my slave server is 192.168.1.31, yours is probably different.</para>
	<screen>root@ubu1010srv:/etc/bind# grep -A2 cobbaut named.conf.local 
zone "cobbaut.paul" {
	type master;
	file "/etc/bind/db.cobbaut.paul";
	allow-transfer { 192.168.1.31; };
};
root@ubu1010srv:/etc/bind#</screen>
	<para>3. My slave server is running Fedora 14. Bind configuration files are only a little different. Below the addition of a slave zone to this server, note the ip address (192.168.1.37) of my master dns server for the cobbaut.paul zone.</para>
	<screen>[root@fedora14 etc]# grep cobbaut -A2 named.conf 
zone "cobbaut.paul" {
	type slave;
	file "/var/named/slaves/db.cobbaut.paul";
	masters { 192.168.1.37; };
};
[root@fedora14 etc]#</screen>
	<para>4. You might need to add the ip-address of the server on Fedora to allow queries other than from localhost.</para>
	<screen>[root@fedora14 etc]# grep 127 named.conf 
	listen-on port 53 { 127.0.0.1; 192.168.1.31; };</screen>
	<para>5. Restarting bind on the slave server should transfer the zone database file:</para>
	<screen>[root@fedora14 etc]# ls -l /var/named/slaves/
total 4
-rw-r--r--. 1 named named 387 May 16 03:23 db.cobbaut.paul
[root@fedora14 etc]#</screen>
</section>
<?hard-pagebreak?>
<section><title>DNS History</title>
	<para>Today, <command>DNS</command><indexterm><primary>DNS</primary></indexterm> or <command>Domain Name System</command><indexterm><primary>domain name system (DNS)</primary></indexterm> is a worldwide distributed hierarchical database. It's primary function is to resolve names to ip addresses, and to point to internet servers providing SMTP or LDAP services.</para>
	<para>In the seventies, only a few hundred computers were connected to the internet. To resolve names, computers had a flat file that contained a table to resolve hostnames to ip-addresses. This local file was downloaded from hosts.txt on an ftp server in Stanford.</para>
	<para>In 1984 <command>Paul Mockapetris</command><indexterm><primary>root(DNS)</primary></indexterm> created DNS, a distributed treelike hierarchical database.</para>
	<para>Today ICANN controls DNS.</para>
</section>
<section><title>forward lookup zone example</title>
	<para>The way to set up zones in /etc/named.conf is to create a zone entry with a reference to another file located in /var/named.</para>
	<para>Here is an example of such an entry in /etc/named.conf</para>
	<screen>zone "classdemo.local" IN {
	type master;
	file "classdemo.local.zone";
	allow-update { none; };
};</screen>
	<para>To create the zone file, the easy method is to copy an existing zone file (this is easier than writing from scratch).</para>
	<screen>[root@RHEL4b named]# cd /var/named/
[root@RHEL4b named]# pwd
/var/named
[root@RHEL4b named]# cp localhost.zone classdemo.local.zone
[root@RHEL4b named]#</screen>
	<para>Here is an example of a zone file.</para>
	<screen>[root@RHEL4b named]# cat classdemo.local.zone 
$TTL    86400
$ORIGIN classdemo.local.
@       IN SOA  rhel4b.classdemo.local.   admin.classdemo.local. (
                          2007083100      ; serial
                          3H              ; refresh
                          900             ; retry
                          1W              ; expiry
                          1D )            ; minimum

                IN NS           rhel4b.classdemo.local.
                IN MX     10    mail.classdemo.local.
                IN A            192.168.1.191

rhel4b          IN      A       192.168.1.191
mail            IN      A       192.168.1.191
www             IN      A       192.168.1.191
ftp             IN      A       192.168.1.191
server2         IN      A       192.168.1.1</screen>
</section>
