<section><title>Introduction to using vi</title>
	<section><title>command mode and insert mode</title>
		<para>The vi editor starts in <command>command mode</command>. In command mode, you can type commands. The commands a A i I o O will bring you into <command>insert mode</command>. In insert mode, you can type text. The escape key will bring you back to command mode. When in insert mode, vi will display <command>-- INSERT --</command> in the bottom left corner.</para>
	</section>
	<section><title>Start typing (a A i I o O)</title>
		<para>The difference between a A i I o and O is the location where you can start typing. a will append after the current character and A will append at the end of the line. i will insert before the current character and I will insert at the beginning of the line. o will put you in a new line after the current line and O will put you in a new line before the current line.</para>
	</section>
	<section><title>Replace and delete a character (r x)</title>
		<para>When in command mode (it doensn't hurt to hit the escape key more than once) you can use the x key to delete the current character. Big X key (or shift x) will delete the character left of the cursor. Also when in command mode, you can use the r key to replace one single character. The r key will bring you in insert mode for just one key press, and will return you immediately to command mode.</para>
	</section>
	<section><title>Undo and repeat(u .)</title>
		<para>When in command mode, you can undo your mistakes with u. You can do your mistakes twice with . (in other words the . will repeat your last command).</para>
	</section>
	<section><title>Cut, copy and paste a line (dd yy p P)</title>
		<para>When in command mode, dd will cut the current line. yy will copy the current line. You can paste the last copied or cut line after (p) or before (P) the current line.</para>
	</section>
	<section><title>Cut, copy and paste lines (3dd 2yy)</title>
		<para>When in command mode, before typing dd or yy, you can type a number to repeat the command a number of times. Thus, 5dd will cut 5 lines and 4yy will copy (yank) 4 lines. That last one will be noted by vi in the bottom left corner as "4 line yanked".</para>
	</section>
	<section><title>Start and end of a line (0 or &#094; and $)</title>
		<para>When in command mode, the 0 and the caret &#094; will bring you to the start of the current line, whereas the $ will put the cursor at the end of the current line. You can add 0 and $ to the d command, d0 will delete every character between the current character and the start of the line. Likewise d$ will delete everything from the current character till the end of the line. Similarly y0 and y$ will yank till start and end of the current line.</para>
	</section>
	<section><title>Join two lines (J)</title>
		<para>When in command mode, pressing J will append the next line to the current line.</para>
	</section>
	<section><title>Words (w b)</title>
		<para>When in command mode, w will jump you to the next word, and b will get you to the previous word. w and b can also be combined with d and y to copy and cut words (dw db yw yb).</para>
	</section>
	<section><title>Save (or not) and exit (:w :q :q! )</title>
		<para>Pressing the colon : will allow you to give instructions to vi. :w will write (save) the file, :q will quit un unchanged file without saving, :q! will quit vi discarding changes. :wq will save and quit and is the same as typing ZZ in command mode.</para>
	</section>
	<section><title>Searching (/ ?)</title>
		<para>When in command mode typing / will allow you to search in vi for strings (can be a regular expression). Typing /foo will do a forward search for the string foo, typing ?bar will do a backward search for bar.</para>
	</section>
	<section><title>Replace all ( &#058;1,$ s&#047;foo&#047;bar&#047;g )</title>
		<para>To replace all occurences of the string foo in bar, first switch to ex mode with &#058; . Then tell vi which lines to use, for example 1,&#036; will do the replace all from the first to the last line. You can write 1,5 to only process the first five lines. The s&#047;foo&#047;bar&#047;g will replace all occurences of foo with bar.</para>
	</section>
	<section><title>Reading files (:r :r !cmd)</title>
		<para>When in command mode, :r foo will read the file named foo, :r !foo will execute the command foo. The result will be put at the current location. Thus :r !ls will put a listing of the current directory in your textfile.</para>
	</section>
	<section><title>Setting options</title>
		<para>Some options that you can set in vim.</para>
		<screen>
:set number  ( also try :se nu )
:set nonumber
:syntax on
:syntax off
:set all  (list all options)
:set tabstop=8
:set tx   (CR/LF style endings)
:set notx
		</screen>
		<para>You can set these options (and much more) in ~/.vimrc</para>
		<screen>
paul@barry:~$ cat ~/.vimrc
set number
paul@barry:~$
		</screen>
	</section>
</section>
