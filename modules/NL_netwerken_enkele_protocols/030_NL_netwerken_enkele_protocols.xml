<?hard-pagebreak?>
<section><title>internet lagen</title>
	<para>We weten ondertussen dat het internet werkt met <command>vier lagen</command> die hun oorsprong vinden in de ontwikkeling van <command>Unix</command> en <command>tcp/ip</command> sinds 1969, en die perfect gedocumenteerd zijn in de <command>rfc's</command>. De tekening hieronder verduidelijkt de functionaliteit per laag.</para>
	<para><mediaobject><imageobject><imagedata fileref="images/4_layer_internet.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	<para>Op de bovenste laag vinden we een applicatieprotocol (in dit geval http). De web client applicatie (bijvoorbeeld Firefox of Chrome) wil communiceren met de web server software (bijvoorbeeld apache). De bovenste laag van de client communiceert dus met de bovenste laag van de server. De web client geeft een <command>http</command> instructie <command>get index.html</command> aan de web server.</para>
	<para>Op de <command>transportlaag</command> vinden we tcp, en die ziet een <command>reeks bytes</command> komen van de applicatielaag, maar heeft geen kennis over de betekenis van deze bytes. <command>tcp</command> wil deze stroom van bytes zonder fout afleveren bij <command>tcp</command> aan de andere kant, ook hier hebben we dus een communicatie tussen overeenkomstige lagen van beide computers. De opdracht van <command>tcp</command> is om deze stroom aan bytes zonder fout over te brengen naar de andere kant (de server).</para>
	<para>Op de <command>netwerklaag</command> moet <command>ip</command> een degelijke inspanning leveren om de <command>data</command> die van de transportlaag komt op het juiste adres te bezorgen. Het is mogelijk dat <command>ip</command> datagrams <command>laat vallen</command> omdat een router niet kan volgen bijvoorbeeld. <command>ip</command> geeft dus geen garantie dat packetjes de bestemming bereiken en wordt daardoor <command>onbetrouwbaar</command> genoemd.</para>
	<para>De <command>link</command> laag onderaan is verantwoordelijk voor de communicatie van link naar link (van hop naar hop), en kan bestaan uit een opeenvolging van verschillende protocols. Je kan <command>traceroute</command> gebruiken om het aantal <command>hops</command> te zien tussen je eigen computer en een bestemming op internet.</para>
</section>
<?hard-pagebreak?>
<section><title>encapsulation</title>
	<para>Elk protocol voegt een <command>header</command> toe en beschouwt al wat van de laag erboven komt als <command>data</command>. Afgebeeld ziet dat er ongeveer zo uit (niet op ware grootte).</para>
	<para><mediaobject><imageobject><imagedata fileref="images/encapsulation.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	<para>In de applicatielaag zorgt <command>http</command> voor een instructie, gebruik makende van <command>ascii</command> bijvoorbeeld, die zinvol is voor de applicatielaag aan de andere kant. Via een standaard interface geeft <command>http</command> zijn instructie door aan <command>tcp</command>.</para>
	<para>Maar <command>tcp</command> ziet enkel een stroom aan bytes, zonder interpretatie te geven aan deze bytes. Wel gaat <command>tcp</command> een header toevoegen om er voor te zorgen dat deze reeks <command>bytes</command> volledig en zonder fout (en in dezelfde volgorde) aankomt bij de transportlaag aan de andere kant.</para>
	<para>Het hele <command>segment</command> van de transportlaag komt aan bij <command>ip</command> in de netwerklaag en wordt aldaar wederom als <command>data</command> beschouwd. Zonder enige betekenis te geven aan deze data gaat <command>ip</command> proberen om deze op de bestemming te brengen (door er een <command>ip header</command> aan toe te voegen en het vervolgens via weer een standaard interface door te geven aan de linklaag).</para>
	<para>Aangekomen in de onderste laag beschouwt <command>ethernet</command> het hele <command>ip datagram</command> als <command>data</command> en voegt er vervolgens een <command>ethernet header</command> aan toe zodat het <command>frame</command> tot aan de volgende link geraakt.</para>
</section>
<?hard-pagebreak?>
<section><title>port demultiplexing</title>	
	<para>Hoe raakt het packetje bij de juiste applicatie ?</para>
	<para><mediaobject><imageobject><imagedata fileref="images/port_demultiplexing.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	<para>Een <command>frame</command> dat aankomt in een computer, wordt gecontroleerd op het juiste <command>link layer address</command> (mac adres in ethernet etc). Daarna wordt het resterende gedeelte gecontroleerd op <command>ip adres</command>. Indien het <command>destination ip address</command> anders is dan het ip adres van deze computer, dan wordt dit packetje weggegooid.</para>
	<para>Raakt het alsnog door de controle, dan wordt gekeken naar de <command>destination port</command> en aan de hand van dit poortnummer wordt beslist aan welke applicatie de bytes moeten gegeven worden.</para>
</section>
<?hard-pagebreak?>
<section><title>waar zitten de lagen ?</title>
	<para>Soms vragen studenten zich af waar deze lagen te vinden zijn in de computer, daarvoor hebben we deze tekening.</para>
	<para><mediaobject><imageobject><imagedata fileref="images/waarzittendelagen.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	<para>De bovenste laag zit in wat <command>user space</command> wordt genoemd. Dat is het gedeelte van het operating system en het geheugen waar de applicaties voor eindgebruikers zitten. Programmeurs gebruiken een <command>socket</command> om iets te doen op het netwerk, en kunnen deze aanmaken via aan <command>api</command> (Application Programming Interface).</para>
	<para>De transport en de netwerklaag zijn ook geschreven in software, maar zitten in <command>kernel space</command>. Op Unix/Linux computers maken de protocols <command>tcp</command> en <command>ip</command> deel uit van de <command>kernel</command> (als module), terwijl dit in Microsoft systemen ook als <command>driver</command> kan geprogrammeerd zijn.</para>
	<para>Als we bij de linklaag komen, dan vinden we ons frame als bytes in <command>ic's</command> op de netwerkkaart. Een <command>ic</command> is een integrated circuit (of chip). De bits van de bytes zelf zitten opgeslagen in wat men een <command>flip flop</command> noemt. Eens op de utp kabel zijn onze bytes volledig omgezet in electromagnetische straling.</para>
</section>
<?hard-pagebreak?>
<section><title>ping en arp</title>
	<para>Het <command>arp</command> protocol is een <command>layer 2</command> protocol dat een link legt tussen het <command>ip-adres</command> en het <command>mac-adres</command> van een computer. We hebben in de klas deze werking aangetoond met behulp van het <command>ping</command> commando en de <command>wireshark</command> sniffer. We hebben ook het <command>arp</command> commando uitgevoerd om de <command>arp-cache-table</command> te bekijken.</para>
	<para><mediaobject><imageobject><imagedata fileref="images/arp_ping.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
</section>
<?hard-pagebreak?>
<section><title>tcp en udp</title>
	<para>Behalve <command>tcp</command> vinden we in <command>layer 4</command> ook nog <command>udp</command>. U hebt genoteerd dat alvorens een <command>http request</command> verstuurd wordt, er eerst een <command>tcp handshake</command> plaatsvindt, maar dat er voor de <command>dns query</command> helemaal geen handshake was. Dat komt omdat <command>http</command> gebruikt maakt van <command>tcp</command> in <command>layer 4</command>, terwijl <command>dns</command> hier werkt bovenop <command>udp</command>.</para>
	<section><title>tcp</title>
		<para><command>tcp</command><indexterm><primary>tcp</primary></indexterm> staat voor <command>Transmission Control Protocol</command>. Het is een protocol dat een <command>connectie</command> opzet alvorens data te versturen. Als je zekerheid wil dat je packetjes aankomen, dan is <command>tcp</command> het aangewezen protocol. In de <command>tcp header</command> zit heel wat overhead. Als een <command>tcp packetje</command> niet aankomt, dan wordt het nogmaals verstuurd.</para>
		<para>De huidige <command>tcp</command> standaard werd vastgelegd in <command>rfc 793</command> van 1981.</para>
		<para>De <command>tcp triple handshake</command><indexterm><primary>tcp handshake</primary></indexterm> gaat steeds vooraf aan de <command>tcp</command> connectie. Dit wil zeggen dat er minstens vier packetjes over het netwerk gaan.</para>
		<mediaobject><imageobject><imagedata fileref="images/tcp_sessie.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
	<section><title>udp</title>
		<para>In tegenstelling tot <command>tcp</command> is er bij <command>udp</command><indexterm><primary>udp</primary></indexterm> geen connectie, en ook geen handshake. Men noemt <command>udp</command> een <command>connectionless</command> protocol.</para>
		<para><command>udp</command> heeft minder overhead dan <command>tcp</command> en is bijgevolg sneller voor het doorsturen van data. Maar <command>udp</command> doet geen controle of een packetje ook wel degelijk aankomt. Als een <command>udp</command> packetje zijn bestemming niet bereikt, dan ben je het kwijt.</para>
		<mediaobject><imageobject><imagedata fileref="images/udp.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	</section>
	<section><title>oefening</title>
		<para>Bedenk zelf wanneer je udp zou gebruiken, en wanneer tcp.</para>
		<para></para>
		<para>e-mail van je manager ?</para>
		<para></para>
		<para>website van een klant ?</para>
		<para></para>
		<para>live radio uitzending van Clijsters tegen Henin ?</para>
		<para></para>
		<para>dns ?</para>
		<para></para>
	</section>
</section>
<?hard-pagebreak?>
<section><title>packetjes</title>
	<para>Op het bord heb ik regelmatig 'packetjes' getekend. Technisch spreken we van een <command>ethernet frame</command> en van een <command>ip datagram</command>. Het exacte formaat (per bit of byte) van deze packetjes behoort niet tot de leerstof. Ik veronderstel hier enkel dat jullie weten dat een ethernet netwerkkaart de eerste zes bytes, zijnde het bestemmings-mac-adres vergelijkt met haar eigen mac-adres.</para>
	<para>Hieronder een <command>ethernet frame</command> met de bytes op ware grootte en enige info op de juiste positie.</para>
	<para></para>
	<mediaobject><imageobject><imagedata fileref="images/ethernet_frame.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
	<para>Omdat we toch iets moeten kennen van <command>mac-adressen</command>, <command>ip-adressen</command> en <command>poorten</command> om protocols en toestellen te begrijpen, gebruiken we onderstaande vereenvoudigde voorstelling van een <command>packetje</command> op het netwerk.</para>
	<para></para>
	<mediaobject><imageobject><imagedata fileref="images/simple_packet.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>
</section>
