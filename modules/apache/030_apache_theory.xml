<?hard-pagebreak?>
<section><title>introduction to apache</title>
	<section><title>installing on Debian</title>
		<para>This screenshot shows that there is no <command>apache</command> server installed, nor does the <command>/var/www</command> directory exist.</para>
		<screen>root@debian7:~# <command>ls -l /var/www</command>
ls: cannot access /var/www: No such file or directory
root@debian7:~# <command>dpkg -l | grep apache</command></screen>
		<para>To install <command>apache</command> on Debian:</para>
		<screen>root@debian7:~# <command>aptitude install apache2</command>
The following NEW packages will be installed:
  apache2 apache2-mpm-worker{a} apache2-utils{a} apache2.2-bin{a} apache2.2-com\
mon{a} libapr1{a} libaprutil1{a} libaprutil1-dbd-sqlite3{a} libaprutil1-ldap{a}\
 ssl-cert{a} 
0 packages upgraded, 10 newly installed, 0 to remove and 0 not upgraded.
Need to get 1,487 kB of archives. After unpacking 5,673 kB will be used.
Do you want to continue? [Y/n/?]</screen>
		<para>After installation, the same two commands as above will yield a different result:</para>
		<screen>root@debian7:~# <command>ls -l /var/www</command>
total 4
-rw-r--r-- 1 root root 177 Apr 29 11:55 index.html
root@debian7:~# <command>dpkg -l | grep apache | tr -s ' '</command>
ii apache2 2.2.22-13+deb7u1 amd64 Apache HTTP Server metapackage
ii apache2-mpm-worker 2.2.22-13+deb7u1 amd64 Apache HTTP Server - high speed th\
readed model
ii apache2-utils 2.2.22-13+deb7u1 amd64 utility programs for webservers
ii apache2.2-bin 2.2.22-13+deb7u1 amd64 Apache HTTP Server common binary files
ii apache2.2-common 2.2.22-13+deb7u1 amd64 Apache HTTP Server common files</screen>
	</section>
<?hard-pagebreak?>
	<section><title>installing on RHEL/CentOS</title>
		<para>Note that Red Hat derived distributions use <command>httpd</command> as package and process name instead of <command>apache</command>.</para>
		<para>To verify whether <command>apache</command> is installed in CentOS/RHEL:</para>
		<screen>[root@centos65 ~]# <command>rpm -q httpd</command>
package httpd is not installed
[root@centos65 ~]# <command>ls -l /var/www</command>
ls: cannot access /var/www: No such file or directory</screen>
		<para>To install apache on CentOS:</para>
		<screen>[root@centos65 ~]# <command>yum install httpd</command></screen>
		<para>After running the <command>yum install httpd</command> command, the Centos 6.5 server has apache installed and the <command>/var/www</command> directory exists.</para>
		<screen>[root@centos65 ~]# <command>rpm -q httpd</command>
httpd-2.2.15-30.el6.centos.x86_64
[root@centos65 ~]# <command>ls -l /var/www</command>
total 16
drwxr-xr-x. 2 root root 4096 Apr  3 23:57 cgi-bin
drwxr-xr-x. 3 root root 4096 May  6 13:08 error
drwxr-xr-x. 2 root root 4096 Apr  3 23:57 html
drwxr-xr-x. 3 root root 4096 May  6 13:08 icons
[root@centos65 ~]#</screen>
	</section>
<?hard-pagebreak?>
	<section><title>running apache on Debian</title>
		<para>This is how you start <command>apache2</command><indexterm><primary>apache2</primary></indexterm> on Debian.</para>
		<screen>root@debian7:~# <command>service apache2 status</command>
Apache2 is NOT running.
root@debian7:~# <command>service apache2 start</command>
Starting web server: apache2apache2: Could not reliably determine the server's \
fully qualified domain name, using 127.0.1.1 for ServerName
.
</screen>
		<para>To verify, run the <command>service apache2 status</command> command again or use <command>ps</command>.</para>
		<screen>root@debian7:~# <command>service apache2 status</command>
Apache2 is running (pid 3680).
root@debian7:~# <command>ps -C apache2</command>
  PID TTY          TIME CMD
 3680 ?        00:00:00 apache2
 3683 ?        00:00:00 apache2
 3684 ?        00:00:00 apache2
 3685 ?        00:00:00 apache2
root@debian7:~#</screen>
		<para>Or use <command>wget</command> and <command>file</command> to verify that your web server serves an html document.</para>
		<screen>root@debian7:~# <command>wget 127.0.0.1</command>
--2014-05-06 13:27:02--  http://127.0.0.1/
Connecting to 127.0.0.1:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 177 [text/html]
Saving to: `index.html'

100%[==================================================>] 177    --.-K/s   in 0s

2014-05-06 13:27:02 (15.8 MB/s) - `index.html' saved [177/177]

root@debian7:~# <command>file index.html</command>
index.html: HTML document, ASCII text
root@debian7:~#</screen>
		<para>Or verify that apache is running by opening a web browser, and browse to the ip-address of your server. An Apache test page should be shown.</para>
		<para>You can do the following to quickly avoid the 'could not reliably determine the fqdn' message when restarting apache.</para>
		<screen>root@debian7:~# <command>echo ServerName Debian7 >> /etc/apache2/apache2.conf</command>
root@debian7:~# <command>service apache2 restart</command>
Restarting web server: apache2 ... waiting .
root@debian7:~#</screen>
</section>
<?hard-pagebreak?>
<section><title>running apache on CentOS</title>
	<para>Starting the <command>httpd</command><indexterm><primary>httpd</primary></indexterm> on RHEL/CentOS is done with the <command>service</command> command.</para>
	<screen>[root@centos65 ~]# <command>service httpd status</command>
httpd is stopped
[root@centos65 ~]# <command>service httpd start</command>
Starting httpd: httpd: Could not reliably determine the server's fully qualifie\
d domain name, using 127.0.0.1 for ServerName
                                                           [  OK  ]
[root@centos65 ~]#</screen>
	<para>To verify that <command>apache</command> is running, use <command>ps</command> or issue the <command>service httpd status</command> command again.</para>
	<screen>[root@centos65 ~]# <command>service httpd status</command>
httpd (pid  2410) is running...
[root@centos65 ~]# <command>ps -C httpd</command>
  PID TTY          TIME CMD
 2410 ?        00:00:00 httpd
 2412 ?        00:00:00 httpd
 2413 ?        00:00:00 httpd
 2414 ?        00:00:00 httpd
 2415 ?        00:00:00 httpd
 2416 ?        00:00:00 httpd
 2417 ?        00:00:00 httpd
 2418 ?        00:00:00 httpd
 2419 ?        00:00:00 httpd
[root@centos65 ~]#</screen>
	<para>To prevent the 'Could not reliably determine the fqdn' message, issue the following command.</para>
	<screen>[root@centos65 ~]# <command>echo ServerName Centos65 >> /etc/httpd/conf/httpd.conf</command>
[root@centos65 ~]# <command>service httpd restart</command>
Stopping httpd:                                            [  OK  ]
Starting httpd:                                            [  OK  ]
[root@centos65 ~]#</screen>
</section>
<?hard-pagebreak?>
<section><title>index file on CentOS</title>
	<para>CentOS does not provide a standard index.html or index.php file. A simple <command>wget</command> gives an error.</para>
	<screen>[root@centos65 ~]# <command>wget 127.0.0.1</command>
--2014-05-06 15:10:22--  http://127.0.0.1/
Connecting to 127.0.0.1:80... connected.
HTTP request sent, awaiting response... 403 Forbidden
2014-05-06 15:10:22 ERROR 403: Forbidden.</screen>
	<para>Instead when visiting the ip-address of your server in a web browser you get a <command>noindex.html</command> page. You can verify this using <command>wget</command>.</para>
	<screen>[root@centos65 ~]# <command>wget http://127.0.0.1/error/noindex.html</command>
--2014-05-06 15:16:05--  http://127.0.0.1/error/noindex.html
Connecting to 127.0.0.1:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 5039 (4.9K) [text/html]
Saving to: “noindex.html”

100%[=============================================>] 5,039       --.-K/s   in 0s

2014-05-06 15:16:05 (289 MB/s) - “noindex.html” saved [5039/5039]

[root@centos65 ~]# <command>file noindex.html</command>
noindex.html: HTML document text
[root@centos65 ~]#</screen>
	<para>Any custom <command>index.html</command> file in <command>/var/www/html</command> will immediately serve as an index for this web server.</para>
	<screen>[root@centos65 ~]# <command>echo 'Welcome to my website' > /var/www/html/index.html</command>
[root@centos65 ~]# <command>wget http://127.0.0.1</command>
--2014-05-06 15:19:16--  http://127.0.0.1/
Connecting to 127.0.0.1:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 22 [text/html]
Saving to: “index.html”

100%[=============================================>] 22          --.-K/s   in 0s

2014-05-06 15:19:16 (1.95 MB/s) - “index.html” saved [22/22]

[root@centos65 ~]# <command>cat index.html</command>
Welcome to my website</screen>
</section>
<?hard-pagebreak?>
	<section><title>apache configuration</title>
		<para>There are many similarities, but also a couple of differences when configuring <command>apache</command> on Debian or on CentOS. Both Linux families will get their own chapters with examples.</para>
		<para>All configuration on RHEL/CentOS is done in <command>/etc/httpd</command><indexterm><primary>/etc/httpd</primary></indexterm>.</para>
		<screen>[root@centos65 ~]# ls -l /etc/httpd/
total 8
drwxr-xr-x. 2 root root 4096 May  6 13:08 conf
drwxr-xr-x. 2 root root 4096 May  6 13:08 conf.d
lrwxrwxrwx. 1 root root   19 May  6 13:08 logs -> ../../var/log/httpd
lrwxrwxrwx. 1 root root   29 May  6 13:08 modules -> ../../usr/lib64/httpd/modu\
les
lrwxrwxrwx. 1 root root   19 May  6 13:08 run -> ../../var/run/httpd
[root@centos65 ~]#</screen>
		<para>Debian (and ubuntu/mint/...) use <command>/etc/apache2</command><indexterm><primary>/etc/apache2</primary></indexterm>.</para>
		<screen>root@debian7:~# ls -l /etc/apache2/
total 72
-rw-r--r-- 1 root root  9659 May  6 14:23 apache2.conf
drwxr-xr-x 2 root root  4096 May  6 13:19 conf.d
-rw-r--r-- 1 root root  1465 Jan 31 18:35 envvars
-rw-r--r-- 1 root root 31063 Jul 20  2013 magic
drwxr-xr-x 2 root root  4096 May  6 13:19 mods-available
drwxr-xr-x 2 root root  4096 May  6 13:19 mods-enabled
-rw-r--r-- 1 root root   750 Jan 26 12:13 ports.conf
drwxr-xr-x 2 root root  4096 May  6 13:19 sites-available
drwxr-xr-x 2 root root  4096 May  6 13:19 sites-enabled
root@debian7:~#</screen>
	</section>
</section>
<?hard-pagebreak?>
	<section><title>virtual hosts</title>
		<para>Virtual hosts can be defined by ip-address, by port or by name (host record). (The new way of defining virtual hosts is through seperate config files in the conf.d directory.) Below is a very simple virtual host definition.</para>
		<screen>
[root@rhel4 conf]# tail /etc/httpd/conf/httpd.conf 
#
# This is a small test website
#
&#060;VirtualHost testsite.local:80&#062;
ServerAdmin webmaster@testsite.local
DocumentRoot /var/www/html/testsite/
ServerName testsite.local
ErrorLog logs/testsite.local-error_log
CustomLog logs/testsite.local-access_log common
&#060;/VirtualHost&#062;
[root@rhel4 conf]# 
		</screen>
		<para>Should you put this little index.html file in the directory mentioned in the above screenshot, then you can access this humble website.</para>
		<screen>
[root@rhel4 conf]# cat /var/www/html/testsite/index.html 
&#060;html&#062;
	&#060;head&#062;&#060;title>Test Site&#060;/title&#062;&#060;/head&#062;
	&#060;body&#062;
		&#060;p&#062;This is the test site.&#060;/p&#062;
	&#060;/body&#062;
&#060;/html&#062;
		</screen>
		<para>Below is a sample virtual host configuration. This virtual hosts overrules the default Apache <command>ErrorDocument</command> directive.</para>
		<screen>
&#060;VirtualHost 83.217.76.245:80&#062;
ServerName cobbaut.be
ServerAlias www.cobbaut.be
DocumentRoot /home/paul/public_html
ErrorLog /home/paul/logs/error_log
CustomLog /home/paul/logs/access_log common
ScriptAlias /cgi-bin/ /home/paul/cgi-bin/
&#060;Directory /home/paul/public_html&#062;
	Options Indexes IncludesNOEXEC FollowSymLinks
	allow from all
&#060;/Directory&#062;
ErrorDocument 404 http://www.cobbaut.be/cobbaut.php
&#060;/VirtualHost&#062;
		</screen>
	</section>
	<section><title>aliases and redirects</title>
		<para>Apache supports aliases for directories, like this example shows.</para>
		<screen>Alias /paul/ "/home/paul/public_html/"</screen>
		<para>Similarly, content can be redirected to another website or web server.</para>
		<screen>Redirect permanent /foo http://www.foo.com/bar</screen>
	</section>
	<section><title>securing directories with htpasswd and .htaccess</title>
		<para>You can secure files and directories in your website with a userid/password. First, enter your website, and use the <command>htpasswd</command><indexterm><primary>htpasswd(1)</primary></indexterm> command to create a <command>.htpasswd file</command><indexterm><primary>.htpasswd</primary></indexterm> that contains a userid and an (encrypted) password.</para>
		<screen>
		[root@rhel4 testsite]# htpasswd -c .htpasswd pol
		New password: 
		Re-type new password: 
		Adding password for user pol
		[root@rhel4 testsite]# cat .htpasswd 
		pol:x5vZlyw1V6KXE
		[root@rhel4 testsite]# 
		</screen>
		<para>You can add users to this file, just don't use the -c switch again.</para>
		<screen>
		[root@rhel4 testsite]# htpasswd .htpasswd kim
		New password: 
		Re-type new password: 
		Adding password for user kim
		[root@rhel4 testsite]# cat .htpasswd 
		pol:x5vZlyw1V6KXE
		kim:6/RbvugwsgOI6
		[root@rhel4 testsite]# 
		</screen>
		<para>You have now defined two users. Next create a subsdirectory that you want to protect with these two accounts. And put the following .htaccess file in that subdirectory.</para>
		<screen>
		[root@rhel4 kimonly]# pwd
		/var/www/html/testsite/kimonly
		[root@rhel4 kimonly]# cat .htaccess 
		AuthUserFile /var/www/html/testsite/.htpasswd
		AuthGroupFile /dev/null
		AuthName "test access title"
		AuthType Basic
		
		&#060;Limit GET POST&#062;
		require valid-user
		&#060;/Limit&#062;
		[root@rhel4 kimonly]# 
		</screen>
		<para>Finally, don't forget to verify that AllowOverride is set to All in the general Apache configuration file.</para>
		<screen>
		# AllowOverride controls what directives may be placed in .htaccess files.
		# It can be "All", "None", or any combination of the keywords:
		#   Options FileInfo AuthConfig Limit
		#
		AllowOverride All
		</screen>
		<para>From now on, when a user accesses a file in that subdirectory, that user will have to provide a userid/password combo that is defined in your .htpasswd.</para>
	</section>
	<section><title>more on .htaccess</title>
		<para>You can do much more with <command>.htaccess</command><indexterm><primary>.htaccess</primary></indexterm>. One example is to use .htaccess to prevent people from certain domains to access your website. Like in this case, where a number of referer spammers are blocked from the website.</para>
		<screen>
		paul@lounge:~/cobbaut.be$ cat .htaccess 
		# Options +FollowSymlinks
		RewriteEngine On
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-adipex.fw.nu.*$ [OR]
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-levitra.asso.ws.*$ [NC,OR]
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-tramadol.fw.nu.*$ [NC,OR]
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?buy-viagra.lookin.at.*$ [NC,OR]
		...
		RewriteCond &#037;{HTTP_REFERER} ^http://(www\.)?www.healthinsurancehelp.net.*$ [NC]
		RewriteRule .* - [F,L]
		paul@lounge:~/cobbaut.be$ 
	</screen>
	</section>
	<section><title>traffic</title>
		<para>Apache keeps a log of all visitors. The <command>webalizer</command><indexterm><primary>webalizer</primary></indexterm> is often used to parse this log into nice html statistics.</para>
	</section>
