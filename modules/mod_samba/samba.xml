	<section><title>More about smbclient</title>
		<para>Instead of going to the Microsoft machines, we can do the same tests from within linux with <command>smbclient</command><indexterm><primary>smbclient(1)</primary></indexterm>. This first screenshot shows how to verify that Samba is running on your localhost, how to list all the Samba shares, who is the Master Browser of the workgroup and some more information.</para>
		<screen>
[paul@RHEL4b ~]$ smbclient -NL localhost
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Sharename       Type      Comment
---------       ----      -------
pubread         Disk      files to read
pubwrite        Disk      files to read and write
authwrite       Disk      authenticated users only
IPC$            IPC       IPC Service (Public Anonymous File Server)
ADMIN$          IPC       IPC Service (Public Anonymous File Server)
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Server               Comment
---------            -------
RHEL4B               Public Anonymous File Server
WINXP                

Workgroup            Master
---------            -------
WORKGROUP            WINXP
[paul@RHEL4b ~]$ 
		</screen>
		<para>It can also be used to test user access to a Samba share. First an example of how to test anonymous access to our pubread share. If the connection is established, then we get an smb prompt. You can use exit or q to return to bash.</para>
		<screen>
[paul@RHEL4b ~]$ smbclient //rhel4b/pubread -U%
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]
smb: \&#062; dir
.                                   D        0  Fri Jun 22 11:13:15 2007
..                                  D        0  Fri Jun 22 13:03:54 2007
winter.txt                                  18  Fri Jun 22 11:13:11 2007
summer.txt                                  17  Fri Jun 22 11:13:15 2007

45734 blocks of size 262144. 10541 blocks available
smb: \&#062; exit
[paul@RHEL4b ~]$ 
		</screen>
	</section>
	<section><title>NetBIOS name resolving</title>
		<para>If your clients are spread across multiple subnets, then it is likely there is a WINS (Microsoft Windows Internet Naming Service) or NBNS (NetBIOS Name Server) available to resolve NetBIOS names. You should then point Samba to the wins server with the <command>wins server</command><indexterm><primary>WINS</primary></indexterm> parameter.</para>
		<screen>wins server = 10.0.0.42</screen>
		<para>You can set the resolving order that Samba should use with the <command>name resolve order</command> parameter.</para>
		<screen>name resolve order = wins lmhosts host bcast</screen>
	</section>
<chapter><title>Samba Domain Member Server</title>
	<section><title>smb.conf</title>
		<para>The <command>workgroup</command> option in the global section should match the netbios name of the Active Directory domain. Authentication will not be handled by Samba now, but by the Active Directory Domain Controllers, so we set the <command>security</command> option to domain. Since linux requires a user account for every user accessing its file system, we need to provide Samba with a range of uid's and gid's that it can use to create these user accounts. The first Active Directory user to connect will receive linux uid 20000. Below is our new global section in smb.conf.</para>
		<screen>
[global]
	workgroup = PEGASUS
	server string = Pegasus Domain Member Server
	security = Domain
	idmap uid = 20000-22000
	idmap gid = 20000-22000
	winbindd use default domain = Yes
		</screen>
		<para>Nothing special is required for the share section in smb.conf. Remember, we do not manually create users in smbpasswd or on the linux (/etc/passwd). Only Active Directory users are allowed access.</para>
		<screen>
[domaindata]
	path = /srv/samba/domaindata
	comment = Active Directory users only
	read only = No
		</screen>
	</section>
	<section><title>Joining the Active Directory Domain</title>
		<para>While the Samba server is stopped, you can use <command>net rpc join</command><indexterm><primary>net rpc join</primary></indexterm> to join the Active Directory Domain.</para>
		<screen>
[root@RHEL4b samba]# net rpc join -UAdministrator%Stargate1
Joined domain PEGASUS.
[root@RHEL4b samba]# 
		</screen>
		<para>Time to start Samba followed by <command>winbind</command><indexterm><primary>winbind</primary></indexterm>.</para>
		<screen>
[root@RHEL4b samba]# service smb start
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
[root@RHEL4b samba]# service winbindd start
Starting winbindd services:                                [  OK  ]
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>nsswitch.conf</title>
		<para>We need to update the <command>/etc/nsswitch.conf</command><indexterm><primary>/etc/nsswitch.conf</primary></indexterm> file now, so user group and host names can be resolved against the winbindd daemon.</para>
		<screen>
[root@RHEL4b samba]# vi /etc/nsswitch.conf 
[root@RHEL4b samba]# grep winbindd /etc/nsswitch.conf 
passwd:     files winbindd
group:      files winbindd
hosts:      files dns winbindd
[root@RHEL4b samba]#
		</screen>
	</section>
	<section><title>winbind</title>
		<para>The <command>winbind</command><indexterm><primary>winbind</primary></indexterm> daemon is talking with the Active Directory domain. With <command>wbinfo</command><indexterm><primary>wbinfo(1)</primary></indexterm> you can provide winbindd with credentials to talk to Active Directory.</para>
		<screen>[root@RHEL4b samba]# wbinfo --set-auth-user=Administrator%Stargate1</screen>
		<para>We can also use <command>wbinfo -a</command> to verify authentication of a user against Active Directory. Assuming a user account Venus with password VenusW is just created on the Active Directory, we get the following screenshot. </para>
		<screen>
[root@RHEL4b samba]# wbinfo -a Venus%VenusW
plaintext password authentication succeeded
challenge/response password authentication succeeded
[root@RHEL4b samba]# 
		</screen>
		<para>We can use <command>getent</command><indexterm><primary>getent(1)</primary></indexterm> to verify that winbindd is working and actually adding the Active directory users to /etc/passwd. The screenshot below shows that Kim and Serena are normal linux users in /etc/passwd, and that the Active Directory user Venus received uid 20000 in /etc/passwd.</para>
		<screen>
[root@RHEL4b samba]# getent passwd Kim
Kim:x:504:504:Kim Clijsters:/home/Kim:/bin/bash
[root@RHEL4b samba]# getent passwd Serena
Serena:x:503:503:Serena Williams:/home/Serena:/bin/bash
[root@RHEL4b samba]# getent passwd Venus
venus:*:20000:20000::/home/PEGASUS/venus:/bin/false
		</screen>
		<para>Not all Active Directory user accounts added to /etc/passwd by winbindd, only those that have been used.</para>
		<screen>
[root@RHEL4b samba]# getent passwd Justine
[root@RHEL4b samba]# wbinfo -a Justine%JustineH
plaintext password authentication succeeded
challenge/response password authentication succeeded
[root@RHEL4b samba]# getent passwd Justine
justine:*:20001:20000::/home/PEGASUS/justine:/bin/false
[root@RHEL4b samba]#
		</screen>
		<para>All the Active Directory users can now easily connect to the Samba share. Files created by them, belong to them. </para>
		<screen>
[root@RHEL4b samba]# ll /srv/samba/domaindata/
total 0
-rwxr--r--  1 justine 20000 0 Jun 22 19:54 created_by_justine_on_winxp.txt
-rwxr--r--  1 venus   20000 0 Jun 22 19:55 created_by_venus.txt
-rwxr--r--  1 maria   20000 0 Jun 22 19:57 Maria.txt
		</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Verify that you have a working Active Directory (AD) domain.</para>
		<para>2. Setup Samba as a member server in the domain.</para>
		<para>3. Verify the creation of a computer account in AD for your Samba server.</para>
		<para>4. Verify the automatic creation of AD users in /etc/passwd with wbinfo and getent.</para>
		<para>5. Connect to Samba shares with AD users, and verify ownership of their files.</para>
	</section>
</chapter>
<chapter><title>Samba Domain Controller</title>
	<section><title>About Domain Controllers</title>
		<section><title>Samba 3</title>
			<para>Samba 3 can act as a domain controller in its own domain. In a Windows NT4 domain, with one Windows NT4 PDC and zero or more BDC's, Samba 3 can only be a member server. The same is valid for Samba 3 in an Active Directory Domain with Windows 2000 and/or Windows 2003 DC's. In short, a Samba 3 domain controller can not share domain control with Windows domain controllers.</para>
		</section>
		<section><title>Samba 4</title>
			<para>Samba 4 can be a domain Controller in an Active Directory domain, but as of this writing, Samba 4 is not released for production!</para>
		</section>
		<section><title>About password backends</title>
			<para>The example below uses the <command>tdbsam</command><indexterm><primary>tdbsam</primary></indexterm> password backend. Another option would be to use LDAP. Larger domains will benefit from using LDAP instead of the not so scalable tdbsam. When you need more than one Domain Controller, then the Samba team advises to not use tdbsam.</para>
		</section>
	</section>
	<section><title>smb.conf</title>
		<para>Now is a good time to start adding comments in your smb.conf. First we'll take a look at the naming of our domain and server in the <command>[global]</command> section, and at the domain controlling parameters. The security must be set to user (which is the default). Our Samba server is the most stable system in the network, so it should win all browser elections (<command>os level</command> above 32) to become the <command>browser master</command><indexterm><primary>browser master</primary></indexterm>, and it should accept domain logons (<command>domain logons = Yes</command>).</para>
		<screen>
[global]
# names
	workgroup = SPORTS
	netbios name = DCSPORTS
	server string = Sports Domain Controller
# domain control parameters
	security = user
	os level = 80
	preferred master = Yes
	domain master = Yes
	domain logons = Yes
		</screen>
		<para>Then we create some sections for file shares, to test our Samba server. Users can all access the general sports file share, but only group members can access their own sport share.</para>
		<screen>
[sports]
comment = Information about all sports
path = /srv/samba/sports
valid users = @ntsports
read only = No

[tennis]
comment = Information about tennis
path = /srv/samba/tennis
valid users = @nttennis
read only = No

[football]
comment = Information about football
path = /srv/samba/football
valid users = @ntfootball
read only = No
		</screen>
		<para>Part of the Microsoft definition of a domain controller is that it should have a <command>netlogon share</command>. This is the relevant part of smb.conf to create this netlogon share on Samba.</para>
		<screen>
[netlogon]
comment = Network Logon Service
path = /srv/samba/netlogon
admin users = root
guest ok = Yes
browseable = No
		</screen>
	</section>
	<section><title>Users and Groups</title>
		<para>To be able to use users and groups in Samba, we have to set up some users and groups on the Linux computer.</para>
		<screen>
[root@RHEL4b samba]# groupadd ntadmins
[root@RHEL4b samba]# groupadd ntsports
[root@RHEL4b samba]# groupadd nttennis
[root@RHEL4b samba]# groupadd ntfootball
[root@RHEL4b samba]# useradd -m -G ntadmins -p Stargate1 Administrator
[root@RHEL4b samba]# useradd -m -G ntsports,nttennis -p stargate Venus
[root@RHEL4b samba]# useradd -m -G ntsports,nttennis -p stargate Serena
[root@RHEL4b samba]# useradd -m -G ntsports,nttennis -p stargate Kim
[root@RHEL4b samba]# useradd -m -G ntsports,ntfootball -p stargate Figo
[root@RHEL4b samba]# useradd -m -G ntsports,ntfootball -p stargate Pfaff
		</screen>
		<para>Next we must make these users known to Samba with the smbpasswd tool. When you add the first user to <command>tdbsam</command><indexterm><primary>tdbsam</primary></indexterm>, the file <command>/etc/samba/passdb.tdb</command><indexterm><primary>/etc/samba/passdb.tdb</primary></indexterm> will be created.</para>
		<screen>
[root@RHEL4b samba]# smbpasswd -a Administrator
New SMB password:
Retype new SMB password:
Unable to open/create TDB passwd
pdb_getsampwnam: Unable to open TDB passwd (/etc/samba/passdb.tdb)!
TDBSAM version too old (0), trying to convert it.
TDBSAM converted successfully.
Added user Administrator.
[root@RHEL4b samba]#
		</screen>
		<para>Adding the second user generates less output.</para>
		<screen>
[root@RHEL4b samba]# smbpasswd -a root
New SMB password:
Retype new SMB password:
Added user root.
		</screen>
	</section>
	<section><title>About Computer Accounts</title>
		<para>Every NT computer (Windows NT, 2000, XP, Vista) can become a member of a domain. Joining the domain (by right-clicking on My Computer) means that a computer account will be created in the domain. This computer account also has a password (but you cannot know it) to prevent other computers with the same name from accidentally becoming member of the domain. The computer account created by Samba is visible in the <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> file on linux. Computer accounts appear as a normal user account, but end their name with a dollar sign. Below a screenshot of the winxp$ computer account, created by Samba 3.</para>
		<screen>
[root@RHEL4b samba]# tail -5 /etc/passwd
Serena:x:508:512::/home/Serena:/bin/bash
Kim:x:509:513::/home/Kim:/bin/bash
Figo:x:510:514::/home/Figo:/bin/bash
Pfaff:x:511:515::/home/Pfaff:/bin/bash
winxp$:x:512:516::/home/nobody:/bin/false
		</screen>
		<para>To be able to create the account, you will need to provide credentials of an account with the permission to create accounts (by default only root can do this on Linux). And we will have to tell Samba how to to this, by adding an <command>add machine script</command> to the global section of smb.conf.</para>
		<screen>add machine script = /usr/sbin/useradd -s /bin/false -d /home/nobody %u</screen>
		<para>You can now join a Microsoft computer to the sports domain (with the root user). After reboot of the Microsoft computer, you will be able to logon with Administrator (password Stargate1), but you will get an error about your roaming profile. We will fix this in the next section.</para>
	</section>
	<section><title>Roaming Profiles</title>
		<para>For your information, if you want to force local profiles instead of roaming profiles, then simply add the following two lines to the global section in smb.conf.</para>
		<screen>
logon home =
logon path =
		</screen>
		<para>Microsoft computers store a lot of User Metadata and application data in a user profile. Making this profile available on the network will enable users to keep their Desktop and Application settings across computers. User profiles on the network are called <command>roaming profiles</command><indexterm><primary>roaming profiles(samba)</primary></indexterm> or <command>roving profiles</command>. The Samba domain controller can manage these profiles. First we need to add the relevant section in smb.conf.</para>
		<screen>
[Profiles]
	comment = User Profiles
	path = /srv/samba/profiles
	readonly = No
	profile acls = Yes
		</screen>
		<para>Besides the share section, we also need to set the location of the profiles share (this can be another Samba server) in the global section.</para>
		<screen> logon path = \\%L\Profiles\%U</screen>
		<para>The <command>&#037;L</command> variable is the name of this Samba server, the <command>&#037;U</command> variable translates to the username. After adding a user to smbpasswd and letting the user log on and off, the profile of the user will look like this.</para>
		<screen>
[root@RHEL4b samba]# ll /srv/samba/profiles/Venus/
total 568
drwxr-xr-x  4 Venus Venus   4096 Jul  5 10:03 Application Data
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 Cookies
drwxr-xr-x  3 Venus Venus   4096 Jul  5 10:03 Desktop
drwxr-xr-x  3 Venus Venus   4096 Jul  5 10:03 Favorites
drwxr-xr-x  4 Venus Venus   4096 Jul  5 10:03 My Documents
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 NetHood
-rwxr--r--  1 Venus Venus 524288 Jul  5  2007 NTUSER.DAT
-rwxr--r--  1 Venus Venus   1024 Jul  5  2007 NTUSER.DAT.LOG
-rw-r--r--  1 Venus Venus    268 Jul  5 10:03 ntuser.ini
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 PrintHood
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 Recent
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 SendTo
drwxr-xr-x  3 Venus Venus   4096 Jul  5 10:03 Start Menu
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 Templates
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>Groups in NTFS acls</title>
		<para>We have users on Unix, we have groups on Unix that contain those users.</para>
		<screen>
[root@RHEL4b samba]# grep nt /etc/group
...
ntadmins:x:506:Administrator
ntsports:x:507:Venus,Serena,Kim,Figo,Pfaff
nttennis:x:508:Venus,Serena,Kim
ntfootball:x:509:Figo,Pfaff
[root@RHEL4b samba]# 
		</screen>
		<para>We already added Venus to the <command>tdbsam</command> with <command>smbpasswd</command><indexterm><primary>smbpasswd(1)</primary></indexterm>.</para>
		<screen>smbpasswd -a Venus</screen>
		<para>Does this mean that Venus can access the tennis and the sports shares ? Yes, all access works fine on the Samba server. But the nttennis group is not available on the windows machines. To make the groups available on windows (like in the ntfs security tab of files and folders), we have to map unix groups to windows groups. To do this, we use the <command>net groupmap</command><indexterm><primary>net groupmap</primary></indexterm> command.</para>
		<screen>
[root@RHEL4b samba]# net groupmap add ntgroup="tennis" unixgroup=nttennis type=d
No rid or sid specified, choosing algorithmic mapping
Successully added group tennis to the mapping db
[root@RHEL4b samba]# net groupmap add ntgroup="football" unixgroup=ntfootball type=d
No rid or sid specified, choosing algorithmic mapping
Successully added group football to the mapping db
[root@RHEL4b samba]# net groupmap add ntgroup="sports" unixgroup=ntsports type=d
No rid or sid specified, choosing algorithmic mapping
Successully added group sports to the mapping db
[root@RHEL4b samba]# 
		</screen>
		<para>Now you can use the Samba groups on all NTFS volumes on members of the domain.</para>
	</section>
	<section><title>logon scripts</title>
	<para>Before testing a logon script, make sure it has the proper carriage returns that DOS files have.</para>
	<screen>
[root@RHEL4b netlogon]# cat start.bat 
net use Z: \\DCSPORTS0\SPORTS
[root@RHEL4b netlogon]# unix2dos start.bat 
unix2dos: converting file start.bat to DOS format ...
[root@RHEL4b netlogon]# 
	</screen>
	<para>Then copy the scripts to the netlogon share, and add the following parameter to smb.conf.</para>
	<screen>logon script = start.bat</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Setup Samba as a domain controller.</para>
		<para>2. Create the shares salesdata, salespresentations and meetings. Salesdata must be accessible to all sales people and to all managers. SalesPresentations is only for all sales people. Meetings is only accessible to all managers. Use groups to accomplish this.</para>
		<para>3. Join a Microsoft computer to your domain. Verify the creation of a computer account in /etc/passwd.</para>
		<para>4. Setup and verify the proper working of roaming profiles.</para>
		<para>5. Find information about home directories for users, set them up and verify that users receive their home directory mapped under the H:-drive in MS Windows Explorer.</para>
		<para>6. Use a couple of samba domain groups with members to set acls on ntfs. Verify that it works!</para>
		<para>7. Knowing that the &#037;m variable contains the computername, create a seperate log file for every computer(account).</para>
		<para>8. Knowing that &#037;s contains the client operating system, include a smb.&#037;s.conf file that contains a share. (The share will only be visible to clients with that OS).</para>
		<para>9. If time permits (or if you are waiting for other students to finish this practice), then combine "valid users" and "invalid users" with groups and usernames with "hosts allow" and "hosts deny" and make a table of which get priority over which.</para>
	</section>
</chapter>
<chapter><title>Samba Print Servers</title>
	<section><title>Simple CUPS Print Server</title>
		<para>Let us start by setting up a Samba print server that serves two printers which are set up with the CUPS web interface (http://localhost:631). We make these printers available to everyone for printing. We set up the CUPS printers without a driver (raw printing device). The <command>lpstat</command><indexterm><primary>lpstat(1)</primary></indexterm> tool will see the printers like this.</para>
		<screen>
[root@RHEL4b samba]# lpstat -t
scheduler is running
system default destination: HPColor
device for HPBlack: socket://192.168.1.244:9100
device for HPColor: parallel:/dev/lp0
HPBlack accepting requests since Jan 01 00:00
HPColor accepting requests since Jan 01 00:00
printer HPBlack is idle.  enabled since Jan 01 00:00
printer HPColor is idle.  enabled since Jan 01 00:00
		</screen>
		<para>The windows clients need to install the correct printer driver themselves, so the spooler just sends the jobs to the print device (without any kind of processing or interpreting of the print jobs). Our smb.conf looks like this.</para>
		<screen>
[global]
	server string = Public Anonymous Print Server
	security = share
	disable spoolss = No
	printing = cups

[printers]
	path = /var/spool/samba
	read only = Yes
	printable = Yes
	use client driver = Yes
		</screen>
		<para>Let's do a quick check with smbclient.</para>
		<screen>
[root@RHEL4b samba]# smbclient -NL 127.0.0.1
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Sharename       Type      Comment
---------       ----      -------
IPC$            IPC       IPC Service (Public Anonymous Print Server)
ADMIN$          IPC       IPC Service (Public Anonymous Print Server)
HPBlack         Printer   Local Raw Printer
HPColor         Printer   Local Raw Printer
...
		</screen>
		<para>That looks ok. Now you can add the printer to windows computers in the workgroup, just browse to your Samba server in the add printer wizard. Or you can connect with the <command>net use</command><indexterm><primary>net use</primary></indexterm> command as shown below.</para>
		<screen>
C:\shov&#062;net use lpt1: \\rhel4b\HPColor
The command completed successfully.

C:\shov&#062;net use
New connections will be remembered.


Status       Local     Remote                    Network

-------------------------------------------------------------------------------
OK           LPT1      \\rhel4b\HPColor          Microsoft Windows Network
The command completed successfully.

C:\shov&#062;print shovel.bat
C:\shov\shovel.bat is currently being printed
		</screen>
		<para>After printing a test page (by rightclicking on the printer icon in windows and then clicking on the print test page button of the properties dialog box) and issuing the print command from within Firefox, the print queue looks like this.</para>
		<screen>
[root@RHEL4b samba]# lpq -a
Rank    Owner   Job     File(s)                         Total Size
active  nobody  4       smbprn.00000001 Test Page       112640 bytes
1st     nobody  5       smbprn.00000002 Mozilla Firefox 120832 bytes
		</screen>
		<para>For troubleshooting, it can be useful to stop (pause) the printer. This way the jobs stay in the queue.</para>
		<screen>
[root@RHEL4b samba]# lpstat -t
scheduler is running
system default destination: HPColor
device for HPBlack: socket://192.168.1.244:9100
device for HPColor: parallel:/dev/lp0
HPBlack accepting requests since Jan 01 00:00
HPColor accepting requests since Jan 01 00:00
printer HPBlack disabled since Jan 01 00:00 -
Paused
printer HPColor is idle.  enabled since Jan 01 00:00
HPBlack-4           nobody       112640   Sat 07 Jul 2007 07:59:33 AM CEST
HPBlack-5           nobody       120832   Sat 07 Jul 2007 08:00:04 AM CEST
		</screen>
	</section>
	<section><title>Simple BSD Print Server</title>
		<para>The default BSD style print commands (also refered to as LPD/LPR) are defined in rfc 1179. The smb.conf file is similar to the one for CUPS printing, except that CUPS is the default. The file now looks like this.</para>
		<screen>
[global]
	server string = Public Anonymous Print Server
	printing = bsd
	load printers = yes

[printers]
	path = /var/spool/samba
	writable = no
	printable = Yes
	public = yes
		</screen>
		<para>Testparm however gives us some more information on values used for the print commands.</para>
		<screen>
[root@RHEL4b samba]# testparm 
Load smb config files from /etc/samba/smb.conf
Processing section "[printers]"
Loaded services file OK.
Server role: ROLE_STANDALONE
Press enter to see a dump of your service definitions
	
# Global parameters
[global]
	server string = Public Anonymous Print Server
	printing = bsd
	print command = lpr -r -P'&#037;p' &#037;s
	lpq command = lpq -P'&#037;p'
	lprm command = lprm -P'&#037;p' &#037;j

[printers]
	path = /var/spool/samba
	guest ok = Yes
	printable = Yes
	browseable = No
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>Simple Unix SysV Print Server</title>
		<para>SystemV style printing uses the lp command in this form.</para>
		<screen>lp -dprinter -s file</screen>
		<para>Since by default this command does not remove the file, we have to add this removal to smb.conf. So here is a simple smb.conf to share Unix System V type printers with Samba.</para>
		<screen>
[global]
	server string = Public Anonymous Print Server
	printing = sysv
	load printers = yes
	
[printers]
	path = /var/spool/samba
	writable = no
	printable = Yes
	public = yes
	print command = lp -d&#037;p -s &#037;s ; rm &#037;s
		</screen>
	</section>	
	<section><title>Samba Prining tips</title>
		<para>The <command>printable = Yes</command> line must always be present in Samba printer shares, even in the <command>[printers]</command> section. It is also important to have a naming convention that prevents printers from having the same name as users. The <command>[homes]</command> section automatically creates a share for each user with that username, so it cannot be also a printer share. </para>
		<para>To troubleshoot the print command, you can da a little trick in smb.conf. Instead of the actual print command, construct the printers section in smb.conf like this.</para>
		<screen>
[printers]
	path = /var/spool/samba
	writable = no
	printable = Yes
	public = yes
	print command = echo "lpr -r -P'%p' %s" >> /tmp/bsdprint.log
		</screen>
		<para>Nothing will be printed, but you can test the print command that is generated by Samba. In this case, the log file looks like this.</para>
		<screen>
[root@RHEL4b samba]# cat /tmp/bsdprint.log
lpr -r -P'HP400' smbprn.00000012.ARQtkM
lpr -r -P'HP400' smbprn.00000013.YbFkuN
lpr -r -P'HP400' smbprn.00000017.NeDuGj
[root@RHEL4b samba]# 
		</screen>
		<para>Here is a list variables that are used by Samba for printing.</para>
		<screen>
&#037;s	filename with path (of the file to be printed)
&#037;f filename without path
&#037;p name of the destination unix printer
&#037;j	print job number	
		</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Create two printers (with lpadmin or with the cups web interface) and pause(stop) them.</para>
		<para>2. Serve these printers with Samba. Connect with a Microsoft computer and test printing.</para>
		<para>3. Make sure only Isabelle and Caroline can access one of the printers.</para>
		<para>4. Make sure they have to be on the 10.5.0.0/16 subnet to access the printer.</para>
		<para>5. If time permits... There are some issues with a BSD printer. Your manager asks you to log the lpr command syntax, its stdout and its stderr to three different files.</para>
	</section>
