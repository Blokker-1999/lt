<chapter><title>Introduction to Samba</title>
<section><title>Verify installed version</title>
<para>To see the version of samba installed on RedHat, use rpm -qa. Looks like <command>samba</command><indexterm><primary>samba</primary></indexterm> 3 in the screenshot here, version 3.0.10.</para>
<screen>
[paul@RHEL4b ~]$  rpm -qa | grep samba
samba-common-3.0.10-1.4E.9
samba-client-3.0.10-1.4E.9
system-config-samba-1.2.21-1
samba-swat-3.0.10-1.4E.9
samba-3.0.10-1.4E.9
[paul@RHEL4b ~]$ 
</screen>
<para>Use dpkg -l on Debian or Ubuntu. Our Feisty Fawn here uses Samba 3.0.24</para>
<screen>
paul@laika:~$ dpkg -l | grep samba
ii  samba-common    3.0.24-2ubuntu1.2    Samba common files used by both the...
paul@laika:~$ 
</screen>
</section>
<section><title>Installing Samba</title>
	<para>Samba is installed by default on Red Hat Enterprise Linux. If Samba is not yet installed, then the easiest way is to use the graphical menu (Applications -- System Settings -- Add/Remove Applications) and select "Windows File Server" in the Server section. The non-graphical way is to either use rpm -i followed by the samba-version.rpm file.</para>
	<screen>
[paul@RHEL4b ~]$  rpm -i samba-3.0.10-1.4E.9.rpm
	</screen>
	<para>Or if you have a subscription to RHN, then <command>up2date</command> is the tool to use.</para>
	<screen>
[paul@RHEL4b ~]$  up2date -i samba
	</screen>
	<para>Ubuntu and Debian users can use the aptitude program.</para>
	<screen>
paul@laika:~$ aptitude install samba-server
	</screen>
</section>
<section><title>Documentation</title>
	<para>Obviously there are manual pages for Samba. Don't forget <command>man smb.conf</command><indexterm><primary>man(1)</primary></indexterm>.</para>
	<screen>
[root@RHEL4b samba]# apropos samba
cupsaddsmb       (8)  - export printers to samba for windows clients
lmhosts          (5)  - The Samba NetBIOS hosts file
net              (8)  - Tool for administration of Samba and remote CIFS servers
pdbedit          (8)  - manage the SAM database (Database of Samba Users)
samba            (7)  - A Windows SMB/CIFS fileserver for UNIX
smb.conf [smb]   (5)  - The configuration file for the Samba suite
smbpasswd        (5)  - The Samba encrypted password file
smbstatus        (1)  - report on current Samba connections
swat             (8)  - Samba Web Administration Tool
tdbbackup        (8)  - tool for backing up and ... of samba .tdb files
[root@RHEL4b samba]# 
</screen>
	<para>Samba comes with excellent documentation in html and pdf format (and also as a free download from Samba.org and are for sale as a printed book). Red Hat Enterprise Linux installs the html and pdf version in /usr/share/doc by default.</para>
	<screen>
[paul@RHEL4b ~]$ locate Samba-HOWTO-Collection.pdf
/usr/share/doc/samba-3.0.10/Samba-HOWTO-Collection.pdf
	</screen>
	<para>Ubuntu packages the docs as a seperate package from Samba.</para>
	<screen>
root@laika:~# aptitude search samba | grep -i documentation
i   samba-doc                       - Samba documentation                       
i   samba-doc-pdf                   - Samba documentation (PDF format)          
root@laika:~# find /usr/share/doc/samba-doc-pdf | grep -i howto
/usr/share/doc/samba-doc-pdf/Samba3-HOWTO.pdf.gz
	</screen>
	<para>Besides the howto, there is also an excellent book called <command>Samba by example</command> (again available as book in shops, and as a free pdf and html).</para>
</section>
<section><title>smb.conf</title>
<para>Samba configuration is done in the <command>smb.conf</command><indexterm><primary>/etc/samba/smb.conf</primary></indexterm> file. The file can be edited manually, or you can use a web based interface like webmin or swat to manage it. The file is usually located in /etc/samba. You can find the exact location with <command>smbd -b</command><indexterm><primary>smbd</primary></indexterm>.</para>
<screen>
[root@RHEL4b ~]# smbd -b | grep CONFIGFILE
CONFIGFILE: /etc/samba/smb.conf
[root@RHEL4b ~]# 
</screen>
<para>The default smb.conf file contains a lot of examples with explanations.</para>
<screen>
[paul@RHEL4b ~]$ ls -l /etc/samba/smb.conf 
-rw-r--r--  1 root root 10836 May 30 23:08 /etc/samba/smb.conf
(...)
paul@laika:~$ ls -l /etc/samba/smb.conf 
-rw-r--r-- 1 root root 10515 2007-05-24 00:21 /etc/samba/smb.conf
</screen>
<para>Below is an example of a very minimalistic smb.conf. It allows samba to start, and to be visible to other computers (Microsoft shows computers in Network Neighborhood or My Network Places). </para>
<screen>
[paul@RHEL4b ~]$ cat /etc/samba/smb.conf
[global]
workgroup = WORKGROUP
[firstshare]
path = /srv/samba/public
[paul@RHEL4b ~]$ 
</screen>
<para>Below is a screenshot of the <command>net view</command><indexterm><primary>net view</primary></indexterm> command on Microsoft Windows XP sp2. It shows how the Samba server with the minimalistic smb.conf is visible to Microsoft computers nearby.</para>
<screen>
C:\Documents and Settings\paul>net view
Server Name            Remark

-------------------------------------------------------------------------------
\\RHEL4B               Samba 3.0.10-1.4E.9                                     
\\W2000                                                                        
\\WINXP                                                                        
The command completed successfully.
</screen>
<para>Some parameters in smb.conf can get a long list of values behind them. You can continue a line (for clarity) on the next by ending the line with a backslash.</para>
<screen>
valid users = Serena, Venus, Lindsay \
              Kim, Justine, Sabine \
              Amelie, Marie, Suzanne
</screen>
<para>Curious but true, smb.conf accepts synonyms like <command>create mode</command> and <command>create mask</command>, and sometimes minor spelling errors like <command>browsable</command> and <command>browseable</command>. And on occasion you can even switch words, the <command>guest only</command> parameter is identical to <command>only guest</command>.</para>
</section>
<section><title>testparm</title>
<para>To verify the syntax of the smb.conf file, you can use testparm.</para>
<screen>
[paul@RHEL4b ~]$ testparm
Load smb config files from /etc/samba/smb.conf
Processing section "[firstshare]"
Loaded services file OK.
Server role: ROLE_STANDALONE
Press enter to see a dump of your service definitions
	
[paul@RHEL4b ~]$ 
</screen>
<para>An interesting option is <command>testparm -v</command><indexterm><primary>testparm(1)</primary></indexterm>, which will output all the global options with their default value. The remark seen by the <command>net view</command><indexterm><primary>net view</primary></indexterm> command is the default value for the "server string" option. Simply adding this value to the global section in smb.conf and restarting samba will change the option. After a while, the changed option is visible on the Microsoft computers.</para>
<screen>
C:\Documents and Settings\paul>net view
Server Name            Remark
	
-------------------------------------------------------------------------------
\\RHEL4B               Public File Server                                      
\\W2000                                                                        
\\WINXP                                                                        
The command completed successfully.
</screen>
<para>The samba daemons are constantly (once every 60 seconds) checking the smb.conf file, so it is good practice to keep this file small. But it is also good practice to document your samba configuration, and to explicitly set options that have the same default values. The <command>testparm -s</command><indexterm><primary>testparm(1)</primary></indexterm> option allows you to do both. It will output the smallest possible samba configuration file, while retaining all your settings. The idea is to have your samba configuration in another file (like smb.conf.full) and let testparm parse this for you. The screenshot below shows you how. First the smb.conf.full file with the explicitly set option workgroup to WORKGROUP. </para>
<screen>
[root@RHEL4b samba]# cat smb.conf.full 
[global]
workgroup = WORKGROUP

# This is a demo of a documented smb.conf
# These two lines are removed by testparm -s

server string = Public Test Server

[firstshare]
path = /srv/samba/public
</screen>
<para>Next, we execute testparm with the -s option, and redirect stdout to the real smb.conf file.</para>
<screen>
[root@RHEL4b samba]# testparm -s smb.conf.full > smb.conf
Load smb config files from smb.conf.full
Processing section "[firstshare]"
Loaded services file OK.
</screen>
<para>And below is the end result. The two comment lines and the default option are no longer there.</para>
<screen>
[root@RHEL4b samba]# cat smb.conf
# Global parameters
[global]
server string = Public Test Server

[firstshare]
path = /srv/samba/public
[root@RHEL4b samba]# 
</screen>
</section>
<section><title>Samba daemons</title>
	<para>Samba 3 consists of three daemons, they are named <command>nmbd</command><indexterm><primary>nmbd</primary></indexterm>, <command>smbd</command><indexterm><primary>smbd</primary></indexterm> and <command>winbind</command><indexterm><primary>winbind</primary></indexterm>. The <command>nmbd</command> daemon takes care of all the names and naming. It registers and resolves names, and handles browsing. It should be the first daemon to start. The <command>smbd</command> daemon manages file transfers and authentication. It should be started after nmbd. The <command>winbind</command> daemon is only started to handle Microsoft Windows domain membership.</para>
	<para>You can start the daemons by invoking <command>/etc/init.d/smb start</command><indexterm><primary>/etc/init.d/smb</primary></indexterm> (some systems use <command>/etc/init.d/samba</command><indexterm><primary>/etc/init.d/samba</primary></indexterm>) on any linux. Red Hat derived systems are happy with <command>service smb start</command><indexterm><primary>service(1)</primary></indexterm>. </para>
	<screen>
[root@RHEL4b ~]# /etc/init.d/smb start
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
[root@RHEL4b ~]# service smb restart
Shutting down SMB services:                                [  OK  ]
Shutting down NMB services:                                [  OK  ]
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
[root@RHEL4b ~]# 
	</screen>
</section>
<section><title>smbclient</title>
	
	<para>With <command>smbclient</command><indexterm><primary>smbclient(1)</primary></indexterm> you can see browsing and share information from your smb server. It will display all your shares, your workgroup, and the name of the Master Browser. The -N switch is added to avoid having to enter an empty password. The -L switch is followed by the name of the host to check.</para>
	<screen>
[root@RHEL4b init.d]# smbclient -NL rhel4b
Anonymous login successful
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Sharename       Type      Comment
---------       ----      -------
firstshare      Disk      
IPC$            IPC       IPC Service (Public Test Server)
ADMIN$          IPC       IPC Service (Public Test Server)
Anonymous login successful
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Server               Comment
---------            -------
RHEL4B               Public Test Server
WINXP                

Workgroup            Master
---------            -------
WORKGROUP            WINXP
	</screen>
	<para>The screenshot below uses smbclient to display information about a remote smb server (in this case a Windows XP machine).</para>
	<screen>
[root@RHEL4b init.d]# smbclient -NL winxp
Anonymous login successful
Domain=[WORKGROUP] OS=[Windows 5.1] Server=[Windows 2000 LAN Manager]

Sharename       Type      Comment
---------       ----      -------
Error returning browse list: NT_STATUS_ACCESS_DENIED
Anonymous login successful
Domain=[WORKGROUP] OS=[Windows 5.1] Server=[Windows 2000 LAN Manager]

Server               Comment
---------            -------
RHEL4B               Public Test Server
W2000                
WINXP                

Workgroup            Master
---------            -------
WORKGROUP            WINXP
	</screen>
</section>
<section><title>smbtree</title>
	<para>Another useful tool to troubleshoot Samba or simply to browse the SMB network is <command>smbtree</command><indexterm><primary>smbtree(1)</primary></indexterm>. In its simplest form, smbtree will do an anonymous browsing on the local subnet. displaying all SMB computers and (if authorized) their shares.</para>
	<para> Let's take a look at two screenshots of smbtree in action (with blank password). The first one is taken immediately after booting four different computers (one MS Windows 2000, one MS Windows XP, one MS Windows 2003 and one RHEL 4 with Samba 3.0.10).</para>
	<screen>
[paul@RHEL4b ~]$ smbtree
Password: 
WORKGROUP
PEGASUS
	\\WINXP          
	\\RHEL4B                        Pegasus Domain Member Server
Error connecting to 127.0.0.1 (Connection refused)
cli_full_connection: failed to connect to RHEL4B&#060;20&#062; (127.0.0.1)
	\\HM2003         
[paul@RHEL4b ~]$
	</screen>
	<para>The information displayed in the previous screenshot looks incomplete. The browsing elections are still ongoing, the browse list is not yet distributed to all clients by the (to be elected) browser master. The next screenshot was taken about one minute later. And it shows even less.</para>
	<screen>
[paul@RHEL4b ~]$ smbtree
Password: 
WORKGROUP
	\\W2000          
[paul@RHEL4b ~]$
	</screen>
	<para>So we wait a while, and then run smbtree again, this time it looks a lot nicer.</para>
	<screen>
[paul@RHEL4b ~]$ smbtree
Password: 
WORKGROUP
	\\W2000          
PEGASUS
	\\WINXP          
	\\RHEL4B                        Pegasus Domain Member Server
		\\RHEL4B\ADMIN$                 IPC Service (Pegasus Domain Member Server)
		\\RHEL4B\IPC$                   IPC Service (Pegasus Domain Member Server)
		\\RHEL4B\domaindata             Active Directory users only
	\\HM2003         
[paul@RHEL4b ~]$ smbtree --version
Version 3.0.10-1.4E.9
[paul@RHEL4b ~]$ 
	</screen>
	<para>I added the version number of smbtree in the previous screenshot, to show you the difference when using the latest version of smbtree (below a screenshot taken from Ubuntu Feisty Fawn). The latest version shows a more complete overview of machines and shares.</para>
	<screen>
paul@laika:~$ smbtree --version
Version 3.0.24
paul@laika:~$ smbtree
Password: 
WORKGROUP
	\\W2000          
		\\W2000\firstshare     
		\\W2000\C$              Default share
		\\W2000\ADMIN$          Remote Admin
		\\W2000\IPC$            Remote IPC
PEGASUS
	\\WINXP          
cli_rpc_pipe_open: cli_nt_create failed on pipe \srvsvc to machine WINXP.
Error was NT_STATUS_ACCESS_DENIED
	\\RHEL4B                        Pegasus Domain Member Server
		\\RHEL4B\ADMIN$                 IPC Service (Pegasus Domain Member Server)
		\\RHEL4B\IPC$                   IPC Service (Pegasus Domain Member Server)
		\\RHEL4B\domaindata             Active Directory users only
	\\HM2003         
cli_rpc_pipe_open: cli_nt_create failed on pipe \srvsvc to machine HM2003.
Error was NT_STATUS_ACCESS_DENIED
paul@laika:~$ 
	</screen>
	<para>The previous screenshot also provides useful errors on why we cannot see shared info on computers winxp and w2003. Let us try the old smbtree version on our RHEL server, but this time with Administrator credentials (which are the same on all computers).</para>
	<screen>
[paul@RHEL4b ~]$ smbtree -UAdministrator%Stargate1
WORKGROUP
	 \\W2000          
PEGASUS
	 \\WINXP          
	  	\\WINXP\C$              Default share
	  	\\WINXP\ADMIN$          Remote Admin
	  	\\WINXP\share55        
	  	\\WINXP\IPC$            Remote IPC
	 \\RHEL4B                 	Pegasus Domain Member Server
	  	\\RHEL4B\ADMIN$         IPC Service (Pegasus Domain Member Server)
	  	\\RHEL4B\IPC$           IPC Service (Pegasus Domain Member Server)
	  	\\RHEL4B\domaindata     Active Directory users only
	 \\HM2003         
	  	\\HM2003\NETLOGON       Logon server share 
	  	\\HM2003\SYSVOL         Logon server share 
	  	\\HM2003\WSUSTemp       A network share used by Local Publishing ...
	  	\\HM2003\ADMIN$         Remote Admin
	  	\\HM2003\tools          
	  	\\HM2003\IPC$           Remote IPC
	  	\\HM2003\WsusContent    A network share to be used by Local ...
	  	\\HM2003\C$             Default share
[paul@RHEL4b ~]$ 
	</screen>
	<para>As you can see, this gives a very nice overview of all SMB computers and their shares.</para>
</section>
<section><title>Samba Web Administration Tool (SWAT)</title>
	<para>Samba comes with a web based tool to manage your samba configuration file. The tool is accessible with a web browser on port 901 of the host system. To enable the tool, first find out whether your system is using the inetd or the xinetd superdaemon.</para>
	<screen>
	[root@RHEL4b samba]# ps fax | grep inet
	15026 pts/0    S+     0:00                      \_ grep inet
	 2771 ?        Ss     0:00 xinetd -stayalive -pidfile /var/run/xinetd.pid
	[root@RHEL4b samba]# 
	</screen>
	<para>Then edit the inetd.conf or change the disable = yes line in /etc/xinetd.d/swat to disable = no.</para>
	<screen>
[root@RHEL4b samba]# cat /etc/xinetd.d/swat 
# default: off
# description: SWAT is the Samba Web Admin Tool. Use swat \
#              to configure your Samba server. To use SWAT, \
#              connect to port 901 with your favorite web browser.
service swat
{
	port            = 901
	socket_type     = stream
	wait            = no
	only_from       = 127.0.0.1
	user            = root
	server          = /usr/sbin/swat
	log_on_failure  += USERID
	disable         = no
}
[root@RHEL4b samba]# /etc/init.d/xinetd restart
Stopping xinetd:                                           [  OK  ]
Starting xinetd:                                           [  OK  ]
[root@RHEL4b samba]#
	</screen>
	<para>Be careful when using SWAT, it erases alle your manually edited comments in smb.conf.</para>
</section>
<section><title>Practice</title>
	<para>0. !! Make sure you know your student number, anything *ANYTHING* you name must include your student number!</para>
	<para>1. Verify that you can logon to a Linux/Unix computer. Write down the name and ip address of this machine.</para>
	<para>2. Do the same for all the other (virtual) machines available to you.</para>
	<para>3. Verify networking by pinging the machines, if you like names, edit the appropriate hosts files.</para>
	<para>4. Make sure Samba is installed, write down the version of Samba.</para>
	<para>5. Open the Official Samba-3 howto pdf file that is installed on your computer. How many A4 pages is this file ? Then look at the same pdf on samba.org, it is updated regularly.</para>
	<para>6. Take a backup copy of the original smb.conf, name it smb.conf.orig</para>
	<para>7. Enable SWAT and take a look at it.</para>
	<para>8. Stop the Samba server.</para>
	<para>9. Create a minimalistic smb.conf.minimal and test it with testparm.</para>
	<para>10. Start Samba with your minimal smb.conf.</para>
	<para>11. Verify with smbclient that your Samba server works.</para>
	<para>12. Verify that another (Microsoft) computer can see your Samba server.</para>
	<para>13. Browse the network with net view and smbtree.</para>
	<para>14. Change the "Server String" parameter in smb.conf. How long does it take before you see the change (net view, smbclient, My Network Places,...) ?</para>
	<para>15. Will restarting Samba after a change to smb.conf speed up the change ?</para>
	<para>16. Which computer is the master browser master in your workgroup ? What is the master browser ?</para>
	<para>17. If time permits (or if you are waiting for other students to finish this practice), then install a sniffer (ethereal/wireshark) and watch the browser elections.</para>
</section>
</chapter>
<chapter><title>Simple Samba File Servers</title>
	<section><title>Read Only File Server</title>
		<para>Let's start with setting up a very simple read only file server with Samba. Everyone (even anonymous guests) will receive read access.</para>
		<para>The first step is to create a directory and put some test files in it.</para>
		<screen>
[root@RHEL4b samba]# mkdir -p /srv/samba/readonly
[root@RHEL4b samba]# ls -l /srv/samba/
total 4
drwxr-xr-x  2 root root 4096 Jun 22 11:07 readonly
[root@RHEL4b samba]# cd /srv/samba/readonly/
[root@RHEL4b readonly]# echo "It is cold today." > winter.txt
[root@RHEL4b readonly]# echo "It is hot today." > summer.txt
[root@RHEL4b readonly]# ll
total 8
-rw-r--r--  1 root root 17 Jun 22 11:13 summer.txt
-rw-r--r--  1 root root 18 Jun 22 11:13 winter.txt
[root@RHEL4b readonly]#
		</screen>
		<para>Linux will always require a user account before giving access to files (the files in our example above are owned by root). So we will create a user for our readonly file server and make this user the owner of the directory and all of its files. (Strictly speaking, you can setup a Samba read only file server without creating an extra user account).</para>
		<screen>
[root@RHEL4b ~]# useradd -c "Anonymous Samba Access" -p secret -s /bin/false Samba_nobody
[root@RHEL4b samba]# chown Samba_nobody.Samba_nobody /srv/samba/readonly/
[root@RHEL4b samba]# chmod 777 /srv/samba/readonly/
[root@RHEL4b samba]# ls -l /srv/samba/
total 4
drwxrwxrwx  2 Samba_nobody Samba_nobody 4096 Jun 22 11:09 readonly
[root@RHEL4b samba]# cd /srv/samba/readonly/
[root@RHEL4b readonly]# chown Samba_nobody.Samba_nobody *
[root@RHEL4b readonly]# ll
total 8
-rw-r--r--  1 Samba_nobody Samba_nobody 17 Jun 22 11:13 summer.txt
-rw-r--r--  1 Samba_nobody Samba_nobody 18 Jun 22 11:13 winter.txt
[root@RHEL4b samba]# 
		</screen>
		<para>It is time to create the smb.conf file (feel free to test it with testparm). We put our file server in the default workgroup, give it a descriptive server string, and set the security to share level (more on this later). The share is called pubread, and access to the share is enforced by Samba (remember we gave 777 to the directory).</para>
		<screen>
[root@RHEL4b samba]# cat smb.conf
[global]
workgroup = WORKGROUP
server string = Public Anonymous File Server
security = share

[pubread]
path = /srv/samba/readonly
comment = files to read
read only = Yes
guest ok = Yes
[root@RHEL4b samba]# 
		</screen>
		<para>After testing with testparm, restart the samba server and verify the existence of the share with smbclient.</para>
		<screen>
[root@RHEL4b readonly]# service smb restart
Shutting down SMB services:                                [  OK  ]
Shutting down NMB services:                                [  OK  ]
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
[root@RHEL4b readonly]# smbclient -L 127.0.0.1
Password: 
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Sharename       Type      Comment
---------       ----      -------
pubread         Disk      files to read
IPC$            IPC       IPC Service (Public Anonymous File Server)
ADMIN$          IPC       IPC Service (Public Anonymous File Server)
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Server               Comment
---------            -------
RHEL4B               Public Test Server
WINXP                

Workgroup            Master
---------            -------
WORKGROUP            WINXP
[root@RHEL4b readonly]#
		</screen>
		<para>The final test is to go to a Microsoft Windows computer and read a file on the Samba server. First we use the <command>net use</command><indexterm><primary>net use</primary></indexterm> command to mount the pubread share on the driveletter k.</para>
		<screen>
C:\Documents and Settings\paul&#062;net use k: \\rhel4b\pubread
The command completed successfully.
		</screen>
		<para>Then we test looking at the contents of the share, and reading the files.</para>
		<screen>					
C:\Documents and Settings\paul&#062;k:
						
K:\&#062;dir
Volume in drive K is pubread
Volume Serial Number is 0D56-11F2
				
Directory of K:\
						
06/22/2007  11:13 AM    &#060;DIR&#062;          .
06/22/2007  11:09 AM    &#060;DIR&#062;          ..
06/22/2007  11:13 AM                18 winter.txt
06/22/2007  11:13 AM                17 summer.txt
2 File(s)             35 bytes
2 Dir(s)   2,763,522,048 bytes free

K:\&#062;type winter.txt
It is cold today.

K:\&#062;
		</screen>
		<para>Just to be on the safe side, let us try writing.</para>
		<screen>
K:\&#062;echo very cold &#062; winter.txt
Access is denied.

K:\&#062;
		</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Create a directory in a good location (FHS) to share files for everyone to read.</para>
		<para>2. Make sure the directory is owned properly, put a textfile in it, then share it with Samba.</para>
		<para>3. Verify from your own and from another computer (smbclient, net use, ...) that the share is accessible for reading.</para>
		<para>4. Make a backup copy of your smb.conf, name it smb.conf.ReadOnlyFileServer.</para>
	</section>
	<section><title>Writable File Server</title>
		<para>In this second example, we will create a share where everyone can create files and write to files. Similar to before, we start by creating a directory, and setting ownership to our Samba_nobody user account.</para>
		<screen>
[root@RHEL4b samba]# mkdir /srv/samba/writable
[root@RHEL4b samba]# chown Samba_nobody.Samba_nobody /srv/samba/writable/
[root@RHEL4b samba]# chmod 777 /srv/samba/writable/
		</screen>
		<para>Then we simply add a share to our file server by editing smb.conf. Below the check with testparm.</para>
		<screen>
[root@RHEL4b samba]# testparm
Load smb config files from /etc/samba/smb.conf
Processing section "[pubread]"
Processing section "[pubwrite]"
Loaded services file OK.
Server role: ROLE_STANDALONE
Press enter to see a dump of your service definitions

# Global parameters
[global]
server string = Public Anonymous File Server
security = SHARE

[pubread]
comment = files to read
path = /srv/samba/readonly
guest ok = Yes

[pubwrite]
comment = files to read and write
path = /srv/samba/writable
read only = No
guest ok = Yes
		</screen>
		<para>Restart Samba, then onto the Windows XP machine and test our writing skills.</para>
		<screen>
C:\Documents and Settings\paul&#062;net use w: \\rhel4b\pubwrite
The command completed successfully.

C:\Documents and Settings\paul&#062;w:

W:\&#062;echo This is a write test &#062; hello.txt

W:\&#062;dir
Volume in drive W is pubwrite
Volume Serial Number is 0D56-272A

Directory of W:\

06/22/2007  12:29 PM    &#060;DIR&#062;          .
06/22/2007  12:26 PM    &#060;DIR&#062;          ..
06/22/2007  12:31 PM                23 hello.txt
1 File(s)             23 bytes
2 Dir(s)   2,763,522,048 bytes free
	
W:\&#062;type hello.txt
type hello.txt
This is a write test 
	
W:\&#062;
		</screen>
		<para>There is one little issue though; the linux owner of the files created through this writable share is the linux guest account (usually named nobody).</para>
		<screen>
[root@RHEL4b samba]# ls -l /srv/samba/writable/
total 4
-rwxr--r--  1 nobody nobody 23 Jun 22 12:31 hello.txt
-rwxr--r--  1 nobody nobody  0 Jun 22 12:33 test.txt
[root@RHEL4b samba]# 
		</screen>
		<para>So this is not the cleanest solution. We will improve this in the next topic.</para>
	</section>
	<section><title>Forcing a User Owner</title>
		<para>The Samba_nobody user account that we created in the previous examples is actually not used by Samba. It just owns the files and directories that we created for our shares. The goal of this section is to force ownership of files created through the Samba share to belong to our Samba_nobody user. Remember, our server is still accessible to everyone, nobody needs to know this user account or password. We just want a clean linux server.</para>
		<para>To accomplish this, we first have to tell Samba about this user. We can do this by adding the account to <command>smbpasswd</command><indexterm><primary>smbpasswd(1)</primary></indexterm>. </para>
		<screen>
[root@RHEL4b samba]# smbpasswd -a Samba_nobody
New SMB password:
Retype new SMB password:
Added user Samba_nobody.
[root@RHEL4b samba]# 
		</screen>
		<para>To find out where Samba keeps this information, use <command>smbd -b</command><indexterm><primary>smbd</primary></indexterm>. The PRIVATE_DIR variable will show you where the smbpasswd database is located.</para>
		<screen>
[root@RHEL4b samba]# smbd -b | grep -i private
PRIVATE_DIR: /etc/samba
		</screen>
		<para>You can use a simple cat to see the contents of the smbpasswd database. The nobody user does not have a password, the Samba_nobody user does have one (it is secret).</para>
		<screen>
[root@RHEL4b samba]# cat /etc/samba/smbpasswd 
nobody:99:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:XXXXXXXXXXXXXXXXXXXXXXXXXXXXX...
Samba_nobody:502:552902031BEDE9EFAAD3B435B51404EE:878D8014606CDA29677A44...
[root@RHEL4b samba]# 
		</screen>
		<para>Now that Samba knows about this user, we can adjust our writable share to force the ownership of files created through it. For this we use the <command>force user</command> and <command>force group</command> options. Now we can be sure that all files in the Samba writable share are owned by the same Samba_nobody user.</para>
		<screen>
[root@RHEL4b samba]# testparm -s smb.conf 2&#062;/dev/null | tail -7
[pubwrite]
comment = files to read and write
path = /srv/samba/writable
force user = Samba_nobody
force group = Samba_nobody
read only = No
guest ok = Yes
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>More about smbclient</title>
		<para>Instead of going to the Microsoft machines, we can do the same tests from within linux with <command>smbclient</command><indexterm><primary>smbclient(1)</primary></indexterm>. This first screenshot shows how to verify that Samba is running on your localhost, how to list all the Samba shares, who is the Master Browser of the workgroup and some more information.</para>
		<screen>
[paul@RHEL4b ~]$ smbclient -NL localhost
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Sharename       Type      Comment
---------       ----      -------
pubread         Disk      files to read
pubwrite        Disk      files to read and write
authwrite       Disk      authenticated users only
IPC$            IPC       IPC Service (Public Anonymous File Server)
ADMIN$          IPC       IPC Service (Public Anonymous File Server)
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Server               Comment
---------            -------
RHEL4B               Public Anonymous File Server
WINXP                

Workgroup            Master
---------            -------
WORKGROUP            WINXP
[paul@RHEL4b ~]$ 
		</screen>
		<para>It can also be used to test user access to a Samba share. First an example of how to test anonymous access to our pubread share. If the connection is established, then we get an smb prompt. You can use exit or q to return to bash.</para>
		<screen>
[paul@RHEL4b ~]$ smbclient //rhel4b/pubread -U%
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]
smb: \&#062; dir
.                                   D        0  Fri Jun 22 11:13:15 2007
..                                  D        0  Fri Jun 22 13:03:54 2007
winter.txt                                  18  Fri Jun 22 11:13:11 2007
summer.txt                                  17  Fri Jun 22 11:13:15 2007

45734 blocks of size 262144. 10541 blocks available
smb: \&#062; exit
[paul@RHEL4b ~]$ 
		</screen>
	</section>
	<section><title>NetBIOS name resolving</title>
		<para>If your clients are spread across multiple subnets, then it is likely there is a WINS (Microsoft Windows Internet Naming Service) or NBNS (NetBIOS Name Server) available to resolve NetBIOS names. You should then point Samba to the wins server with the <command>wins server</command><indexterm><primary>WINS</primary></indexterm> parameter.</para>
		<screen>wins server = 10.0.0.42</screen>
		<para>You can set the resolving order that Samba should use with the <command>name resolve order</command> parameter.</para>
		<screen>name resolve order = wins lmhosts host bcast</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Create a directory and share it with Samba.</para>
		<para>2. Make sure everyone can read and write files, test writing with smbclient and from a Microsoft computer.</para>
		<para>3. Verify the ownership of files created by various users.</para>
		<para>4. Use the "force user" and "force group" directives to force ownership of files created in this shared directory.</para>
		<para>5. Test that Samba properly registers in a WINS server.</para>
		<para>6. Test the working of force user with smbclient and/or net use and/or the MS Windows Explorer.</para>
	</section>
</chapter>
<chapter><title>Samba Servers with authentication and restrictions</title>
	<section><title>Authenticated User Access</title>
		<para>The goal of this example is to set up a file share accessible to a number of different users. The users will need to authenticate with their password before access to this share is granted. We will first create three randomly named users, each with their own password. First we add these users to linux.</para>
		<screen>
[root@RHEL4b samba]# useradd -c "Serena Williams" -p SerenaW Serena
[root@RHEL4b samba]# useradd -c "Kim Clijsters" -p KimC Kim
[root@RHEL4b samba]# useradd -c "Martina Hingis" -p MartinaH Martina
		</screen>
		<para>Then we add them to the smbpasswd file, with the same password.</para>
		<screen>
[root@RHEL4b samba]# smbpasswd -a Serena
New SMB password:
Retype new SMB password:
Added user Serena.
[root@RHEL4b samba]# smbpasswd -a Kim
New SMB password:
Retype new SMB password:
Added user Kim.
[root@RHEL4b samba]# smbpasswd -a Martina
New SMB password:
Retype new SMB password:
Added user Martina.
		</screen>
		<para>We add the following section to our smb.conf (and create the directory /srv/samba/authwrite).</para>
		<screen>
[authwrite]
path = /srv/samba/authwrite
comment = authenticated users only
read only = No
guest ok = No
		</screen>
		<para>After restarting Samba, we test with different users from within Microsoft computers. First Kim from Windows XP.</para>
		<screen>
C:\&#062;net use m: \\rhel4b\authwrite /user:Kim KimC
The command completed successfully.

C:\&#062;m:

M:\&#062;echo greetings from Kim &#062; greetings.txt
		</screen>
		<para>The next screenshot is Martina on a Windows 2000 computer, she succeeds in writing her files, but fails to overwrite the file from Kim.</para>
		<screen>
C:\&#062;net use k: \\rhel4b\authwrite /user:Martina MartinaH
The command completed successfully.

C:\&#062;k:

K:\&#062;echo greetings from martina &#062; Martina.txt

K:\&#062;echo test overwrite &#062; greetings.txt
Access is denied.
		</screen>
		<para>You can also test connecting with authentication with smbclient, first we a wrong password, then with the correct one.</para>
		<screen>
[paul@RHEL4b ~]$ smbclient //rhel4b/authwrite -UMartina&#037;wrongpass
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]
tree connect failed: NT_STATUS_WRONG_PASSWORD
[paul@RHEL4b ~]$ smbclient //rhel4b/authwrite -UMartina&#037;MartinaH
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]
smb: \&#062; more Martina.txt
getting file \Martina.txt of size 25 as /tmp/smbmore.Uv6c86 (24.4 kb/s) (average 24.4 kb/s)
greetings from martina 
smb: \&#062; q
[paul@RHEL4b ~]$ 
		</screen>
		<para>Congratulations, you now have a simple standalone Samba file server with authenticated access. And the files in the shares belong to their proper owners.</para>
		<screen>
[root@RHEL4b samba]# ls -l /srv/samba/authwrite/
total 8
-rwxr--r--  1 Kim     Kim     17 Jun 22 13:05 greetings.txt
-rwxr--r--  1 Martina Martina 25 Jun 22 13:08 Martina.txt
		</screen>
	</section>
	<section><title>Frequently used share settings</title>
		<section><title>valid users</title>
			<para>To restrict users per share, you can use the <command>valid users</command> parameter. In the example below, only the users listed as valid will be able to access the tennis share.</para>
			<screen>
[tennis]
	path = /srv/samba/tennis
	comment = authenticated and valid users only
	read only = No
	guest ok = No
	valid users = serena, kim, venus, justine
			</screen>
		</section>
		<section><title>invalid users</title>
			<para>If you are paranoia, you can also use <command>invalid users</command> to explicitely deny the listed users access. When a user is in both lists, the user has no access!</para>
			<screen>
[tennis]
	path = /srv/samba/tennis
	read only = No
	guest ok = No
	valid users = kim, serena, venus, justine
	invalid users = venus
			</screen>
		</section>		
		<section><title>create mask and inherit permissions</title>
			<para>Similar to umask (but not inverted), you can use the <command>create mask</command> and <command>directory mask</command> to set default permissions for newly created files and directories.</para>
			<screen>
[tennis]
	path = /srv/samba/tennis
	read only = No
	guest ok = No
	create mask = 644
			</screen>
			<para>With <command>inherit permissions = Yes</command> you can force newly created files and directories to inherit permissions from their parent directory, overriding the create mask and directory mask settings.</para>
		</section>
		<section><title>hosts allow</title>
			<para>The <command>hosts allow</command> or <command>allow hosts</command> parameter is one of the key advantages of Samba. It allows access control of shares on the ip-address level. To allow only specific hosts to access a share, list the hosts, seperated by comma's.</para>
			<screen>allow hosts = 192.168.1.5, 192.168.1.40</screen>
			<para>Allowing entire subnets is done by ending the range with a dot.</para>
			<screen>allow hosts = 192.168.1.</screen>
			<para>Subnet masks can be added in the classical way.</para>
			<screen>allow hosts = 10.0.0.0/255.0.0.0</screen>
			<para>You can also allow an entire subnet with exceptions.</para>
			<screen>hosts allow = 10. except 10.0.0.12</screen>
		</section>
		<section><title>hosts deny</title>
			<para>The <command>hosts deny</command> or <command>deny hosts</command> parameter is the logical counterpart of the previous. The syntax is the same as for hosts allow.</para>
			<screen>hosts deny = 192.168.1.55, 192.168.1.56</screen>
		</section>
		<section><title>hide unreadable</title>
			<para>Setting <command>hide unreadable</command> to yes will prevent users from seeing files that cannot be read by them.</para>
			<screen>hide unreadable = yes</screen>
		</section>
		<section><title>read list</title>
			<para>One more setting before we go on to the next topic. Even on a writable share, you can set a list of read only users with the <command>read list</command> parameter.</para>
			<screen>
[authwrite2]
	path = /srv/samba/authwrite2
	comment = authenticated users only
	read only = No
	guest ok = No
	read list = Martina, Roberto
			</screen>
		</section>
	</section>
	<section><title>Practice</title>
		<para>0. Make sure you have properly named backups of your smb.conf of the previous practices.</para>
		<para>1. Create three users (on the Unix and on the Samba), remember their passwords!</para>
		<para>2. Set up a shared directory that is only accessible to authenticated users.</para>
		<para>3. Verify that files created by these users belong to them.</para>
		<para>4. Limit access to the sales share to Sandra, Ann and Veronique. Make sure that Roberto cannot access the share.</para>
		<para>5. Even though the share is writable, Ann should only have read access.</para>
		<para>6. Set the create mask for files to read and write for everyone, test that it works.</para>
		<para>7. Limit one shared directory to the 192.168.1.0/24 subnet, and another share to the two computers with ip-addresses 192.168.1.33 and 172.17.18.19.</para>
		<para>8. Make sure users can only see files and directories that they can read. Test that it works!!</para>
		<para>9. If time permits (or if you are waiting for other students to finish this practice), then combine the "read only" and "writable" statements to check which one has priority. Then combine them with "read list", "write list", "hosts allow" and "hosts deny". Then combine them with file permissions on the linux filesystem (chmod,chown) and make a table of minimal mandatory settings for readonly/readwrite shared directories.</para>
	</section>
</chapter>
<chapter><title>Samba Domain Member Server</title>
	<section><title>smb.conf</title>
		<para>The <command>workgroup</command> option in the global section should match the netbios name of the Active Directory domain. Authentication will not be handled by Samba now, but by the Active Directory Domain Controllers, so we set the <command>security</command> option to domain. Since linux requires a user account for every user accessing its file system, we need to provide Samba with a range of uid's and gid's that it can use to create these user accounts. The first Active Directory user to connect will receive linux uid 20000. Below is our new global section in smb.conf.</para>
		<screen>
[global]
	workgroup = PEGASUS
	server string = Pegasus Domain Member Server
	security = Domain
	idmap uid = 20000-22000
	idmap gid = 20000-22000
	winbindd use default domain = Yes
		</screen>
		<para>Nothing special is required for the share section in smb.conf. Remember, we do not manually create users in smbpasswd or on the linux (/etc/passwd). Only Active Directory users are allowed access.</para>
		<screen>
[domaindata]
	path = /srv/samba/domaindata
	comment = Active Directory users only
	read only = No
		</screen>
	</section>
	<section><title>Joining the Active Directory Domain</title>
		<para>While the Samba server is stopped, you can use <command>net rpc join</command><indexterm><primary>net rpc join</primary></indexterm> to join the Active Directory Domain.</para>
		<screen>
[root@RHEL4b samba]# net rpc join -UAdministrator%Stargate1
Joined domain PEGASUS.
[root@RHEL4b samba]# 
		</screen>
		<para>Time to start Samba followed by <command>winbind</command><indexterm><primary>winbind</primary></indexterm>.</para>
		<screen>
[root@RHEL4b samba]# service smb start
Starting SMB services:                                     [  OK  ]
Starting NMB services:                                     [  OK  ]
[root@RHEL4b samba]# service winbindd start
Starting winbindd services:                                [  OK  ]
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>nsswitch.conf</title>
		<para>We need to update the <command>/etc/nsswitch.conf</command><indexterm><primary>/etc/nsswitch.conf</primary></indexterm> file now, so user group and host names can be resolved against the winbindd daemon.</para>
		<screen>
[root@RHEL4b samba]# vi /etc/nsswitch.conf 
[root@RHEL4b samba]# grep winbindd /etc/nsswitch.conf 
passwd:     files winbindd
group:      files winbindd
hosts:      files dns winbindd
[root@RHEL4b samba]#
		</screen>
	</section>
	<section><title>winbind</title>
		<para>The <command>winbind</command><indexterm><primary>winbind</primary></indexterm> daemon is talking with the Active Directory domain. With <command>wbinfo</command><indexterm><primary>wbinfo(1)</primary></indexterm> you can provide winbindd with credentials to talk to Active Directory.</para>
		<screen>[root@RHEL4b samba]# wbinfo --set-auth-user=Administrator%Stargate1</screen>
		<para>We can also use <command>wbinfo -a</command> to verify authentication of a user against Active Directory. Assuming a user account Venus with password VenusW is just created on the Active Directory, we get the following screenshot. </para>
		<screen>
[root@RHEL4b samba]# wbinfo -a Venus%VenusW
plaintext password authentication succeeded
challenge/response password authentication succeeded
[root@RHEL4b samba]# 
		</screen>
		<para>We can use <command>getent</command><indexterm><primary>getent(1)</primary></indexterm> to verify that winbindd is working and actually adding the Active directory users to /etc/passwd. The screenshot below shows that Kim and Serena are normal linux users in /etc/passwd, and that the Active Directory user Venus received uid 20000 in /etc/passwd.</para>
		<screen>
[root@RHEL4b samba]# getent passwd Kim
Kim:x:504:504:Kim Clijsters:/home/Kim:/bin/bash
[root@RHEL4b samba]# getent passwd Serena
Serena:x:503:503:Serena Williams:/home/Serena:/bin/bash
[root@RHEL4b samba]# getent passwd Venus
venus:*:20000:20000::/home/PEGASUS/venus:/bin/false
		</screen>
		<para>Not all Active Directory user accounts added to /etc/passwd by winbindd, only those that have been used.</para>
		<screen>
[root@RHEL4b samba]# getent passwd Justine
[root@RHEL4b samba]# wbinfo -a Justine%JustineH
plaintext password authentication succeeded
challenge/response password authentication succeeded
[root@RHEL4b samba]# getent passwd Justine
justine:*:20001:20000::/home/PEGASUS/justine:/bin/false
[root@RHEL4b samba]#
		</screen>
		<para>All the Active Directory users can now easily connect to the Samba share. Files created by them, belong to them. </para>
		<screen>
[root@RHEL4b samba]# ll /srv/samba/domaindata/
total 0
-rwxr--r--  1 justine 20000 0 Jun 22 19:54 created_by_justine_on_winxp.txt
-rwxr--r--  1 venus   20000 0 Jun 22 19:55 created_by_venus.txt
-rwxr--r--  1 maria   20000 0 Jun 22 19:57 Maria.txt
		</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Verify that you have a working Active Directory (AD) domain.</para>
		<para>2. Setup Samba as a member server in the domain.</para>
		<para>3. Verify the creation of a computer account in AD for your Samba server.</para>
		<para>4. Verify the automatic creation of AD users in /etc/passwd with wbinfo and getent.</para>
		<para>5. Connect to Samba shares with AD users, and verify ownership of their files.</para>
	</section>
</chapter>
<chapter><title>Samba Domain Controller</title>
	<section><title>About Domain Controllers</title>
		<section><title>Samba 3</title>
			<para>Samba 3 can act as a domain controller in its own domain. In a Windows NT4 domain, with one Windows NT4 PDC and zero or more BDC's, Samba 3 can only be a member server. The same is valid for Samba 3 in an Active Directory Domain with Windows 2000 and/or Windows 2003 DC's. In short, a Samba 3 domain controller can not share domain control with Windows domain controllers.</para>
		</section>
		<section><title>Samba 4</title>
			<para>Samba 4 can be a domain Controller in an Active Directory domain, but as of this writing, Samba 4 is not released for production!</para>
		</section>
		<section><title>About password backends</title>
			<para>The example below uses the <command>tdbsam</command><indexterm><primary>tdbsam</primary></indexterm> password backend. Another option would be to use LDAP. Larger domains will benefit from using LDAP instead of the not so scalable tdbsam. When you need more than one Domain Controller, then the Samba team advises to not use tdbsam.</para>
		</section>
	</section>
	<section><title>smb.conf</title>
		<para>Now is a good time to start adding comments in your smb.conf. First we'll take a look at the naming of our domain and server in the <command>[global]</command> section, and at the domain controlling parameters. The security must be set to user (which is the default). Our Samba server is the most stable system in the network, so it should win all browser elections (<command>os level</command> above 32) to become the <command>browser master</command><indexterm><primary>browser master</primary></indexterm>, and it should accept domain logons (<command>domain logons = Yes</command>).</para>
		<screen>
[global]
# names
	workgroup = SPORTS
	netbios name = DCSPORTS
	server string = Sports Domain Controller
# domain control parameters
	security = user
	os level = 80
	preferred master = Yes
	domain master = Yes
	domain logons = Yes
		</screen>
		<para>Then we create some sections for file shares, to test our Samba server. Users can all access the general sports file share, but only group members can access their own sport share.</para>
		<screen>
[sports]
comment = Information about all sports
path = /srv/samba/sports
valid users = @ntsports
read only = No

[tennis]
comment = Information about tennis
path = /srv/samba/tennis
valid users = @nttennis
read only = No

[football]
comment = Information about football
path = /srv/samba/football
valid users = @ntfootball
read only = No
		</screen>
		<para>Part of the Microsoft definition of a domain controller is that it should have a <command>netlogon share</command>. This is the relevant part of smb.conf to create this netlogon share on Samba.</para>
		<screen>
[netlogon]
comment = Network Logon Service
path = /srv/samba/netlogon
admin users = root
guest ok = Yes
browseable = No
		</screen>
	</section>
	<section><title>Users and Groups</title>
		<para>To be able to use users and groups in Samba, we have to set up some users and groups on the Linux computer.</para>
		<screen>
[root@RHEL4b samba]# groupadd ntadmins
[root@RHEL4b samba]# groupadd ntsports
[root@RHEL4b samba]# groupadd nttennis
[root@RHEL4b samba]# groupadd ntfootball
[root@RHEL4b samba]# useradd -m -G ntadmins -p Stargate1 Administrator
[root@RHEL4b samba]# useradd -m -G ntsports,nttennis -p stargate Venus
[root@RHEL4b samba]# useradd -m -G ntsports,nttennis -p stargate Serena
[root@RHEL4b samba]# useradd -m -G ntsports,nttennis -p stargate Kim
[root@RHEL4b samba]# useradd -m -G ntsports,ntfootball -p stargate Figo
[root@RHEL4b samba]# useradd -m -G ntsports,ntfootball -p stargate Pfaff
		</screen>
		<para>Next we must make these users known to Samba with the smbpasswd tool. When you add the first user to <command>tdbsam</command><indexterm><primary>tdbsam</primary></indexterm>, the file <command>/etc/samba/passdb.tdb</command><indexterm><primary>/etc/samba/passdb.tdb</primary></indexterm> will be created.</para>
		<screen>
[root@RHEL4b samba]# smbpasswd -a Administrator
New SMB password:
Retype new SMB password:
Unable to open/create TDB passwd
pdb_getsampwnam: Unable to open TDB passwd (/etc/samba/passdb.tdb)!
TDBSAM version too old (0), trying to convert it.
TDBSAM converted successfully.
Added user Administrator.
[root@RHEL4b samba]#
		</screen>
		<para>Adding the second user generates less output.</para>
		<screen>
[root@RHEL4b samba]# smbpasswd -a root
New SMB password:
Retype new SMB password:
Added user root.
		</screen>
	</section>
	<section><title>About Computer Accounts</title>
		<para>Every NT computer (Windows NT, 2000, XP, Vista) can become a member of a domain. Joining the domain (by right-clicking on My Computer) means that a computer account will be created in the domain. This computer account also has a password (but you cannot know it) to prevent other computers with the same name from accidentally becoming member of the domain. The computer account created by Samba is visible in the <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> file on linux. Computer accounts appear as a normal user account, but end their name with a dollar sign. Below a screenshot of the winxp$ computer account, created by Samba 3.</para>
		<screen>
[root@RHEL4b samba]# tail -5 /etc/passwd
Serena:x:508:512::/home/Serena:/bin/bash
Kim:x:509:513::/home/Kim:/bin/bash
Figo:x:510:514::/home/Figo:/bin/bash
Pfaff:x:511:515::/home/Pfaff:/bin/bash
winxp$:x:512:516::/home/nobody:/bin/false
		</screen>
		<para>To be able to create the account, you will need to provide credentials of an account with the permission to create accounts (by default only root can do this on Linux). And we will have to tell Samba how to to this, by adding an <command>add machine script</command> to the global section of smb.conf.</para>
		<screen>add machine script = /usr/sbin/useradd -s /bin/false -d /home/nobody %u</screen>
		<para>You can now join a Microsoft computer to the sports domain (with the root user). After reboot of the Microsoft computer, you will be able to logon with Administrator (password Stargate1), but you will get an error about your roaming profile. We will fix this in the next section.</para>
	</section>
	<section><title>Roaming Profiles</title>
		<para>For your information, if you want to force local profiles instead of roaming profiles, then simply add the following two lines to the global section in smb.conf.</para>
		<screen>
logon home =
logon path =
		</screen>
		<para>Microsoft computers store a lot of User Metadata and application data in a user profile. Making this profile available on the network will enable users to keep their Desktop and Application settings across computers. User profiles on the network are called <command>roaming profiles</command><indexterm><primary>roaming profiles(samba)</primary></indexterm> or <command>roving profiles</command>. The Samba domain controller can manage these profiles. First we need to add the relevant section in smb.conf.</para>
		<screen>
[Profiles]
	comment = User Profiles
	path = /srv/samba/profiles
	readonly = No
	profile acls = Yes
		</screen>
		<para>Besides the share section, we also need to set the location of the profiles share (this can be another Samba server) in the global section.</para>
		<screen> logon path = \\%L\Profiles\%U</screen>
		<para>The <command>&#037;L</command> variable is the name of this Samba server, the <command>&#037;U</command> variable translates to the username. After adding a user to smbpasswd and letting the user log on and off, the profile of the user will look like this.</para>
		<screen>
[root@RHEL4b samba]# ll /srv/samba/profiles/Venus/
total 568
drwxr-xr-x  4 Venus Venus   4096 Jul  5 10:03 Application Data
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 Cookies
drwxr-xr-x  3 Venus Venus   4096 Jul  5 10:03 Desktop
drwxr-xr-x  3 Venus Venus   4096 Jul  5 10:03 Favorites
drwxr-xr-x  4 Venus Venus   4096 Jul  5 10:03 My Documents
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 NetHood
-rwxr--r--  1 Venus Venus 524288 Jul  5  2007 NTUSER.DAT
-rwxr--r--  1 Venus Venus   1024 Jul  5  2007 NTUSER.DAT.LOG
-rw-r--r--  1 Venus Venus    268 Jul  5 10:03 ntuser.ini
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 PrintHood
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 Recent
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 SendTo
drwxr-xr-x  3 Venus Venus   4096 Jul  5 10:03 Start Menu
drwxr-xr-x  2 Venus Venus   4096 Jul  5 10:03 Templates
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>Groups in NTFS acls</title>
		<para>We have users on Unix, we have groups on Unix that contain those users.</para>
		<screen>
[root@RHEL4b samba]# grep nt /etc/group
...
ntadmins:x:506:Administrator
ntsports:x:507:Venus,Serena,Kim,Figo,Pfaff
nttennis:x:508:Venus,Serena,Kim
ntfootball:x:509:Figo,Pfaff
[root@RHEL4b samba]# 
		</screen>
		<para>We already added Venus to the <command>tdbsam</command> with <command>smbpasswd</command><indexterm><primary>smbpasswd(1)</primary></indexterm>.</para>
		<screen>smbpasswd -a Venus</screen>
		<para>Does this mean that Venus can access the tennis and the sports shares ? Yes, all access works fine on the Samba server. But the nttennis group is not available on the windows machines. To make the groups available on windows (like in the ntfs security tab of files and folders), we have to map unix groups to windows groups. To do this, we use the <command>net groupmap</command><indexterm><primary>net groupmap</primary></indexterm> command.</para>
		<screen>
[root@RHEL4b samba]# net groupmap add ntgroup="tennis" unixgroup=nttennis type=d
No rid or sid specified, choosing algorithmic mapping
Successully added group tennis to the mapping db
[root@RHEL4b samba]# net groupmap add ntgroup="football" unixgroup=ntfootball type=d
No rid or sid specified, choosing algorithmic mapping
Successully added group football to the mapping db
[root@RHEL4b samba]# net groupmap add ntgroup="sports" unixgroup=ntsports type=d
No rid or sid specified, choosing algorithmic mapping
Successully added group sports to the mapping db
[root@RHEL4b samba]# 
		</screen>
		<para>Now you can use the Samba groups on all NTFS volumes on members of the domain.</para>
	</section>
	<section><title>logon scripts</title>
	<para>Before testing a logon script, make sure it has the proper carriage returns that DOS files have.</para>
	<screen>
[root@RHEL4b netlogon]# cat start.bat 
net use Z: \\DCSPORTS0\SPORTS
[root@RHEL4b netlogon]# unix2dos start.bat 
unix2dos: converting file start.bat to DOS format ...
[root@RHEL4b netlogon]# 
	</screen>
	<para>Then copy the scripts to the netlogon share, and add the following parameter to smb.conf.</para>
	<screen>logon script = start.bat</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Setup Samba as a domain controller.</para>
		<para>2. Create the shares salesdata, salespresentations and meetings. Salesdata must be accessible to all sales people and to all managers. SalesPresentations is only for all sales people. Meetings is only accessible to all managers. Use groups to accomplish this.</para>
		<para>3. Join a Microsoft computer to your domain. Verify the creation of a computer account in /etc/passwd.</para>
		<para>4. Setup and verify the proper working of roaming profiles.</para>
		<para>5. Find information about home directories for users, set them up and verify that users receive their home directory mapped under the H:-drive in MS Windows Explorer.</para>
		<para>6. Use a couple of samba domain groups with members to set acls on ntfs. Verify that it works!</para>
		<para>7. Knowing that the &#037;m variable contains the computername, create a seperate log file for every computer(account).</para>
		<para>8. Knowing that &#037;s contains the client operating system, include a smb.&#037;s.conf file that contains a share. (The share will only be visible to clients with that OS).</para>
		<para>9. If time permits (or if you are waiting for other students to finish this practice), then combine "valid users" and "invalid users" with groups and usernames with "hosts allow" and "hosts deny" and make a table of which get priority over which.</para>
	</section>
</chapter>
<chapter><title>Samba Print Servers</title>
	<section><title>Simple CUPS Print Server</title>
		<para>Let us start by setting up a Samba print server that serves two printers which are set up with the CUPS web interface (http://localhost:631). We make these printers available to everyone for printing. We set up the CUPS printers without a driver (raw printing device). The <command>lpstat</command><indexterm><primary>lpstat(1)</primary></indexterm> tool will see the printers like this.</para>
		<screen>
[root@RHEL4b samba]# lpstat -t
scheduler is running
system default destination: HPColor
device for HPBlack: socket://192.168.1.244:9100
device for HPColor: parallel:/dev/lp0
HPBlack accepting requests since Jan 01 00:00
HPColor accepting requests since Jan 01 00:00
printer HPBlack is idle.  enabled since Jan 01 00:00
printer HPColor is idle.  enabled since Jan 01 00:00
		</screen>
		<para>The windows clients need to install the correct printer driver themselves, so the spooler just sends the jobs to the print device (without any kind of processing or interpreting of the print jobs). Our smb.conf looks like this.</para>
		<screen>
[global]
	server string = Public Anonymous Print Server
	security = share
	disable spoolss = No
	printing = cups

[printers]
	path = /var/spool/samba
	read only = Yes
	printable = Yes
	use client driver = Yes
		</screen>
		<para>Let's do a quick check with smbclient.</para>
		<screen>
[root@RHEL4b samba]# smbclient -NL 127.0.0.1
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.10-1.4E.9]

Sharename       Type      Comment
---------       ----      -------
IPC$            IPC       IPC Service (Public Anonymous Print Server)
ADMIN$          IPC       IPC Service (Public Anonymous Print Server)
HPBlack         Printer   Local Raw Printer
HPColor         Printer   Local Raw Printer
...
		</screen>
		<para>That looks ok. Now you can add the printer to windows computers in the workgroup, just browse to your Samba server in the add printer wizard. Or you can connect with the <command>net use</command><indexterm><primary>net use</primary></indexterm> command as shown below.</para>
		<screen>
C:\shov&#062;net use lpt1: \\rhel4b\HPColor
The command completed successfully.

C:\shov&#062;net use
New connections will be remembered.


Status       Local     Remote                    Network

-------------------------------------------------------------------------------
OK           LPT1      \\rhel4b\HPColor          Microsoft Windows Network
The command completed successfully.

C:\shov&#062;print shovel.bat
C:\shov\shovel.bat is currently being printed
		</screen>
		<para>After printing a test page (by rightclicking on the printer icon in windows and then clicking on the print test page button of the properties dialog box) and issuing the print command from within Firefox, the print queue looks like this.</para>
		<screen>
[root@RHEL4b samba]# lpq -a
Rank    Owner   Job     File(s)                         Total Size
active  nobody  4       smbprn.00000001 Test Page       112640 bytes
1st     nobody  5       smbprn.00000002 Mozilla Firefox 120832 bytes
		</screen>
		<para>For troubleshooting, it can be useful to stop (pause) the printer. This way the jobs stay in the queue.</para>
		<screen>
[root@RHEL4b samba]# lpstat -t
scheduler is running
system default destination: HPColor
device for HPBlack: socket://192.168.1.244:9100
device for HPColor: parallel:/dev/lp0
HPBlack accepting requests since Jan 01 00:00
HPColor accepting requests since Jan 01 00:00
printer HPBlack disabled since Jan 01 00:00 -
Paused
printer HPColor is idle.  enabled since Jan 01 00:00
HPBlack-4           nobody       112640   Sat 07 Jul 2007 07:59:33 AM CEST
HPBlack-5           nobody       120832   Sat 07 Jul 2007 08:00:04 AM CEST
		</screen>
	</section>
	<section><title>Simple BSD Print Server</title>
		<para>The default BSD style print commands (also refered to as LPD/LPR) are defined in rfc 1179. The smb.conf file is similar to the one for CUPS printing, except that CUPS is the default. The file now looks like this.</para>
		<screen>
[global]
	server string = Public Anonymous Print Server
	printing = bsd
	load printers = yes

[printers]
	path = /var/spool/samba
	writable = no
	printable = Yes
	public = yes
		</screen>
		<para>Testparm however gives us some more information on values used for the print commands.</para>
		<screen>
[root@RHEL4b samba]# testparm 
Load smb config files from /etc/samba/smb.conf
Processing section "[printers]"
Loaded services file OK.
Server role: ROLE_STANDALONE
Press enter to see a dump of your service definitions
	
# Global parameters
[global]
	server string = Public Anonymous Print Server
	printing = bsd
	print command = lpr -r -P'&#037;p' &#037;s
	lpq command = lpq -P'&#037;p'
	lprm command = lprm -P'&#037;p' &#037;j

[printers]
	path = /var/spool/samba
	guest ok = Yes
	printable = Yes
	browseable = No
[root@RHEL4b samba]# 
		</screen>
	</section>
	<section><title>Simple Unix SysV Print Server</title>
		<para>SystemV style printing uses the lp command in this form.</para>
		<screen>lp -dprinter -s file</screen>
		<para>Since by default this command does not remove the file, we have to add this removal to smb.conf. So here is a simple smb.conf to share Unix System V type printers with Samba.</para>
		<screen>
[global]
	server string = Public Anonymous Print Server
	printing = sysv
	load printers = yes
	
[printers]
	path = /var/spool/samba
	writable = no
	printable = Yes
	public = yes
	print command = lp -d&#037;p -s &#037;s ; rm &#037;s
		</screen>
	</section>	
	<section><title>Samba Prining tips</title>
		<para>The <command>printable = Yes</command> line must always be present in Samba printer shares, even in the <command>[printers]</command> section. It is also important to have a naming convention that prevents printers from having the same name as users. The <command>[homes]</command> section automatically creates a share for each user with that username, so it cannot be also a printer share. </para>
		<para>To troubleshoot the print command, you can da a little trick in smb.conf. Instead of the actual print command, construct the printers section in smb.conf like this.</para>
		<screen>
[printers]
	path = /var/spool/samba
	writable = no
	printable = Yes
	public = yes
	print command = echo "lpr -r -P'%p' %s" >> /tmp/bsdprint.log
		</screen>
		<para>Nothing will be printed, but you can test the print command that is generated by Samba. In this case, the log file looks like this.</para>
		<screen>
[root@RHEL4b samba]# cat /tmp/bsdprint.log
lpr -r -P'HP400' smbprn.00000012.ARQtkM
lpr -r -P'HP400' smbprn.00000013.YbFkuN
lpr -r -P'HP400' smbprn.00000017.NeDuGj
[root@RHEL4b samba]# 
		</screen>
		<para>Here is a list variables that are used by Samba for printing.</para>
		<screen>
&#037;s	filename with path (of the file to be printed)
&#037;f filename without path
&#037;p name of the destination unix printer
&#037;j	print job number	
		</screen>
	</section>
	<section><title>Practice</title>
		<para>1. Create two printers (with lpadmin or with the cups web interface) and pause(stop) them.</para>
		<para>2. Serve these printers with Samba. Connect with a Microsoft computer and test printing.</para>
		<para>3. Make sure only Isabelle and Caroline can access one of the printers.</para>
		<para>4. Make sure they have to be on the 10.5.0.0/16 subnet to access the printer.</para>
		<para>5. If time permits... There are some issues with a BSD printer. Your manager asks you to log the lpr command syntax, its stdout and its stderr to three different files.</para>
	</section>
</chapter>
