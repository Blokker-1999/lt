<section><title>introduction to scripting</title>
	<section><title>scripts are everywhere</title>
		<para>Shells like <command>bash</command> and <command>Korn</command> have support for programming constructs that can be saved as <command>scripts</command>. These <command>scripts</command> in turn then become more <command>shell</command> commands. Many Linux commands are <command>scripts</command>. <command>User profile scripts</command> are run when a user logs and <command>init scripts</command> are run when a <command>daemon</command> is stopped or started.</para>
		<para>This means that system administrators also need basic knowledge of <command>scripting</command> to understand how their servers and their applications are started, updated, upgraded, patched, maintained, configured and removed, and also to understand how a user environment is built.</para>
	</section>
	<section><title>hello world</title>
		<para>Just like in every programming course, we start with a simple <command>hello_world</command> script. The following script will output <command>Hello World</command>.</para>
		<screen>echo Hello World</screen>
		<para>After creating this simple script in <command>vi</command> or with <command>echo</command>, you'll have to <command>chmod +x hello_world</command><indexterm><primary>chmod +x</primary></indexterm> to make it executable. And unless you add the scripts directory to your path, you'll have to type the path to the script for the shell to be able to find it.</para>
		<screen>[paul@RHEL4a ~]$ echo echo Hello World > hello_world
[paul@RHEL4a ~]$ chmod +x hello_world 
[paul@RHEL4a ~]$ ./hello_world 
Hello World
[paul@RHEL4a ~]$</screen>
	</section>
	<section><title>she-bang</title>
		<para>Let's expand our example a little further by putting <command>#!/bin/bash</command> on the first line of the script. The <command>#!</command> is called a <command>she-bang</command> (sometimes called <command>sha-bang</command>), where the <command>she-bang</command> is the first two characters of the script.</para>
		<screen>#!/bin/bash
echo Hello World</screen>
		<para>You can never be sure which shell a user is running. A script that works flawlessly in <command>bash</command> might not work in <command>ksh</command>, <command>csh</command>, or <command>dash</command>. To instruct a shell to run your script in a certain shell, you can start your script with a <command>she-bang</command><indexterm><primary>#!/bin/bash</primary></indexterm> followed by the shell it is supposed to run in. This script will run in a bash shell.</para>
		<screen>#!/bin/bash
echo -n hello
echo A bash subshell `echo -n hello`
		</screen>
		<para>This script will run in a Korn shell (unless <command>/bin/ksh</command> is a hard link to <command>/bin/bash</command>). The <command>/etc/shells</command><indexterm><primary>/etc/shells</primary></indexterm> file contains a list of shells on your system.</para>
		<screen>#!/bin/ksh
echo -n hello
echo a Korn subshell `echo -n hello`
		</screen>
	</section>
	<section><title>comment</title>
		<para>Let's expand our example a little further by adding comment lines.</para>
		<screen>#!/bin/bash
#
# Hello World Script
#
echo Hello World</screen>
	</section>
	<section><title>variables</title>
		<para>Here is a simple example of a variable inside a script.</para>
		<screen>#!/bin/bash
#
# simple variable in script
#
var1=4
echo var1 = $var1</screen>
		<para>Scripts can contain variables, but since scripts are run in their own shell, the variables do not survive the end of the script.</para>
		<screen>[paul@RHEL4a ~]$ echo $var1

[paul@RHEL4a ~]$ ./vars
var1 = 4
[paul@RHEL4a ~]$ echo $var1

[paul@RHEL4a ~]$</screen>
	</section>
	<section><title>sourcing a script</title>
		<para>Luckily, you can force a script to run in the same shell; this is called <command>sourcing</command> a script.</para>
		<screen>
[paul@RHEL4a ~]$ source ./vars
var1 = 4
[paul@RHEL4a ~]$ echo $var1
4
[paul@RHEL4a ~]$ 
		</screen>
		<para>The above is identical to the below.</para>
		<screen>
[paul@RHEL4a ~]$ . ./vars
var1 = 4
[paul@RHEL4a ~]$ echo $var1
4
[paul@RHEL4a ~]$ 
		</screen>
	</section>
	<section><title>prevent setuid root spoofing</title>
		<para>Some user may try to perform <command>setuid</command> based script <command>root spoofing</command>. This is a rare but possible attack. To improve script security and to avoid interpreter spoofing, you need to add <command>--</command> after the <command>#!/bin/bash</command>, which disables further option processing so the shell will not accept any options.</para>
		<screen>#!/bin/bash -
or
#!/bin/bash --</screen>
		<para>Any arguments after the -- are treated as filenames and arguments. An argument of - is equivalent to --.</para>
	</section>
</section>
